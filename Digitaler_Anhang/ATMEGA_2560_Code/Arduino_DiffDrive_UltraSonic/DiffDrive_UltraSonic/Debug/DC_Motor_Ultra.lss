
DC_Motor_Ultra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800200  00004390  00004424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000172  00800336  00800336  0000455a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000455a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000458c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  000045cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000105c7  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034d3  00000000  00000000  00015283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f17  00000000  00000000  00018756  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a30  00000000  00000000  0001c670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000664a  00000000  00000000  0001e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000087d9  00000000  00000000  000246ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  0002cec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c1       	rjmp	.+544    	; 0x222 <__ctors_end>
       2:	00 00       	nop
       4:	95 c3       	rjmp	.+1834   	; 0x730 <__vector_1>
       6:	00 00       	nop
       8:	bf c3       	rjmp	.+1918   	; 0x788 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__vector_3>
      10:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__vector_4>
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__vector_6>
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__vector_15>
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__vector_23>
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__vector_25>
      68:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__vector_26>
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	db c0       	rjmp	.+438    	; 0x284 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	33 34       	cpi	r19, 0x43	; 67
      e6:	61 64       	ori	r22, 0x41	; 65
      e8:	64 31       	cpi	r22, 0x14	; 20
      ea:	36 38       	cpi	r19, 0x86	; 134
      ec:	35 37       	cpi	r19, 0x75	; 117
      ee:	34 35       	cpi	r19, 0x54	; 84
      f0:	31 30       	cpi	r19, 0x01	; 1
      f2:	65 36       	cpi	r22, 0x65	; 101
      f4:	65 31       	cpi	r22, 0x15	; 21
      f6:	37 66       	ori	r19, 0x67	; 103
      f8:	35 64       	ori	r19, 0x45	; 69
      fa:	32 33       	cpi	r19, 0x32	; 50
      fc:	65 63       	ori	r22, 0x35	; 53
      fe:	63 30       	cpi	r22, 0x03	; 3
     100:	37 37       	cpi	r19, 0x77	; 119
     102:	65 66       	ori	r22, 0x65	; 101
	...

00000105 <_ZZN8std_msgs5Int647getTypeEvE3__c>:
     105:	73 74 64 5f 6d 73 67 73 2f 49 6e 74 36 34 00        std_msgs/Int64.

00000114 <_ZZN8std_msgs5Int326getMD5EvE3__c>:
     114:	64 61 35 39 30 39 66 62 65 33 37 38 61 65 61 66     da5909fbe378aeaf
     124:	38 35 65 35 34 37 65 38 33 30 63 63 31 62 62 37     85e547e830cc1bb7
	...

00000135 <_ZZN8std_msgs5Int327getTypeEvE3__c>:
     135:	73 74 64 5f 6d 73 67 73 2f 49 6e 74 33 32 00        std_msgs/Int32.

00000144 <_ZZN14rosserial_msgs20RequestParamResponse6getMD5EvE3__c>:
     144:	39 66 30 65 39 38 62 64 61 36 35 39 38 31 39 38     9f0e98bda6598198
     154:	36 64 64 66 35 33 61 66 61 37 61 34 30 65 34 39     6ddf53afa7a40e49
	...

00000165 <_ZN14rosserial_msgsL12REQUESTPARAME>:
     165:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 52     rosserial_msgs/R
     175:	65 71 75 65 73 74 50 61 72 61 6d 00                 equestParam.

00000181 <_ZZN14rosserial_msgs3Log6getMD5EvE3__c>:
     181:	31 31 61 62 64 37 33 31 63 32 35 39 33 33 32 36     11abd731c2593326
     191:	31 63 64 36 31 38 33 62 64 31 32 64 36 32 39 35     1cd6183bd12d6295
	...

000001a2 <_ZZN14rosserial_msgs3Log7getTypeEvE3__c>:
     1a2:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 4c     rosserial_msgs/L
     1b2:	6f 67 00                                            og.

000001b5 <_ZZN14rosserial_msgs9TopicInfo6getMD5EvE3__c>:
     1b5:	30 61 64 35 31 66 38 38 66 63 34 34 38 39 32 66     0ad51f88fc44892f
     1c5:	38 63 31 30 36 38 34 30 37 37 36 34 36 30 30 35     8c10684077646005
	...

000001d6 <_ZZN14rosserial_msgs9TopicInfo7getTypeEvE3__c>:
     1d6:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 54     rosserial_msgs/T
     1e6:	6f 70 69 63 49 6e 66 6f 00                          opicInfo.

000001ef <_ZZN8std_msgs4Time6getMD5EvE3__c>:
     1ef:	63 64 37 31 36 36 63 37 34 63 35 35 32 63 33 31     cd7166c74c552c31
     1ff:	31 66 62 63 63 32 66 65 35 61 37 62 63 32 38 39     1fbcc2fe5a7bc289
	...

00000210 <_ZZN8std_msgs4Time7getTypeEvE3__c>:
     210:	73 74 64 5f 6d 73 67 73 2f 54 69 6d 65 00           std_msgs/Time.

0000021e <__ctors_start>:
     21e:	d5 14       	cp	r13, r5
     220:	26 1e       	adc	r2, r22

00000222 <__ctors_end>:
     222:	11 24       	eor	r1, r1
     224:	1f be       	out	0x3f, r1	; 63
     226:	cf ef       	ldi	r28, 0xFF	; 255
     228:	d1 e2       	ldi	r29, 0x21	; 33
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	0c bf       	out	0x3c, r16	; 60

00000232 <__do_copy_data>:
     232:	13 e0       	ldi	r17, 0x03	; 3
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b2 e0       	ldi	r27, 0x02	; 2
     238:	e0 e9       	ldi	r30, 0x90	; 144
     23a:	f3 e4       	ldi	r31, 0x43	; 67
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a6 33       	cpi	r26, 0x36	; 54
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	24 e0       	ldi	r18, 0x04	; 4
     24e:	a6 e3       	ldi	r26, 0x36	; 54
     250:	b3 e0       	ldi	r27, 0x03	; 3
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	a8 3a       	cpi	r26, 0xA8	; 168
     258:	b2 07       	cpc	r27, r18
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>

0000025c <__do_global_ctors>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	c1 e1       	ldi	r28, 0x11	; 17
     260:	d1 e0       	ldi	r29, 0x01	; 1
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	06 c0       	rjmp	.+12     	; 0x272 <__do_global_ctors+0x16>
     266:	21 97       	sbiw	r28, 0x01	; 1
     268:	01 09       	sbc	r16, r1
     26a:	80 2f       	mov	r24, r16
     26c:	fe 01       	movw	r30, r28
     26e:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__tablejump2__>
     272:	cf 30       	cpi	r28, 0x0F	; 15
     274:	d1 07       	cpc	r29, r17
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	08 07       	cpc	r16, r24
     27a:	a9 f7       	brne	.-22     	; 0x266 <__do_global_ctors+0xa>
     27c:	0e 94 56 11 	call	0x22ac	; 0x22ac <main>
     280:	0c 94 c6 21 	jmp	0x438c	; 0x438c <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <_ZN15DC_Motor_Driver12setTargetRPMEl>:
void DC_Motor_Driver::stopMotor()
{
	this->motorRunning = 0;
	
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_1);
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
     286:	fc 01       	movw	r30, r24
     288:	a3 89       	ldd	r26, Z+19	; 0x13
     28a:	b4 89       	ldd	r27, Z+20	; 0x14
     28c:	9a 01       	movw	r18, r20
     28e:	ab 01       	movw	r20, r22
     290:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__muluhisi3>
     294:	62 83       	std	Z+2, r22	; 0x02
     296:	73 83       	std	Z+3, r23	; 0x03
     298:	84 83       	std	Z+4, r24	; 0x04
     29a:	95 83       	std	Z+5, r25	; 0x05
     29c:	08 95       	ret

0000029e <_ZN15DC_Motor_Driver12setTargetPPMEl>:
     29e:	fc 01       	movw	r30, r24
     2a0:	42 83       	std	Z+2, r20	; 0x02
     2a2:	53 83       	std	Z+3, r21	; 0x03
     2a4:	64 83       	std	Z+4, r22	; 0x04
     2a6:	75 83       	std	Z+5, r23	; 0x05
     2a8:	08 95       	ret

000002aa <_ZN15DC_Motor_Driver12getTargetPPMEv>:
     2aa:	fc 01       	movw	r30, r24
     2ac:	62 81       	ldd	r22, Z+2	; 0x02
     2ae:	73 81       	ldd	r23, Z+3	; 0x03
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	95 81       	ldd	r25, Z+5	; 0x05
     2b4:	08 95       	ret

000002b6 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>:
     2b6:	fc 01       	movw	r30, r24
     2b8:	66 83       	std	Z+6, r22	; 0x06
     2ba:	a7 81       	ldd	r26, Z+7	; 0x07
     2bc:	b0 85       	ldd	r27, Z+8	; 0x08
     2be:	66 23       	and	r22, r22
     2c0:	69 f0       	breq	.+26     	; 0x2dc <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x26>
     2c2:	42 85       	ldd	r20, Z+10	; 0x0a
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	01 f5       	brne	.+64     	; 0x308 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x52>
     2c8:	5c 91       	ld	r21, X
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9c 01       	movw	r18, r24
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x1e>
     2d2:	22 0f       	add	r18, r18
     2d4:	4a 95       	dec	r20
     2d6:	ea f7       	brpl	.-6      	; 0x2d2 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x1c>
     2d8:	25 2b       	or	r18, r21
     2da:	22 c0       	rjmp	.+68     	; 0x320 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x6a>
     2dc:	4c 91       	ld	r20, X
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9c 01       	movw	r18, r24
     2e4:	01 84       	ldd	r0, Z+9	; 0x09
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x36>
     2e8:	22 0f       	add	r18, r18
     2ea:	33 1f       	adc	r19, r19
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x32>
     2f0:	24 2b       	or	r18, r20
     2f2:	2c 93       	st	X, r18
     2f4:	a7 81       	ldd	r26, Z+7	; 0x07
     2f6:	b0 85       	ldd	r27, Z+8	; 0x08
     2f8:	2c 91       	ld	r18, X
     2fa:	02 84       	ldd	r0, Z+10	; 0x0a
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x4c>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x48>
     306:	16 c0       	rjmp	.+44     	; 0x334 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x7e>
     308:	3c 91       	ld	r19, X
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	bc 01       	movw	r22, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x60>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	4a 95       	dec	r20
     318:	e2 f7       	brpl	.-8      	; 0x312 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x5c>
     31a:	26 2f       	mov	r18, r22
     31c:	20 95       	com	r18
     31e:	23 23       	and	r18, r19
     320:	2c 93       	st	X, r18
     322:	a7 81       	ldd	r26, Z+7	; 0x07
     324:	b0 85       	ldd	r27, Z+8	; 0x08
     326:	2c 91       	ld	r18, X
     328:	01 84       	ldd	r0, Z+9	; 0x09
     32a:	02 c0       	rjmp	.+4      	; 0x330 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x7a>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x76>
     334:	80 95       	com	r24
     336:	82 23       	and	r24, r18
     338:	8c 93       	st	X, r24
     33a:	08 95       	ret

0000033c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>:
     33c:	f8 94       	cli
     33e:	dc 01       	movw	r26, r24
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	9b 01       	movw	r18, r22
     346:	77 ff       	sbrs	r23, 7
     348:	04 c0       	rjmp	.+8      	; 0x352 <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x16>
     34a:	22 27       	eor	r18, r18
     34c:	33 27       	eor	r19, r19
     34e:	26 1b       	sub	r18, r22
     350:	37 0b       	sbc	r19, r23
     352:	31 83       	std	Z+1, r19	; 0x01
     354:	20 83       	st	Z, r18
     356:	78 94       	sei
     358:	fc 01       	movw	r30, r24
     35a:	25 89       	ldd	r18, Z+21	; 0x15
     35c:	22 23       	and	r18, r18
     35e:	39 f0       	breq	.+14     	; 0x36e <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x32>
     360:	16 16       	cp	r1, r22
     362:	17 06       	cpc	r1, r23
     364:	14 f4       	brge	.+4      	; 0x36a <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x2e>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	01 c0       	rjmp	.+2      	; 0x36c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x30>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	a4 cf       	rjmp	.-184    	; 0x2b6 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>
     36e:	08 95       	ret

00000370 <_ZN15DC_Motor_Driver10startMotorEv>:
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	fc 01       	movw	r30, r24
     374:	25 8b       	std	Z+21, r18	; 0x15
     376:	08 95       	ret

00000378 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>:
								volatile uint8_t* TCCRnA, 
								volatile uint8_t* TCCRnB,
								volatile uint16_t* _OCRnX,
								uint8_t COMNx1
								)
{
     378:	2f 92       	push	r2
     37a:	3f 92       	push	r3
     37c:	4f 92       	push	r4
     37e:	5f 92       	push	r5
     380:	6f 92       	push	r6
     382:	7f 92       	push	r7
     384:	8f 92       	push	r8
     386:	af 92       	push	r10
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	1f 92       	push	r1
     398:	1f 92       	push	r1
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	da 82       	std	Y+2, r13	; 0x02
     3a0:	c9 82       	std	Y+1, r12	; 0x01
     3a2:	4f 88       	ldd	r4, Y+23	; 0x17
     3a4:	58 8c       	ldd	r5, Y+24	; 0x18
     3a6:	69 8c       	ldd	r6, Y+25	; 0x19
     3a8:	7a 8c       	ldd	r7, Y+26	; 0x1a
     3aa:	2b 8c       	ldd	r2, Y+27	; 0x1b
     3ac:	3c 8c       	ldd	r3, Y+28	; 0x1c
	*DDRx_PWM |= (1<<DDxN_PWM); // set used PWM pin as out port
     3ae:	db 01       	movw	r26, r22
     3b0:	1c 91       	ld	r17, X
     3b2:	a1 e0       	ldi	r26, 0x01	; 1
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	fd 01       	movw	r30, r26
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x46>
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	4a 95       	dec	r20
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x42>
     3c2:	af 01       	movw	r20, r30
     3c4:	41 2b       	or	r20, r17
     3c6:	fb 01       	movw	r30, r22
     3c8:	40 83       	st	Z, r20
	*DDRx_CTRL |= (1<<DDxN_CTRL_1) | (1<<DDxN_CTRL_2); // set used Direction Control pin as out port
     3ca:	f9 01       	movw	r30, r18
     3cc:	60 81       	ld	r22, Z
     3ce:	ad 01       	movw	r20, r26
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x5c>
     3d2:	44 0f       	add	r20, r20
     3d4:	0a 95       	dec	r16
     3d6:	ea f7       	brpl	.-6      	; 0x3d2 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x5a>
     3d8:	64 2b       	or	r22, r20
     3da:	ad 01       	movw	r20, r26
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x68>
     3de:	44 0f       	add	r20, r20
     3e0:	ea 94       	dec	r14
     3e2:	ea f7       	brpl	.-6      	; 0x3de <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x66>
     3e4:	46 2b       	or	r20, r22
     3e6:	40 83       	st	Z, r20
	*PORTxN_CTRL &= ~(1<<PORTxN_CTRL_1) | (1<<PORTxN_CTRL_2); // set Control bits to zero so motor is not running
     3e8:	f6 01       	movw	r30, r12
     3ea:	30 81       	ld	r19, Z
     3ec:	ad 01       	movw	r20, r26
     3ee:	0a 2c       	mov	r0, r10
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x7c>
     3f2:	44 0f       	add	r20, r20
     3f4:	0a 94       	dec	r0
     3f6:	ea f7       	brpl	.-6      	; 0x3f2 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x7a>
     3f8:	24 2f       	mov	r18, r20
     3fa:	20 95       	com	r18
     3fc:	ad 01       	movw	r20, r26
     3fe:	08 2c       	mov	r0, r8
     400:	01 c0       	rjmp	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	44 0f       	add	r20, r20
     404:	0a 94       	dec	r0
     406:	ea f7       	brpl	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	24 2b       	or	r18, r20
     40a:	23 23       	and	r18, r19
     40c:	20 83       	st	Z, r18
	this->CurrentDirection = {
		.direction = CLOCKWISE,
		.PORTx_CTRL = PORTxN_CTRL,
		.PORTxN_CTRL_1 = PORTxN_CTRL_1,
		.PORTxN_CTRL_2 = PORTxN_CTRL_2		
	};
     40e:	fc 01       	movw	r30, r24
     410:	16 82       	std	Z+6, r1	; 0x06
     412:	d0 86       	std	Z+8, r13	; 0x08
     414:	c7 82       	std	Z+7, r12	; 0x07
     416:	a1 86       	std	Z+9, r10	; 0x09
     418:	82 86       	std	Z+10, r8	; 0x0a
	
	
	*ICRn = PWM_TOP_TICK; // define PWM frequency
     41a:	2f e3       	ldi	r18, 0x3F	; 63
     41c:	3f e1       	ldi	r19, 0x1F	; 31
     41e:	ed 89       	ldd	r30, Y+21	; 0x15
     420:	fe 89       	ldd	r31, Y+22	; 0x16
     422:	31 83       	std	Z+1, r19	; 0x01
     424:	20 83       	st	Z, r18
	*TCCRnA |= (1<<COMNx1); // clear down counting, set up counting	
     426:	f2 01       	movw	r30, r4
     428:	20 81       	ld	r18, Z
     42a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	aa 0f       	add	r26, r26
     430:	bb 1f       	adc	r27, r27
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	a2 2b       	or	r26, r18
     438:	a0 83       	st	Z, r26
	*TCCRnA |= (1<<WGMN1); // Set ICRn as TOP
     43a:	20 81       	ld	r18, Z
     43c:	22 60       	ori	r18, 0x02	; 2
     43e:	20 83       	st	Z, r18
	*TCCRnB |= (1<<WGMN3); // Set ICRn as TOP
     440:	d3 01       	movw	r26, r6
     442:	2c 91       	ld	r18, X
     444:	20 61       	ori	r18, 0x10	; 16
     446:	2c 93       	st	X, r18
	*TCCRnB |= (1<<CSN0); // Set Timer without Prescaling
     448:	2c 91       	ld	r18, X
     44a:	21 60       	ori	r18, 0x01	; 1
     44c:	2c 93       	st	X, r18
	
	this->OCRnX = _OCRnX;
     44e:	fc 01       	movw	r30, r24
     450:	31 82       	std	Z+1, r3	; 0x01
     452:	20 82       	st	Z, r2
	*this->OCRnX = 0;
     454:	d1 01       	movw	r26, r2
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	1c 92       	st	X, r1
     45a:	1e 92       	st	-X, r1
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	af 90       	pop	r10
     470:	8f 90       	pop	r8
     472:	7f 90       	pop	r7
     474:	6f 90       	pop	r6
     476:	5f 90       	pop	r5
     478:	4f 90       	pop	r4
     47a:	3f 90       	pop	r3
     47c:	2f 90       	pop	r2
     47e:	08 95       	ret

00000480 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>:
uint8_t PORTxN_RotaryEncoderPhase_B, //Flag to turn on internal pullUp of  Ctrl Pin2
uint8_t ISCn0,
uint8_t ISCn1,
volatile int32_t* EncoderTicks
)
{
     480:	4f 92       	push	r4
     482:	5f 92       	push	r5
     484:	6f 92       	push	r6
     486:	7f 92       	push	r7
     488:	8f 92       	push	r8
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	dc 01       	movw	r26, r24
	// make sure ports are set as inports
	*DDRx_RotaryEncoderPhase_A &= ~(1<<DDxN_RotaryEncoderPhase_A);
     4a2:	fa 01       	movw	r30, r20
     4a4:	90 81       	ld	r25, Z
     4a6:	44 24       	eor	r4, r4
     4a8:	43 94       	inc	r4
     4aa:	51 2c       	mov	r5, r1
     4ac:	32 01       	movw	r6, r4
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x34>
     4b0:	66 0c       	add	r6, r6
     4b2:	77 1c       	adc	r7, r7
     4b4:	0a 95       	dec	r16
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x30>
     4b8:	86 2d       	mov	r24, r6
     4ba:	80 95       	com	r24
     4bc:	89 23       	and	r24, r25
     4be:	80 83       	st	Z, r24
	*DDRx_RotaryEncoderPhase_B &= ~(1<<DDxN_RotaryEncoderPhase_B);
     4c0:	f9 01       	movw	r30, r18
     4c2:	90 81       	ld	r25, Z
     4c4:	a2 01       	movw	r20, r4
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x4a>
     4c8:	44 0f       	add	r20, r20
     4ca:	ea 94       	dec	r14
     4cc:	ea f7       	brpl	.-6      	; 0x4c8 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x48>
     4ce:	84 2f       	mov	r24, r20
     4d0:	80 95       	com	r24
     4d2:	89 23       	and	r24, r25
     4d4:	80 83       	st	Z, r24


	this->Encoder.Enocder_Count = EncoderTicks;
     4d6:	8d 89       	ldd	r24, Y+21	; 0x15
     4d8:	9e 89       	ldd	r25, Y+22	; 0x16
     4da:	1c 96       	adiw	r26, 0x0c	; 12
     4dc:	9c 93       	st	X, r25
     4de:	8e 93       	st	-X, r24
     4e0:	1b 97       	sbiw	r26, 0x0b	; 11
	this->Encoder.PORTx_EncoderPhase_A = PORTx_RotaryEncoderPhase_A;
     4e2:	1e 96       	adiw	r26, 0x0e	; 14
     4e4:	dc 92       	st	X, r13
     4e6:	ce 92       	st	-X, r12
     4e8:	1d 97       	sbiw	r26, 0x0d	; 13
	this->Encoder.PORTx_EncoderPhase_B = PORTx_RotaryEncoderPhase_B;
     4ea:	50 96       	adiw	r26, 0x10	; 16
     4ec:	bc 92       	st	X, r11
     4ee:	ae 92       	st	-X, r10
     4f0:	1f 97       	sbiw	r26, 0x0f	; 15
	this->Encoder.PORTxN_EncoderPhase_A = PORTxN_RotaryEncoderPhase_A;
     4f2:	51 96       	adiw	r26, 0x11	; 17
     4f4:	8c 92       	st	X, r8
     4f6:	51 97       	sbiw	r26, 0x11	; 17
	this->Encoder.PORTxN_EncoderPhase_B = PORTxN_RotaryEncoderPhase_B;
     4f8:	8a 89       	ldd	r24, Y+18	; 0x12
     4fa:	52 96       	adiw	r26, 0x12	; 18
     4fc:	8c 93       	st	X, r24
     4fe:	52 97       	sbiw	r26, 0x12	; 18
	
	//Turn on internal PullUp
	*this->Encoder.PORTx_EncoderPhase_A |= (1<<this->Encoder.PORTxN_EncoderPhase_A);
     500:	f6 01       	movw	r30, r12
     502:	20 81       	ld	r18, Z
     504:	c2 01       	movw	r24, r4
     506:	01 c0       	rjmp	.+2      	; 0x50a <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x8a>
     508:	88 0f       	add	r24, r24
     50a:	8a 94       	dec	r8
     50c:	ea f7       	brpl	.-6      	; 0x508 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x88>
     50e:	82 2b       	or	r24, r18
     510:	80 83       	st	Z, r24
	*this->Encoder.PORTx_EncoderPhase_B |= (1<<this->Encoder.PORTxN_EncoderPhase_B);
     512:	1f 96       	adiw	r26, 0x0f	; 15
     514:	2d 91       	ld	r18, X+
     516:	3c 91       	ld	r19, X
     518:	50 97       	sbiw	r26, 0x10	; 16
     51a:	f9 01       	movw	r30, r18
     51c:	40 81       	ld	r20, Z
     51e:	c2 01       	movw	r24, r4
     520:	52 96       	adiw	r26, 0x12	; 18
     522:	0c 90       	ld	r0, X
     524:	02 c0       	rjmp	.+4      	; 0x52a <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xaa>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xa6>
     52e:	84 2b       	or	r24, r20
     530:	80 83       	st	Z, r24
	
	EICRA |= (1<<ISCn0) | (1<<ISCn1);
     532:	a9 e6       	ldi	r26, 0x69	; 105
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	2c 91       	ld	r18, X
     538:	c2 01       	movw	r24, r4
     53a:	0c 88       	ldd	r0, Y+20	; 0x14
     53c:	02 c0       	rjmp	.+4      	; 0x542 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xc2>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	0a 94       	dec	r0
     544:	e2 f7       	brpl	.-8      	; 0x53e <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xbe>
     546:	28 2b       	or	r18, r24
     548:	c2 01       	movw	r24, r4
     54a:	0b 88       	ldd	r0, Y+19	; 0x13
     54c:	02 c0       	rjmp	.+4      	; 0x552 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xd2>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xce>
     556:	82 2b       	or	r24, r18
     558:	8c 93       	st	X, r24
	EIMSK |= (1<<INTx0);
     55a:	8d b3       	in	r24, 0x1d	; 29
     55c:	f2 01       	movw	r30, r4
     55e:	01 c0       	rjmp	.+2      	; 0x562 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xe2>
     560:	ee 0f       	add	r30, r30
     562:	6a 95       	dec	r22
     564:	ea f7       	brpl	.-6      	; 0x560 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xe0>
     566:	e8 2b       	or	r30, r24
     568:	ed bb       	out	0x1d, r30	; 29
	//sei();
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	8f 90       	pop	r8
     57e:	7f 90       	pop	r7
     580:	6f 90       	pop	r6
     582:	5f 90       	pop	r5
     584:	4f 90       	pop	r4
     586:	08 95       	ret

00000588 <_ZN15DC_Motor_DriverC1Ehj>:
#include <util/delay.h>

volatile int32_t EncoderTicks_0;
volatile int32_t EncoderTicks_1;

DC_Motor_Driver::DC_Motor_Driver(pwm_num pwmN, uint16_t _PulsesPerRotation)
     588:	8f 92       	push	r8
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	0f 93       	push	r16
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
{
	this->motorRunning = 0;
     59c:	1d 8a       	std	Y+21, r1	; 0x15
	this->Encoder.PulsesPerRotation = _PulsesPerRotation;
     59e:	5c 8b       	std	Y+20, r21	; 0x14
     5a0:	4b 8b       	std	Y+19, r20	; 0x13
	
	switch (pwmN)
     5a2:	66 23       	and	r22, r22
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <_ZN15DC_Motor_DriverC1Ehj+0x20>
     5a6:	45 c0       	rjmp	.+138    	; 0x632 <_ZN15DC_Motor_DriverC1Ehj+0xaa>
     5a8:	61 30       	cpi	r22, 0x01	; 1
     5aa:	09 f0       	breq	.+2      	; 0x5ae <_ZN15DC_Motor_DriverC1Ehj+0x26>
     5ac:	81 c0       	rjmp	.+258    	; 0x6b0 <_ZN15DC_Motor_DriverC1Ehj+0x128>
	case PWM_0: //A
		setPWMRegisters(&DDRE, DDE3, &DDRC, DDC5, DDC7, &PORTC, PC5, PC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3A, COMNA1);
		setEncoderRegisters(INT0, &DDRD, &DDRA, DDD0, DDA0, &PORTD, &PORTA, PD0, PA0, ISC00, ISC01, &EncoderTicks_0);
		break;
	case PWM_1: //B
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC1, DDC3, &PORTC, PC1, PC3, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
     5ae:	85 e0       	ldi	r24, 0x05	; 5
     5b0:	8f 93       	push	r24
     5b2:	1f 92       	push	r1
     5b4:	8a e9       	ldi	r24, 0x9A	; 154
     5b6:	8f 93       	push	r24
     5b8:	1f 92       	push	r1
     5ba:	81 e9       	ldi	r24, 0x91	; 145
     5bc:	8f 93       	push	r24
     5be:	1f 92       	push	r1
     5c0:	80 e9       	ldi	r24, 0x90	; 144
     5c2:	8f 93       	push	r24
     5c4:	1f 92       	push	r1
     5c6:	86 e9       	ldi	r24, 0x96	; 150
     5c8:	8f 93       	push	r24
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	88 2e       	mov	r8, r24
     5ce:	aa 24       	eor	r10, r10
     5d0:	a3 94       	inc	r10
     5d2:	98 e2       	ldi	r25, 0x28	; 40
     5d4:	c9 2e       	mov	r12, r25
     5d6:	d1 2c       	mov	r13, r1
     5d8:	23 e0       	ldi	r18, 0x03	; 3
     5da:	e2 2e       	mov	r14, r18
     5dc:	01 e0       	ldi	r16, 0x01	; 1
     5de:	27 e2       	ldi	r18, 0x27	; 39
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	44 e0       	ldi	r20, 0x04	; 4
     5e4:	6d e2       	ldi	r22, 0x2D	; 45
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	ce 01       	movw	r24, r28
     5ea:	c6 de       	rcall	.-628    	; 0x378 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		setEncoderRegisters(INT1, &DDRD, &DDRA, DDD1, DDA2, &PORTD, &PORTA, PD1, PA2, ISC10, ISC11, &EncoderTicks_1);
     5ec:	86 e3       	ldi	r24, 0x36	; 54
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	8f 93       	push	r24
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	8f 93       	push	r24
     5fc:	8f 93       	push	r24
     5fe:	88 24       	eor	r8, r8
     600:	83 94       	inc	r8
     602:	32 e2       	ldi	r19, 0x22	; 34
     604:	a3 2e       	mov	r10, r19
     606:	b1 2c       	mov	r11, r1
     608:	4b e2       	ldi	r20, 0x2B	; 43
     60a:	c4 2e       	mov	r12, r20
     60c:	d1 2c       	mov	r13, r1
     60e:	52 e0       	ldi	r21, 0x02	; 2
     610:	e5 2e       	mov	r14, r21
     612:	21 e2       	ldi	r18, 0x21	; 33
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	4a e2       	ldi	r20, 0x2A	; 42
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	ce 01       	movw	r24, r28
     61e:	30 df       	rcall	.-416    	; 0x480 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>
		break;
     620:	8d b7       	in	r24, 0x3d	; 61
     622:	9e b7       	in	r25, 0x3e	; 62
     624:	0e 96       	adiw	r24, 0x0e	; 14
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	9e bf       	out	0x3e, r25	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	8d bf       	out	0x3d, r24	; 61
	}
}
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <_ZN15DC_Motor_DriverC1Ehj+0x128>
	this->Encoder.PulsesPerRotation = _PulsesPerRotation;
	
	switch (pwmN)
	{
	case PWM_0: //A
		setPWMRegisters(&DDRE, DDE3, &DDRC, DDC5, DDC7, &PORTC, PC5, PC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3A, COMNA1);
     632:	87 e0       	ldi	r24, 0x07	; 7
     634:	8f 93       	push	r24
     636:	1f 92       	push	r1
     638:	88 e9       	ldi	r24, 0x98	; 152
     63a:	8f 93       	push	r24
     63c:	1f 92       	push	r1
     63e:	81 e9       	ldi	r24, 0x91	; 145
     640:	8f 93       	push	r24
     642:	1f 92       	push	r1
     644:	80 e9       	ldi	r24, 0x90	; 144
     646:	8f 93       	push	r24
     648:	1f 92       	push	r1
     64a:	86 e9       	ldi	r24, 0x96	; 150
     64c:	8f 93       	push	r24
     64e:	67 e0       	ldi	r22, 0x07	; 7
     650:	86 2e       	mov	r8, r22
     652:	75 e0       	ldi	r23, 0x05	; 5
     654:	a7 2e       	mov	r10, r23
     656:	e8 e2       	ldi	r30, 0x28	; 40
     658:	ce 2e       	mov	r12, r30
     65a:	d1 2c       	mov	r13, r1
     65c:	f7 e0       	ldi	r31, 0x07	; 7
     65e:	ef 2e       	mov	r14, r31
     660:	05 e0       	ldi	r16, 0x05	; 5
     662:	27 e2       	ldi	r18, 0x27	; 39
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	43 e0       	ldi	r20, 0x03	; 3
     668:	6d e2       	ldi	r22, 0x2D	; 45
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	ce 01       	movw	r24, r28
     66e:	84 de       	rcall	.-760    	; 0x378 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		setEncoderRegisters(INT0, &DDRD, &DDRA, DDD0, DDA0, &PORTD, &PORTA, PD0, PA0, ISC00, ISC01, &EncoderTicks_0);
     670:	8a e3       	ldi	r24, 0x3A	; 58
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	8f 93       	push	r24
     67c:	1f 92       	push	r1
     67e:	1f 92       	push	r1
     680:	81 2c       	mov	r8, r1
     682:	a2 e2       	ldi	r26, 0x22	; 34
     684:	aa 2e       	mov	r10, r26
     686:	b1 2c       	mov	r11, r1
     688:	bb e2       	ldi	r27, 0x2B	; 43
     68a:	cb 2e       	mov	r12, r27
     68c:	d1 2c       	mov	r13, r1
     68e:	e1 2c       	mov	r14, r1
     690:	00 e0       	ldi	r16, 0x00	; 0
     692:	21 e2       	ldi	r18, 0x21	; 33
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	4a e2       	ldi	r20, 0x2A	; 42
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	ce 01       	movw	r24, r28
     69e:	f0 de       	rcall	.-544    	; 0x480 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>
		break;
     6a0:	8d b7       	in	r24, 0x3d	; 61
     6a2:	9e b7       	in	r25, 0x3e	; 62
     6a4:	0e 96       	adiw	r24, 0x0e	; 14
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	9e bf       	out	0x3e, r25	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	8d bf       	out	0x3d, r24	; 61
	case PWM_1: //B
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC1, DDC3, &PORTC, PC1, PC3, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
		setEncoderRegisters(INT1, &DDRD, &DDRA, DDD1, DDA2, &PORTD, &PORTA, PD1, PA2, ISC10, ISC11, &EncoderTicks_1);
		break;
	}
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	0f 91       	pop	r16
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	bf 90       	pop	r11
     6be:	af 90       	pop	r10
     6c0:	8f 90       	pop	r8
     6c2:	08 95       	ret

000006c4 <_ZN15DC_Motor_Driver15getEncoderCountEv>:
	//sei();
}

int32_t DC_Motor_Driver::getEncoderCount()
{
	cli();
     6c4:	f8 94       	cli
	int32_t currentTicks =  *this->Encoder.Enocder_Count;
     6c6:	dc 01       	movw	r26, r24
     6c8:	1b 96       	adiw	r26, 0x0b	; 11
     6ca:	ed 91       	ld	r30, X+
     6cc:	fc 91       	ld	r31, X
     6ce:	1c 97       	sbiw	r26, 0x0c	; 12
     6d0:	60 81       	ld	r22, Z
     6d2:	71 81       	ldd	r23, Z+1	; 0x01
     6d4:	82 81       	ldd	r24, Z+2	; 0x02
     6d6:	93 81       	ldd	r25, Z+3	; 0x03
	sei();
     6d8:	78 94       	sei
	return currentTicks;
}
     6da:	08 95       	ret

000006dc <_Z13ENCODER_A_ISRPVhhPVl>:

void ENCODER_A_ISR(volatile uint8_t* PORTx_Encoder, uint8_t PORTxN_EncoderPhase_B, volatile int32_t* EncoderTicksX)
{
     6dc:	fa 01       	movw	r30, r20
	if (!(*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     6de:	dc 01       	movw	r26, r24
     6e0:	2c 91       	ld	r18, X
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	06 2e       	mov	r0, r22
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <_Z13ENCODER_A_ISRPVhhPVl+0x10>
     6e8:	35 95       	asr	r19
     6ea:	27 95       	ror	r18
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <_Z13ENCODER_A_ISRPVhhPVl+0xc>
     6f0:	20 fd       	sbrc	r18, 0
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <_Z13ENCODER_A_ISRPVhhPVl+0x28>
	{
		(*EncoderTicksX)++;
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	a2 81       	ldd	r26, Z+2	; 0x02
     6fa:	b3 81       	ldd	r27, Z+3	; 0x03
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	11 c0       	rjmp	.+34     	; 0x726 <_Z13ENCODER_A_ISRPVhhPVl+0x4a>
	}
	else if ((*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     704:	dc 01       	movw	r26, r24
     706:	8c 91       	ld	r24, X
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <_Z13ENCODER_A_ISRPVhhPVl+0x34>
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	6a 95       	dec	r22
     712:	e2 f7       	brpl	.-8      	; 0x70c <_Z13ENCODER_A_ISRPVhhPVl+0x30>
     714:	80 ff       	sbrs	r24, 0
     716:	0b c0       	rjmp	.+22     	; 0x72e <_Z13ENCODER_A_ISRPVhhPVl+0x52>
	{
		(*EncoderTicksX)--;
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	a2 81       	ldd	r26, Z+2	; 0x02
     71e:	b3 81       	ldd	r27, Z+3	; 0x03
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	a1 09       	sbc	r26, r1
     724:	b1 09       	sbc	r27, r1
     726:	80 83       	st	Z, r24
     728:	91 83       	std	Z+1, r25	; 0x01
     72a:	a2 83       	std	Z+2, r26	; 0x02
     72c:	b3 83       	std	Z+3, r27	; 0x03
     72e:	08 95       	ret

00000730 <__vector_1>:
	}
}

ISR(INT0_vect)
{
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	4f 93       	push	r20
     744:	5f 93       	push	r21
     746:	6f 93       	push	r22
     748:	7f 93       	push	r23
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
	ENCODER_A_ISR(&PINA, PINA0, &EncoderTicks_0);
     756:	4a e3       	ldi	r20, 0x3A	; 58
     758:	53 e0       	ldi	r21, 0x03	; 3
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	bd df       	rcall	.-134    	; 0x6dc <_Z13ENCODER_A_ISRPVhhPVl>
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0b be       	out	0x3b, r0	; 59
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_2>:

ISR(INT1_vect)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	0b b6       	in	r0, 0x3b	; 59
     794:	0f 92       	push	r0
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	ENCODER_A_ISR(&PINA, PINA2, &EncoderTicks_1);
     7ae:	46 e3       	ldi	r20, 0x36	; 54
     7b0:	53 e0       	ldi	r21, 0x03	; 3
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	80 e2       	ldi	r24, 0x20	; 32
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	91 df       	rcall	.-222    	; 0x6dc <_Z13ENCODER_A_ISRPVhhPVl>
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <_ZN15Encoder_TrackerC1Ehj>:

#include "Encoder_Tracker.h"

Encoder_Tracker::Encoder_Tracker(uint8_t _TrackingFreuencyHz, uint16_t _CountsPerRevolution)
{
	TrackingFrequencyHz = _TrackingFreuencyHz;
     7e0:	fc 01       	movw	r30, r24
     7e2:	60 83       	st	Z, r22
	CountsPerRevolution = _CountsPerRevolution;
     7e4:	52 83       	std	Z+2, r21	; 0x02
     7e6:	41 83       	std	Z+1, r20	; 0x01
	initQueue(&Enocder_Count_History, Enocder_Count_History_Array, ENCODER_HISTORY_SIZE);
     7e8:	bc 01       	movw	r22, r24
     7ea:	65 5f       	subi	r22, 0xF5	; 245
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4c e0       	ldi	r20, 0x0C	; 12
     7f4:	03 96       	adiw	r24, 0x03	; 3
     7f6:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <_Z9initQueueP5QueuePlhS1_>

000007fa <_ZN15Encoder_Tracker5TrackEl>:
}

void Encoder_Tracker::Track(int32_t currentCount)
{
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	8a 01       	movw	r16, r20
     800:	9b 01       	movw	r18, r22
	enqeue(currentCount, &Enocder_Count_History);
     802:	ac 01       	movw	r20, r24
     804:	4d 5f       	subi	r20, 0xFD	; 253
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	c9 01       	movw	r24, r18
     80a:	b8 01       	movw	r22, r16
}
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
	initQueue(&Enocder_Count_History, Enocder_Count_History_Array, ENCODER_HISTORY_SIZE);
}

void Encoder_Tracker::Track(int32_t currentCount)
{
	enqeue(currentCount, &Enocder_Count_History);
     810:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <_Z6enqeuelP5Queue>

00000814 <_ZN15Encoder_Tracker10countToPPMEl>:
	
	return rpm * sign;
}

int32_t Encoder_Tracker::countToPPM(int32_t _countDiff)
{
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	fc 01       	movw	r30, r24
     81e:	6a 01       	movw	r12, r20
     820:	7b 01       	movw	r14, r22
	int32_t ppm = (((_countDiff) * (((int32_t) this->TrackingFrequencyHz*1000) / (this->Enocder_Count_History.size-1)))*60)/1000;
	
	return ppm;
     822:	20 81       	ld	r18, Z
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	a8 ee       	ldi	r26, 0xE8	; 232
     828:	b3 e0       	ldi	r27, 0x03	; 3
     82a:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <__umulhisi3>
     82e:	24 81       	ldd	r18, Z+4	; 0x04
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	21 50       	subi	r18, 0x01	; 1
     834:	31 09       	sbc	r19, r1
     836:	03 2e       	mov	r0, r19
     838:	00 0c       	add	r0, r0
     83a:	44 0b       	sbc	r20, r20
     83c:	55 0b       	sbc	r21, r21
     83e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	ac e3       	ldi	r26, 0x3C	; 60
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__muluhisi3>
     856:	28 ee       	ldi	r18, 0xE8	; 232
     858:	33 e0       	ldi	r19, 0x03	; 3
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
}
     862:	ca 01       	movw	r24, r20
     864:	b9 01       	movw	r22, r18
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	08 95       	ret

00000870 <_ZN15Encoder_Tracker6getPPMEv>:
	
	return rpm * sign;
}

int32_t Encoder_Tracker::getPPM()
{
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
	int32_t countDiff = getNthElement(&Enocder_Count_History, 0) - getNthElement(&Enocder_Count_History, this->Enocder_Count_History.size-1);
     882:	8c 01       	movw	r16, r24
     884:	0d 5f       	subi	r16, 0xFD	; 253
     886:	1f 4f       	sbci	r17, 0xFF	; 255
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_Z13getNthElementP5Queueh>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	6c 81       	ldd	r22, Y+4	; 0x04
     896:	61 50       	subi	r22, 0x01	; 1
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_Z13getNthElementP5Queueh>
     89e:	a7 01       	movw	r20, r14
     8a0:	96 01       	movw	r18, r12
     8a2:	26 1b       	sub	r18, r22
     8a4:	37 0b       	sbc	r19, r23
     8a6:	48 0b       	sbc	r20, r24
     8a8:	59 0b       	sbc	r21, r25
	int8_t sign = (countDiff<0) ? -1 : 1;
     8aa:	57 fd       	sbrc	r21, 7
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <_ZN15Encoder_Tracker6getPPMEv+0x42>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <_ZN15Encoder_Tracker6getPPMEv+0x44>
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
	countDiff = countDiff * sign;
     8b4:	c8 2e       	mov	r12, r24
     8b6:	88 0f       	add	r24, r24
     8b8:	dd 08       	sbc	r13, r13
     8ba:	ee 08       	sbc	r14, r14
     8bc:	ff 08       	sbc	r15, r15
	int32_t rpm = countToPPM(countDiff);
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
     8c6:	ab 01       	movw	r20, r22
     8c8:	bc 01       	movw	r22, r24
     8ca:	ce 01       	movw	r24, r28
     8cc:	a3 df       	rcall	.-186    	; 0x814 <_ZN15Encoder_Tracker10countToPPMEl>
	
	return rpm * sign;
     8ce:	a7 01       	movw	r20, r14
     8d0:	96 01       	movw	r18, r12
     8d2:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <_ZN15Encoder_Tracker10countToRPMEl>:
	
	return ppm;
}

int16_t Encoder_Tracker::countToRPM(int32_t _countDiff)
{
     8e8:	8f 92       	push	r8
     8ea:	9f 92       	push	r9
     8ec:	af 92       	push	r10
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
     902:	6a 01       	movw	r12, r20
     904:	7b 01       	movw	r14, r22
	int16_t rpm = (((_countDiff*1000 / this->CountsPerRevolution) * (((int32_t) this->TrackingFrequencyHz*1000) / (this->Enocder_Count_History.size-1)))*60)/100000;
     906:	28 81       	ld	r18, Y
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	a8 ee       	ldi	r26, 0xE8	; 232
     90c:	b3 e0       	ldi	r27, 0x03	; 3
     90e:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <__umulhisi3>
     912:	2c 81       	ldd	r18, Y+4	; 0x04
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	21 50       	subi	r18, 0x01	; 1
     918:	31 09       	sbc	r19, r1
     91a:	03 2e       	mov	r0, r19
     91c:	00 0c       	add	r0, r0
     91e:	44 0b       	sbc	r20, r20
     920:	55 0b       	sbc	r21, r21
     922:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
     926:	49 01       	movw	r8, r18
     928:	5a 01       	movw	r10, r20
     92a:	a8 ee       	ldi	r26, 0xE8	; 232
     92c:	b3 e0       	ldi	r27, 0x03	; 3
     92e:	a7 01       	movw	r20, r14
     930:	96 01       	movw	r18, r12
     932:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__muluhisi3>
     936:	29 81       	ldd	r18, Y+1	; 0x01
     938:	3a 81       	ldd	r19, Y+2	; 0x02
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
     942:	ca 01       	movw	r24, r20
     944:	b9 01       	movw	r22, r18
     946:	a5 01       	movw	r20, r10
     948:	94 01       	movw	r18, r8
     94a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	ac e3       	ldi	r26, 0x3C	; 60
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__muluhisi3>
     95a:	20 ea       	ldi	r18, 0xA0	; 160
     95c:	36 e8       	ldi	r19, 0x86	; 134
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
     966:	89 01       	movw	r16, r18
     968:	9a 01       	movw	r18, r20
	
	uint8_t rest = rpm%10;
     96a:	ea e0       	ldi	r30, 0x0A	; 10
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	c8 01       	movw	r24, r16
     970:	bf 01       	movw	r22, r30
     972:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__divmodhi4>
	
	rpm = (rest<5) ? (rpm - rest) : (rpm + (10-rest));
     976:	85 30       	cpi	r24, 0x05	; 5
     978:	28 f4       	brcc	.+10     	; 0x984 <_ZN15Encoder_Tracker10countToRPMEl+0x9c>
     97a:	a8 01       	movw	r20, r16
     97c:	48 1b       	sub	r20, r24
     97e:	59 0b       	sbc	r21, r25
     980:	ca 01       	movw	r24, r20
     982:	05 c0       	rjmp	.+10     	; 0x98e <_ZN15Encoder_Tracker10countToRPMEl+0xa6>
     984:	e8 1b       	sub	r30, r24
     986:	f1 09       	sbc	r31, r1
     988:	cf 01       	movw	r24, r30
     98a:	80 0f       	add	r24, r16
     98c:	91 1f       	adc	r25, r17
	rpm = rpm / 10;
	
	return rpm;
     98e:	6a e0       	ldi	r22, 0x0A	; 10
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__divmodhi4>
     996:	cb 01       	movw	r24, r22
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	08 95       	ret

000009b2 <_ZN15Encoder_Tracker6getRPMEv>:
{
	enqeue(currentCount, &Enocder_Count_History);
}

int16_t Encoder_Tracker::getRPM()
{
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
	int32_t countDiff = getNthElement(&Enocder_Count_History, 0) - getNthElement(&Enocder_Count_History, this->Enocder_Count_History.size-1);
     9c4:	8c 01       	movw	r16, r24
     9c6:	0d 5f       	subi	r16, 0xFD	; 253
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_Z13getNthElementP5Queueh>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	6c 81       	ldd	r22, Y+4	; 0x04
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	c8 01       	movw	r24, r16
     9dc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_Z13getNthElementP5Queueh>
     9e0:	a7 01       	movw	r20, r14
     9e2:	96 01       	movw	r18, r12
     9e4:	26 1b       	sub	r18, r22
     9e6:	37 0b       	sbc	r19, r23
     9e8:	48 0b       	sbc	r20, r24
     9ea:	59 0b       	sbc	r21, r25
	int8_t sign = (countDiff<0) ? -1 : 1;
     9ec:	57 fd       	sbrc	r21, 7
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <_ZN15Encoder_Tracker6getRPMEv+0x42>
     9f0:	11 e0       	ldi	r17, 0x01	; 1
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <_ZN15Encoder_Tracker6getRPMEv+0x44>
     9f4:	1f ef       	ldi	r17, 0xFF	; 255
	countDiff = countDiff * sign;
	int16_t rpm = countToRPM(countDiff);
     9f6:	a1 2f       	mov	r26, r17
     9f8:	01 2e       	mov	r0, r17
     9fa:	00 0c       	add	r0, r0
     9fc:	bb 0b       	sbc	r27, r27
     9fe:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__mulshisi3>
     a02:	ab 01       	movw	r20, r22
     a04:	bc 01       	movw	r22, r24
     a06:	ce 01       	movw	r24, r28
     a08:	6f df       	rcall	.-290    	; 0x8e8 <_ZN15Encoder_Tracker10countToRPMEl>
	
	return rpm * sign;
}
     a0a:	9c 01       	movw	r18, r24
     a0c:	12 03       	mulsu	r17, r18
     a0e:	c0 01       	movw	r24, r0
     a10:	13 9f       	mul	r17, r19
     a12:	90 0d       	add	r25, r0
     a14:	11 24       	eor	r1, r1
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret

00000a28 <_Z16createEventStorev>:
#include "events.h"

//Event Store to keep an overview if events are used in different areas / classes.
// One Store per "context"
event_type createEventStore()
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	1f 92       	push	r1
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	event_type store = 0;
     a34:	1a 82       	std	Y+2, r1	; 0x02
     a36:	19 82       	std	Y+1, r1	; 0x01
	return store;
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <_Z8setEventjPVj>:

void setEvent(event_type event, event_type* eventStore) {
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
	unsigned char sreg_old = SREG;
     a56:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a58:	f8 94       	cli
	(*eventStore) |= event;
     a5a:	49 81       	ldd	r20, Y+1	; 0x01
     a5c:	5a 81       	ldd	r21, Y+2	; 0x02
     a5e:	fb 01       	movw	r30, r22
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	84 2b       	or	r24, r20
     a66:	95 2b       	or	r25, r21
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	80 83       	st	Z, r24
	SREG = sreg_old;
     a6c:	2f bf       	out	0x3f, r18	; 63
}
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <_Z3mapfffff>:
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	28 97       	sbiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	29 01       	movw	r4, r18
     aa6:	3a 01       	movw	r6, r20
     aa8:	ed 82       	std	Y+5, r14	; 0x05
     aaa:	fe 82       	std	Y+6, r15	; 0x06
     aac:	0f 83       	std	Y+7, r16	; 0x07
     aae:	18 87       	std	Y+8, r17	; 0x08
     ab0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__subsf3>
     ab4:	69 83       	std	Y+1, r22	; 0x01
     ab6:	7a 83       	std	Y+2, r23	; 0x02
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	a6 01       	movw	r20, r12
     abe:	95 01       	movw	r18, r10
     ac0:	6a 8d       	ldd	r22, Y+26	; 0x1a
     ac2:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ac4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ac8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__subsf3>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 35 1c 	call	0x386a	; 0x386a <__mulsf3>
     adc:	69 83       	std	Y+1, r22	; 0x01
     ade:	7a 83       	std	Y+2, r23	; 0x02
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	a3 01       	movw	r20, r6
     ae6:	92 01       	movw	r18, r4
     ae8:	c8 01       	movw	r24, r16
     aea:	b7 01       	movw	r22, r14
     aec:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__subsf3>
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	69 81       	ldd	r22, Y+1	; 0x01
     af6:	7a 81       	ldd	r23, Y+2	; 0x02
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	0e 94 0e 1b 	call	0x361c	; 0x361c <__divsf3>
     b00:	a6 01       	movw	r20, r12
     b02:	95 01       	movw	r18, r10
     b04:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__addsf3>
     b08:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fixsfsi>
     b0c:	07 2e       	mov	r0, r23
     b0e:	00 0c       	add	r0, r0
     b10:	88 0b       	sbc	r24, r24
     b12:	99 0b       	sbc	r25, r25
     b14:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__floatsisf>
     b18:	28 96       	adiw	r28, 0x08	; 8
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	7f 90       	pop	r7
     b3a:	6f 90       	pop	r6
     b3c:	5f 90       	pop	r5
     b3e:	4f 90       	pop	r4
     b40:	08 95       	ret

00000b42 <_ZNK8std_msgs4Time9serializeEPh>:
	_motorRight->stopMotor();
	_motorLeft->stopMotor();
	_motorRight->setTargetRPM(-30);
	_motorLeft->setTargetRPM(30);
	_motorRight->startMotor();
	_motorLeft->startMotor();
     b42:	dc 01       	movw	r26, r24
     b44:	fb 01       	movw	r30, r22
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	8c 91       	ld	r24, X
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	80 83       	st	Z, r24
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	8c 91       	ld	r24, X
     b52:	13 97       	sbiw	r26, 0x03	; 3
     b54:	81 83       	std	Z+1, r24	; 0x01
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	8c 91       	ld	r24, X
     b5a:	14 97       	sbiw	r26, 0x04	; 4
     b5c:	82 83       	std	Z+2, r24	; 0x02
     b5e:	15 96       	adiw	r26, 0x05	; 5
     b60:	8c 91       	ld	r24, X
     b62:	15 97       	sbiw	r26, 0x05	; 5
     b64:	83 83       	std	Z+3, r24	; 0x03
     b66:	16 96       	adiw	r26, 0x06	; 6
     b68:	8c 91       	ld	r24, X
     b6a:	16 97       	sbiw	r26, 0x06	; 6
     b6c:	84 83       	std	Z+4, r24	; 0x04
     b6e:	17 96       	adiw	r26, 0x07	; 7
     b70:	8c 91       	ld	r24, X
     b72:	17 97       	sbiw	r26, 0x07	; 7
     b74:	85 83       	std	Z+5, r24	; 0x05
     b76:	18 96       	adiw	r26, 0x08	; 8
     b78:	8c 91       	ld	r24, X
     b7a:	18 97       	sbiw	r26, 0x08	; 8
     b7c:	86 83       	std	Z+6, r24	; 0x06
     b7e:	19 96       	adiw	r26, 0x09	; 9
     b80:	8c 91       	ld	r24, X
     b82:	87 83       	std	Z+7, r24	; 0x07
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	08 95       	ret

00000b8a <_ZN8std_msgs4Time11deserializeEPh>:
     b8a:	fc 01       	movw	r30, r24
     b8c:	db 01       	movw	r26, r22
     b8e:	4c 91       	ld	r20, X
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	42 83       	std	Z+2, r20	; 0x02
     b98:	53 83       	std	Z+3, r21	; 0x03
     b9a:	64 83       	std	Z+4, r22	; 0x04
     b9c:	75 83       	std	Z+5, r23	; 0x05
     b9e:	11 96       	adiw	r26, 0x01	; 1
     ba0:	8c 91       	ld	r24, X
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	58 2b       	or	r21, r24
     ba6:	42 83       	std	Z+2, r20	; 0x02
     ba8:	53 83       	std	Z+3, r21	; 0x03
     baa:	64 83       	std	Z+4, r22	; 0x04
     bac:	75 83       	std	Z+5, r23	; 0x05
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	8c 91       	ld	r24, X
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	68 2b       	or	r22, r24
     bb6:	42 83       	std	Z+2, r20	; 0x02
     bb8:	53 83       	std	Z+3, r21	; 0x03
     bba:	64 83       	std	Z+4, r22	; 0x04
     bbc:	75 83       	std	Z+5, r23	; 0x05
     bbe:	13 96       	adiw	r26, 0x03	; 3
     bc0:	8c 91       	ld	r24, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	78 2b       	or	r23, r24
     bc6:	42 83       	std	Z+2, r20	; 0x02
     bc8:	53 83       	std	Z+3, r21	; 0x03
     bca:	64 83       	std	Z+4, r22	; 0x04
     bcc:	75 83       	std	Z+5, r23	; 0x05
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4c 91       	ld	r20, X
     bd2:	14 97       	sbiw	r26, 0x04	; 4
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	46 83       	std	Z+6, r20	; 0x06
     bdc:	57 83       	std	Z+7, r21	; 0x07
     bde:	60 87       	std	Z+8, r22	; 0x08
     be0:	71 87       	std	Z+9, r23	; 0x09
     be2:	15 96       	adiw	r26, 0x05	; 5
     be4:	8c 91       	ld	r24, X
     be6:	15 97       	sbiw	r26, 0x05	; 5
     be8:	58 2b       	or	r21, r24
     bea:	46 83       	std	Z+6, r20	; 0x06
     bec:	57 83       	std	Z+7, r21	; 0x07
     bee:	60 87       	std	Z+8, r22	; 0x08
     bf0:	71 87       	std	Z+9, r23	; 0x09
     bf2:	16 96       	adiw	r26, 0x06	; 6
     bf4:	8c 91       	ld	r24, X
     bf6:	16 97       	sbiw	r26, 0x06	; 6
     bf8:	68 2b       	or	r22, r24
     bfa:	46 83       	std	Z+6, r20	; 0x06
     bfc:	57 83       	std	Z+7, r21	; 0x07
     bfe:	60 87       	std	Z+8, r22	; 0x08
     c00:	71 87       	std	Z+9, r23	; 0x09
     c02:	17 96       	adiw	r26, 0x07	; 7
     c04:	8c 91       	ld	r24, X
     c06:	78 2b       	or	r23, r24
     c08:	46 83       	std	Z+6, r20	; 0x06
     c0a:	57 83       	std	Z+7, r21	; 0x07
     c0c:	60 87       	std	Z+8, r22	; 0x08
     c0e:	71 87       	std	Z+9, r23	; 0x09
     c10:	88 e0       	ldi	r24, 0x08	; 8
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret

00000c16 <_ZN8std_msgs4Time7getTypeEv>:
     c16:	80 e1       	ldi	r24, 0x10	; 16
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	08 95       	ret

00000c1c <_ZN8std_msgs4Time6getMD5Ev>:
     c1c:	8f ee       	ldi	r24, 0xEF	; 239
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	08 95       	ret

00000c22 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
     c22:	86 ed       	ldi	r24, 0xD6	; 214
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	08 95       	ret

00000c28 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
     c28:	85 eb       	ldi	r24, 0xB5	; 181
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	08 95       	ret

00000c2e <_ZN14rosserial_msgs3Log7getTypeEv>:
     c2e:	82 ea       	ldi	r24, 0xA2	; 162
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	08 95       	ret

00000c34 <_ZN14rosserial_msgs3Log6getMD5Ev>:
     c34:	81 e8       	ldi	r24, 0x81	; 129
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	08 95       	ret

00000c3a <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
     c3a:	85 e6       	ldi	r24, 0x65	; 101
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	08 95       	ret

00000c40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
     c40:	84 e4       	ldi	r24, 0x44	; 68
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	08 95       	ret

00000c46 <_ZNK8std_msgs5Int329serializeEPh>:
     c46:	dc 01       	movw	r26, r24
     c48:	fb 01       	movw	r30, r22
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	4c 91       	ld	r20, X
     c4e:	12 97       	sbiw	r26, 0x02	; 2
     c50:	13 96       	adiw	r26, 0x03	; 3
     c52:	2c 91       	ld	r18, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	9c 91       	ld	r25, X
     c5a:	14 97       	sbiw	r26, 0x04	; 4
     c5c:	15 96       	adiw	r26, 0x05	; 5
     c5e:	8c 91       	ld	r24, X
     c60:	40 83       	st	Z, r20
     c62:	21 83       	std	Z+1, r18	; 0x01
     c64:	92 83       	std	Z+2, r25	; 0x02
     c66:	83 83       	std	Z+3, r24	; 0x03
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <_ZN8std_msgs5Int3211deserializeEPh>:
     c6e:	fb 01       	movw	r30, r22
     c70:	40 81       	ld	r20, Z
     c72:	51 81       	ldd	r21, Z+1	; 0x01
     c74:	62 81       	ldd	r22, Z+2	; 0x02
     c76:	73 81       	ldd	r23, Z+3	; 0x03
     c78:	fc 01       	movw	r30, r24
     c7a:	42 83       	std	Z+2, r20	; 0x02
     c7c:	53 83       	std	Z+3, r21	; 0x03
     c7e:	64 83       	std	Z+4, r22	; 0x04
     c80:	75 83       	std	Z+5, r23	; 0x05
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	08 95       	ret

00000c88 <_ZN8std_msgs5Int327getTypeEv>:
     c88:	85 e3       	ldi	r24, 0x35	; 53
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	08 95       	ret

00000c8e <_ZN8std_msgs5Int326getMD5Ev>:
     c8e:	84 e1       	ldi	r24, 0x14	; 20
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	08 95       	ret

00000c94 <_ZNK8std_msgs5Int649serializeEPh>:
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	ec 01       	movw	r28, r24
     ca8:	fb 01       	movw	r30, r22
     caa:	aa 81       	ldd	r26, Y+2	; 0x02
     cac:	bb 80       	ldd	r11, Y+3	; 0x03
     cae:	cc 80       	ldd	r12, Y+4	; 0x04
     cb0:	dd 80       	ldd	r13, Y+5	; 0x05
     cb2:	ee 80       	ldd	r14, Y+6	; 0x06
     cb4:	ff 80       	ldd	r15, Y+7	; 0x07
     cb6:	18 85       	ldd	r17, Y+8	; 0x08
     cb8:	b9 85       	ldd	r27, Y+9	; 0x09
     cba:	a0 83       	st	Z, r26
     cbc:	2a 2f       	mov	r18, r26
     cbe:	3b 2d       	mov	r19, r11
     cc0:	a6 01       	movw	r20, r12
     cc2:	b7 01       	movw	r22, r14
     cc4:	81 2f       	mov	r24, r17
     cc6:	9b 2f       	mov	r25, r27
     cc8:	08 e0       	ldi	r16, 0x08	; 8
     cca:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     cce:	21 83       	std	Z+1, r18	; 0x01
     cd0:	2a 2f       	mov	r18, r26
     cd2:	3b 2d       	mov	r19, r11
     cd4:	a6 01       	movw	r20, r12
     cd6:	b7 01       	movw	r22, r14
     cd8:	81 2f       	mov	r24, r17
     cda:	9b 2f       	mov	r25, r27
     cdc:	00 e1       	ldi	r16, 0x10	; 16
     cde:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     ce2:	22 83       	std	Z+2, r18	; 0x02
     ce4:	2a 2f       	mov	r18, r26
     ce6:	3b 2d       	mov	r19, r11
     ce8:	a6 01       	movw	r20, r12
     cea:	b7 01       	movw	r22, r14
     cec:	81 2f       	mov	r24, r17
     cee:	9b 2f       	mov	r25, r27
     cf0:	08 e1       	ldi	r16, 0x18	; 24
     cf2:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     cf6:	23 83       	std	Z+3, r18	; 0x03
     cf8:	2a 2f       	mov	r18, r26
     cfa:	3b 2d       	mov	r19, r11
     cfc:	a6 01       	movw	r20, r12
     cfe:	b7 01       	movw	r22, r14
     d00:	81 2f       	mov	r24, r17
     d02:	9b 2f       	mov	r25, r27
     d04:	00 e2       	ldi	r16, 0x20	; 32
     d06:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     d0a:	24 83       	std	Z+4, r18	; 0x04
     d0c:	2a 2f       	mov	r18, r26
     d0e:	3b 2d       	mov	r19, r11
     d10:	a6 01       	movw	r20, r12
     d12:	b7 01       	movw	r22, r14
     d14:	81 2f       	mov	r24, r17
     d16:	9b 2f       	mov	r25, r27
     d18:	08 e2       	ldi	r16, 0x28	; 40
     d1a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     d1e:	25 83       	std	Z+5, r18	; 0x05
     d20:	2a 2f       	mov	r18, r26
     d22:	3b 2d       	mov	r19, r11
     d24:	a6 01       	movw	r20, r12
     d26:	b7 01       	movw	r22, r14
     d28:	81 2f       	mov	r24, r17
     d2a:	9b 2f       	mov	r25, r27
     d2c:	00 e3       	ldi	r16, 0x30	; 48
     d2e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     d32:	26 83       	std	Z+6, r18	; 0x06
     d34:	2a 2f       	mov	r18, r26
     d36:	3b 2d       	mov	r19, r11
     d38:	a6 01       	movw	r20, r12
     d3a:	b7 01       	movw	r22, r14
     d3c:	81 2f       	mov	r24, r17
     d3e:	9b 2f       	mov	r25, r27
     d40:	08 e3       	ldi	r16, 0x38	; 56
     d42:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__lshrdi3>
     d46:	27 83       	std	Z+7, r18	; 0x07
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	08 95       	ret

00000d60 <_ZN8std_msgs5Int6411deserializeEPh>:
     d60:	fc 01       	movw	r30, r24
     d62:	db 01       	movw	r26, r22
     d64:	8c 91       	ld	r24, X
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	8c 91       	ld	r24, X
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	83 83       	std	Z+3, r24	; 0x03
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	8c 91       	ld	r24, X
     d74:	12 97       	sbiw	r26, 0x02	; 2
     d76:	84 83       	std	Z+4, r24	; 0x04
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	8c 91       	ld	r24, X
     d7c:	13 97       	sbiw	r26, 0x03	; 3
     d7e:	85 83       	std	Z+5, r24	; 0x05
     d80:	14 96       	adiw	r26, 0x04	; 4
     d82:	8c 91       	ld	r24, X
     d84:	14 97       	sbiw	r26, 0x04	; 4
     d86:	86 83       	std	Z+6, r24	; 0x06
     d88:	15 96       	adiw	r26, 0x05	; 5
     d8a:	8c 91       	ld	r24, X
     d8c:	15 97       	sbiw	r26, 0x05	; 5
     d8e:	87 83       	std	Z+7, r24	; 0x07
     d90:	16 96       	adiw	r26, 0x06	; 6
     d92:	8c 91       	ld	r24, X
     d94:	16 97       	sbiw	r26, 0x06	; 6
     d96:	80 87       	std	Z+8, r24	; 0x08
     d98:	17 96       	adiw	r26, 0x07	; 7
     d9a:	8c 91       	ld	r24, X
     d9c:	81 87       	std	Z+9, r24	; 0x09
     d9e:	88 e0       	ldi	r24, 0x08	; 8
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret

00000da4 <_ZN8std_msgs5Int647getTypeEv>:
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	08 95       	ret

00000daa <_ZN8std_msgs5Int646getMD5Ev>:
     daa:	84 ee       	ldi	r24, 0xE4	; 228
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	08 95       	ret

00000db0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	ec 01       	movw	r28, r24
     dbc:	27 96       	adiw	r28, 0x07	; 7
     dbe:	ce 01       	movw	r24, r28
     dc0:	56 df       	rcall	.-340    	; 0xc6e <_ZN8std_msgs5Int3211deserializeEPh>
     dc2:	d8 01       	movw	r26, r16
     dc4:	1d 96       	adiw	r26, 0x0d	; 13
     dc6:	ed 91       	ld	r30, X+
     dc8:	fc 91       	ld	r31, X
     dca:	1e 97       	sbiw	r26, 0x0e	; 14
     dcc:	ce 01       	movw	r24, r28
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	19 94       	eijmp

00000dd8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
     dd8:	fc 01       	movw	r30, r24
     dda:	87 85       	ldd	r24, Z+15	; 0x0f
     ddc:	90 89       	ldd	r25, Z+16	; 0x10
     dde:	08 95       	ret

00000de0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
     de0:	85 e3       	ldi	r24, 0x35	; 53
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	08 95       	ret

00000de6 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
     de6:	84 e1       	ldi	r24, 0x14	; 20
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	08 95       	ret

00000dec <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9connectedEv>:
     dec:	8e 57       	subi	r24, 0x7E	; 126
     dee:	9b 4f       	sbci	r25, 0xFB	; 251
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	08 95       	ret

00000df6 <_ZN3ros19FlashReadOutBuffer_D1Ev>:
     df6:	2e ee       	ldi	r18, 0xEE	; 238
     df8:	32 e0       	ldi	r19, 0x02	; 2
     dfa:	fc 01       	movw	r30, r24
     dfc:	31 83       	std	Z+1, r19	; 0x01
     dfe:	20 83       	st	Z, r18
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	94 81       	ldd	r25, Z+4	; 0x04
     e04:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <_ZdlPv>

00000e08 <_ZN3ros19FlashReadOutBuffer_D0Ev>:
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	ec 01       	movw	r28, r24
     e0e:	f3 df       	rcall	.-26     	; 0xdf6 <_ZN3ros19FlashReadOutBuffer_D1Ev>
     e10:	ce 01       	movw	r24, r28
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <_ZdlPv>

00000e1a <_Z20leftWheelVelCallbackRKN8std_msgs5Int32E>:
     e1a:	fc 01       	movw	r30, r24
     e1c:	42 81       	ldd	r20, Z+2	; 0x02
     e1e:	53 81       	ldd	r21, Z+3	; 0x03
     e20:	64 81       	ldd	r22, Z+4	; 0x04
     e22:	75 81       	ldd	r23, Z+5	; 0x05
     e24:	8f e6       	ldi	r24, 0x6F	; 111
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	3a ca       	rjmp	.-2956   	; 0x29e <_ZN15DC_Motor_Driver12setTargetPPMEl>

00000e2a <_Z21RightWheelVelCallbackRKN8std_msgs5Int32E>:
     e2a:	fc 01       	movw	r30, r24
     e2c:	42 81       	ldd	r20, Z+2	; 0x02
     e2e:	53 81       	ldd	r21, Z+3	; 0x03
     e30:	64 81       	ldd	r22, Z+4	; 0x04
     e32:	75 81       	ldd	r23, Z+5	; 0x05
     e34:	70 95       	com	r23
     e36:	60 95       	com	r22
     e38:	50 95       	com	r21
     e3a:	41 95       	neg	r20
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	6f 4f       	sbci	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	89 e5       	ldi	r24, 0x59	; 89
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	2b ca       	rjmp	.-2986   	; 0x29e <_ZN15DC_Motor_Driver12setTargetPPMEl>

00000e48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
     e48:	ab 01       	movw	r20, r22
     e4a:	fc 01       	movw	r30, r24
     e4c:	a7 81       	ldd	r26, Z+7	; 0x07
     e4e:	b0 85       	ldd	r27, Z+8	; 0x08
     e50:	65 81       	ldd	r22, Z+5	; 0x05
     e52:	76 81       	ldd	r23, Z+6	; 0x06
     e54:	ed 91       	ld	r30, X+
     e56:	fc 91       	ld	r31, X
     e58:	11 97       	sbiw	r26, 0x01	; 1
     e5a:	01 90       	ld	r0, Z+
     e5c:	f0 81       	ld	r31, Z
     e5e:	e0 2d       	mov	r30, r0
     e60:	cd 01       	movw	r24, r26
     e62:	19 94       	eijmp

00000e64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>:
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	dc 01       	movw	r26, r24
     e6a:	15 96       	adiw	r26, 0x05	; 5
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	16 97       	sbiw	r26, 0x06	; 6
     e72:	fb 01       	movw	r30, r22
     e74:	15 96       	adiw	r26, 0x05	; 5
     e76:	2d 91       	ld	r18, X+
     e78:	3c 91       	ld	r19, X
     e7a:	16 97       	sbiw	r26, 0x06	; 6
     e7c:	25 39       	cpi	r18, 0x95	; 149
     e7e:	31 05       	cpc	r19, r1
     e80:	ec f4       	brge	.+58     	; 0xebc <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x58>
     e82:	44 91       	lpm	r20, Z
     e84:	13 96       	adiw	r26, 0x03	; 3
     e86:	6d 91       	ld	r22, X+
     e88:	7c 91       	ld	r23, X
     e8a:	14 97       	sbiw	r26, 0x04	; 4
     e8c:	eb 01       	movw	r28, r22
     e8e:	c2 0f       	add	r28, r18
     e90:	d3 1f       	adc	r29, r19
     e92:	48 83       	st	Y, r20
     e94:	15 96       	adiw	r26, 0x05	; 5
     e96:	2d 91       	ld	r18, X+
     e98:	3c 91       	ld	r19, X
     e9a:	16 97       	sbiw	r26, 0x06	; 6
     e9c:	31 96       	adiw	r30, 0x01	; 1
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	cd 91       	ld	r28, X+
     ea2:	dc 91       	ld	r29, X
     ea4:	14 97       	sbiw	r26, 0x04	; 4
     ea6:	c2 0f       	add	r28, r18
     ea8:	d3 1f       	adc	r29, r19
     eaa:	48 81       	ld	r20, Y
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	16 96       	adiw	r26, 0x06	; 6
     eb2:	3c 93       	st	X, r19
     eb4:	2e 93       	st	-X, r18
     eb6:	15 97       	sbiw	r26, 0x05	; 5
     eb8:	41 11       	cpse	r20, r1
     eba:	dc cf       	rjmp	.-72     	; 0xe74 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x10>
     ebc:	15 96       	adiw	r26, 0x05	; 5
     ebe:	2d 91       	ld	r18, X+
     ec0:	3c 91       	ld	r19, X
     ec2:	16 97       	sbiw	r26, 0x06	; 6
     ec4:	25 39       	cpi	r18, 0x95	; 149
     ec6:	31 05       	cpc	r19, r1
     ec8:	24 f0       	brlt	.+8      	; 0xed2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x6e>
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	17 96       	adiw	r26, 0x07	; 7
     ece:	2c 93       	st	X, r18
     ed0:	17 97       	sbiw	r26, 0x07	; 7
     ed2:	13 96       	adiw	r26, 0x03	; 3
     ed4:	2d 91       	ld	r18, X+
     ed6:	3c 91       	ld	r19, X
     ed8:	14 97       	sbiw	r26, 0x04	; 4
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>:
     ee4:	41 11       	cpse	r20, r1
     ee6:	be cf       	rjmp	.-132    	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
     ee8:	cb 01       	movw	r24, r22
     eea:	08 95       	ret

00000eec <_ZN3ros19FlashReadOutBuffer_11readMsgInfoEPKc>:
     eec:	bb cf       	rjmp	.-138    	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>

00000eee <_ZN3ros19FlashReadOutBuffer_C1Ev>:
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	8e ee       	ldi	r24, 0xEE	; 238
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	88 83       	st	Y, r24
     efe:	1e 82       	std	Y+6, r1	; 0x06
     f00:	1d 82       	std	Y+5, r1	; 0x05
     f02:	86 e9       	ldi	r24, 0x96	; 150
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <_Znaj>
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	fc 01       	movw	r30, r24
     f10:	10 82       	st	Z, r1
     f12:	eb 56       	subi	r30, 0x6B	; 107
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	10 82       	st	Z, r1
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
  {
    for(size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
     f2a:	6a 01       	movw	r12, r20
     f2c:	7b 01       	movw	r14, r22
     f2e:	02 2e       	mov	r0, r18
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x1c>
     f32:	f6 94       	lsr	r15
     f34:	e7 94       	ror	r14
     f36:	d7 94       	ror	r13
     f38:	c7 94       	ror	r12
     f3a:	0a 94       	dec	r0
     f3c:	d2 f7       	brpl	.-12     	; 0xf32 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x14>
     f3e:	fc 01       	movw	r30, r24
     f40:	c1 92       	st	Z+, r12
     f42:	cf 01       	movw	r24, r30
     f44:	28 5f       	subi	r18, 0xF8	; 248
     f46:	3f 4f       	sbci	r19, 0xFF	; 255

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for(size_t i = 0; i < sizeof(V); i++)
     f48:	20 32       	cpi	r18, 0x20	; 32
     f4a:	31 05       	cpc	r19, r1
     f4c:	71 f7       	brne	.-36     	; 0xf2a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xc>
      arr[i] = (var >> (8 * i));
  }
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	08 95       	ret

00000f58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
     f58:	4f 92       	push	r4
     f5a:	5f 92       	push	r5
     f5c:	6f 92       	push	r6
     f5e:	7f 92       	push	r7
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	fb 01       	movw	r30, r22
     f7c:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	83 83       	std	Z+3, r24	; 0x03
     f8a:	db 01       	movw	r26, r22
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	ba 01       	movw	r22, r20
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
     f92:	e4 e0       	ldi	r30, 0x04	; 4
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	14 96       	adiw	r26, 0x04	; 4
      for( uint32_t i = 0; i < ints_length; i++){
     f98:	ca 80       	ldd	r12, Y+2	; 0x02
     f9a:	db 80       	ldd	r13, Y+3	; 0x03
     f9c:	ec 80       	ldd	r14, Y+4	; 0x04
     f9e:	fd 80       	ldd	r15, Y+5	; 0x05
     fa0:	cf 01       	movw	r24, r30
     fa2:	04 96       	adiw	r24, 0x04	; 4
     fa4:	4c 15       	cp	r20, r12
     fa6:	5d 05       	cpc	r21, r13
     fa8:	6e 05       	cpc	r22, r14
     faa:	7f 05       	cpc	r23, r15
     fac:	c8 f4       	brcc	.+50     	; 0xfe0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
     fae:	2a 85       	ldd	r18, Y+10	; 0x0a
     fb0:	3b 85       	ldd	r19, Y+11	; 0x0b
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	34 97       	sbiw	r30, 0x04	; 4
     fb8:	d0 80       	ld	r13, Z
     fba:	f1 80       	ldd	r15, Z+1	; 0x01
     fbc:	32 81       	ldd	r19, Z+2	; 0x02
     fbe:	23 81       	ldd	r18, Z+3	; 0x03
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
     fc0:	dc 92       	st	X, r13
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	fc 92       	st	X, r15
     fc6:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
     fc8:	12 96       	adiw	r26, 0x02	; 2
     fca:	3c 93       	st	X, r19
     fcc:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
     fce:	13 96       	adiw	r26, 0x03	; 3
     fd0:	2c 93       	st	X, r18
     fd2:	13 97       	sbiw	r26, 0x03	; 3
     fd4:	fc 01       	movw	r30, r24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     fd6:	4f 5f       	subi	r20, 0xFF	; 255
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	6f 4f       	sbci	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	db cf       	rjmp	.-74     	; 0xf96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x3e>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
     fe0:	5f 01       	movw	r10, r30
     fe2:	a0 0e       	add	r10, r16
     fe4:	b1 1e       	adc	r11, r17
     fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe8:	f5 01       	movw	r30, r10
     fea:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
     fec:	2d 85       	ldd	r18, Y+13	; 0x0d
     fee:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
     ff0:	2e 85       	ldd	r18, Y+14	; 0x0e
     ff2:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
     ff4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ff6:	23 83       	std	Z+3, r18	; 0x03
     ff8:	d5 01       	movw	r26, r10
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	ba 01       	movw	r22, r20
    1000:	cc 84       	ldd	r12, Y+12	; 0x0c
    1002:	dd 84       	ldd	r13, Y+13	; 0x0d
    1004:	ee 84       	ldd	r14, Y+14	; 0x0e
    1006:	ff 84       	ldd	r15, Y+15	; 0x0f
    1008:	9c 01       	movw	r18, r24
    100a:	2c 5f       	subi	r18, 0xFC	; 252
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	4c 15       	cp	r20, r12
    1010:	5d 05       	cpc	r21, r13
    1012:	6e 05       	cpc	r22, r14
    1014:	7f 05       	cpc	r23, r15
    1016:	f8 f4       	brcc	.+62     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
    1018:	cd 01       	movw	r24, r26
    101a:	8a 19       	sub	r24, r10
    101c:	9b 09       	sbc	r25, r11
    101e:	ec 88       	ldd	r14, Y+20	; 0x14
    1020:	fd 88       	ldd	r15, Y+21	; 0x15
    1022:	8e 0d       	add	r24, r14
    1024:	9f 1d       	adc	r25, r15
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
    1026:	fc 01       	movw	r30, r24
    1028:	d0 80       	ld	r13, Z
    102a:	e1 80       	ldd	r14, Z+1	; 0x01
    102c:	f2 80       	ldd	r15, Z+2	; 0x02
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	14 96       	adiw	r26, 0x04	; 4
    1032:	dc 92       	st	X, r13
    1034:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
    1036:	15 96       	adiw	r26, 0x05	; 5
    1038:	ec 92       	st	X, r14
    103a:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
    103c:	16 96       	adiw	r26, 0x06	; 6
    103e:	fc 92       	st	X, r15
    1040:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
    1042:	17 96       	adiw	r26, 0x07	; 7
    1044:	8c 93       	st	X, r24
    1046:	17 97       	sbiw	r26, 0x07	; 7
    1048:	c9 01       	movw	r24, r18
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
    104a:	4f 5f       	subi	r20, 0xFF	; 255
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
    104e:	6f 4f       	sbci	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	14 96       	adiw	r26, 0x04	; 4
    1054:	d5 cf       	rjmp	.-86     	; 0x1000 <__EEPROM_REGION_LENGTH__>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
    1056:	f8 01       	movw	r30, r16
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	8e 89       	ldd	r24, Y+22	; 0x16
    105e:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
    1060:	8f 89       	ldd	r24, Y+23	; 0x17
    1062:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
    1064:	88 8d       	ldd	r24, Y+24	; 0x18
    1066:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
    1068:	89 8d       	ldd	r24, Y+25	; 0x19
    106a:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->strings_length);
    106c:	79 01       	movw	r14, r18
    106e:	a1 2c       	mov	r10, r1
    1070:	b1 2c       	mov	r11, r1
      for( uint32_t i = 0; i < strings_length; i++){
    1072:	41 2c       	mov	r4, r1
    1074:	51 2c       	mov	r5, r1
    1076:	32 01       	movw	r6, r4
    1078:	8e 89       	ldd	r24, Y+22	; 0x16
    107a:	9f 89       	ldd	r25, Y+23	; 0x17
    107c:	a8 8d       	ldd	r26, Y+24	; 0x18
    107e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1080:	48 16       	cp	r4, r24
    1082:	59 06       	cpc	r5, r25
    1084:	6a 06       	cpc	r6, r26
    1086:	7b 06       	cpc	r7, r27
    1088:	78 f5       	brcc	.+94     	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
      uint32_t length_stringsi = strlen(this->strings[i]);
    108a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    108c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    108e:	ea 0d       	add	r30, r10
    1090:	fb 1d       	adc	r31, r11
    1092:	a0 81       	ld	r26, Z
    1094:	b1 81       	ldd	r27, Z+1	; 0x01
    1096:	fd 01       	movw	r30, r26
    1098:	01 90       	ld	r0, Z+
    109a:	00 20       	and	r0, r0
    109c:	e9 f7       	brne	.-6      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	6f 01       	movw	r12, r30
    10a2:	ca 1a       	sub	r12, r26
    10a4:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_stringsi);
    10a6:	a6 01       	movw	r20, r12
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	c8 01       	movw	r24, r16
    10ae:	8e 0d       	add	r24, r14
    10b0:	9f 1d       	adc	r25, r15
    10b2:	35 df       	rcall	.-406    	; 0xf1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
    10b4:	f4 e0       	ldi	r31, 0x04	; 4
    10b6:	ef 0e       	add	r14, r31
    10b8:	f1 1c       	adc	r15, r1
    10ba:	ec 8d       	ldd	r30, Y+28	; 0x1c
    10bc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    10be:	ea 0d       	add	r30, r10
    10c0:	fb 1d       	adc	r31, r11
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	a6 01       	movw	r20, r12
    10c8:	c8 01       	movw	r24, r16
    10ca:	8e 0d       	add	r24, r14
    10cc:	9f 1d       	adc	r25, r15
    10ce:	0e 94 bd 21 	call	0x437a	; 0x437a <memcpy>
      offset += length_stringsi;
    10d2:	ec 0c       	add	r14, r12
    10d4:	fd 1c       	adc	r15, r13
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->strings_length);
      for( uint32_t i = 0; i < strings_length; i++){
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	48 1a       	sub	r4, r24
    10da:	58 0a       	sbc	r5, r24
    10dc:	68 0a       	sbc	r6, r24
    10de:	78 0a       	sbc	r7, r24
    10e0:	e2 e0       	ldi	r30, 0x02	; 2
    10e2:	ae 0e       	add	r10, r30
    10e4:	b1 1c       	adc	r11, r1
    10e6:	c8 cf       	rjmp	.-112    	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
    10e8:	c7 01       	movw	r24, r14
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	7f 90       	pop	r7
    1100:	6f 90       	pop	r6
    1102:	5f 90       	pop	r5
    1104:	4f 90       	pop	r4
    1106:	08 95       	ret

00001108 <_ZNK14rosserial_msgs3Log9serializeEPh>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	8c 01       	movw	r16, r24
    1116:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
    1118:	dc 01       	movw	r26, r24
    111a:	12 96       	adiw	r26, 0x02	; 2
    111c:	2c 91       	ld	r18, X
    111e:	12 97       	sbiw	r26, 0x02	; 2
    1120:	fb 01       	movw	r30, r22
    1122:	21 93       	st	Z+, r18
    1124:	cf 01       	movw	r24, r30
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	ed 91       	ld	r30, X+
    112a:	fc 91       	ld	r31, X
    112c:	14 97       	sbiw	r26, 0x04	; 4
    112e:	ef 01       	movw	r28, r30
    1130:	09 90       	ld	r0, Y+
    1132:	00 20       	and	r0, r0
    1134:	e9 f7       	brne	.-6      	; 0x1130 <_ZNK14rosserial_msgs3Log9serializeEPh+0x28>
    1136:	21 97       	sbiw	r28, 0x01	; 1
    1138:	ce 1b       	sub	r28, r30
    113a:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_msg);
    113c:	ae 01       	movw	r20, r28
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	ed de       	rcall	.-550    	; 0xf1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
    1144:	d8 01       	movw	r26, r16
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	6d 91       	ld	r22, X+
    114a:	7c 91       	ld	r23, X
    114c:	14 97       	sbiw	r26, 0x04	; 4
    114e:	ae 01       	movw	r20, r28
    1150:	c7 01       	movw	r24, r14
    1152:	05 96       	adiw	r24, 0x05	; 5
    1154:	0e 94 bd 21 	call	0x437a	; 0x437a <memcpy>
      offset += length_msg;
      return offset;
    }
    1158:	ce 01       	movw	r24, r28
    115a:	05 96       	adiw	r24, 0x05	; 5
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	7c 01       	movw	r14, r24
    117c:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
    117e:	dc 01       	movw	r26, r24
    1180:	12 96       	adiw	r26, 0x02	; 2
    1182:	8c 91       	ld	r24, X
    1184:	12 97       	sbiw	r26, 0x02	; 2
    1186:	fb 01       	movw	r30, r22
    1188:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
    118a:	13 96       	adiw	r26, 0x03	; 3
    118c:	8c 91       	ld	r24, X
    118e:	13 97       	sbiw	r26, 0x03	; 3
    1190:	81 83       	std	Z+1, r24	; 0x01
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
    1192:	14 96       	adiw	r26, 0x04	; 4
    1194:	ed 91       	ld	r30, X+
    1196:	fc 91       	ld	r31, X
    1198:	15 97       	sbiw	r26, 0x05	; 5
    119a:	ef 01       	movw	r28, r30
    119c:	09 90       	ld	r0, Y+
    119e:	00 20       	and	r0, r0
    11a0:	e9 f7       	brne	.-6      	; 0x119c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x32>
    11a2:	21 97       	sbiw	r28, 0x01	; 1
    11a4:	ce 1b       	sub	r28, r30
    11a6:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_topic_name);
    11a8:	ae 01       	movw	r20, r28
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	c8 01       	movw	r24, r16
    11b0:	02 96       	adiw	r24, 0x02	; 2
    11b2:	b5 de       	rcall	.-662    	; 0xf1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
    11b4:	d7 01       	movw	r26, r14
    11b6:	14 96       	adiw	r26, 0x04	; 4
    11b8:	6d 91       	ld	r22, X+
    11ba:	7c 91       	ld	r23, X
    11bc:	15 97       	sbiw	r26, 0x05	; 5
    11be:	ae 01       	movw	r20, r28
    11c0:	c8 01       	movw	r24, r16
    11c2:	06 96       	adiw	r24, 0x06	; 6
    11c4:	0e 94 bd 21 	call	0x437a	; 0x437a <memcpy>
      offset += length_topic_name;
    11c8:	ce 01       	movw	r24, r28
    11ca:	06 96       	adiw	r24, 0x06	; 6
      uint32_t length_message_type = strlen(this->message_type);
    11cc:	f7 01       	movw	r30, r14
    11ce:	a6 81       	ldd	r26, Z+6	; 0x06
    11d0:	b7 81       	ldd	r27, Z+7	; 0x07
    11d2:	fd 01       	movw	r30, r26
    11d4:	01 90       	ld	r0, Z+
    11d6:	00 20       	and	r0, r0
    11d8:	e9 f7       	brne	.-6      	; 0x11d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6a>
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	6f 01       	movw	r12, r30
    11de:	ca 1a       	sub	r12, r26
    11e0:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_message_type);
    11e2:	a6 01       	movw	r20, r12
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	80 0f       	add	r24, r16
    11ea:	91 1f       	adc	r25, r17
    11ec:	98 de       	rcall	.-720    	; 0xf1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
    11ee:	2a 96       	adiw	r28, 0x0a	; 10
    11f0:	d7 01       	movw	r26, r14
    11f2:	16 96       	adiw	r26, 0x06	; 6
    11f4:	6d 91       	ld	r22, X+
    11f6:	7c 91       	ld	r23, X
    11f8:	17 97       	sbiw	r26, 0x07	; 7
    11fa:	a6 01       	movw	r20, r12
    11fc:	c8 01       	movw	r24, r16
    11fe:	8c 0f       	add	r24, r28
    1200:	9d 1f       	adc	r25, r29
    1202:	0e 94 bd 21 	call	0x437a	; 0x437a <memcpy>
      offset += length_message_type;
    1206:	cc 0d       	add	r28, r12
    1208:	dd 1d       	adc	r29, r13
      uint32_t length_md5sum = strlen(this->md5sum);
    120a:	d7 01       	movw	r26, r14
    120c:	18 96       	adiw	r26, 0x08	; 8
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	19 97       	sbiw	r26, 0x09	; 9
    1214:	df 01       	movw	r26, r30
    1216:	0d 90       	ld	r0, X+
    1218:	00 20       	and	r0, r0
    121a:	e9 f7       	brne	.-6      	; 0x1216 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xac>
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	6d 01       	movw	r12, r26
    1220:	ce 1a       	sub	r12, r30
    1222:	df 0a       	sbc	r13, r31
      varToArr(outbuffer + offset, length_md5sum);
    1224:	a6 01       	movw	r20, r12
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	c8 01       	movw	r24, r16
    122c:	8c 0f       	add	r24, r28
    122e:	9d 1f       	adc	r25, r29
    1230:	76 de       	rcall	.-788    	; 0xf1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
    1232:	24 96       	adiw	r28, 0x04	; 4
    1234:	f7 01       	movw	r30, r14
    1236:	60 85       	ldd	r22, Z+8	; 0x08
    1238:	71 85       	ldd	r23, Z+9	; 0x09
    123a:	a6 01       	movw	r20, r12
    123c:	c8 01       	movw	r24, r16
    123e:	8c 0f       	add	r24, r28
    1240:	9d 1f       	adc	r25, r29
    1242:	0e 94 bd 21 	call	0x437a	; 0x437a <memcpy>
      offset += length_md5sum;
    1246:	c6 01       	movw	r24, r12
    1248:	8c 0f       	add	r24, r28
    124a:	9d 1f       	adc	r25, r29
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
    124c:	d7 01       	movw	r26, r14
    124e:	1a 96       	adiw	r26, 0x0a	; 10
    1250:	6c 91       	ld	r22, X
    1252:	1a 97       	sbiw	r26, 0x0a	; 10
    1254:	1b 96       	adiw	r26, 0x0b	; 11
    1256:	4c 91       	ld	r20, X
    1258:	1b 97       	sbiw	r26, 0x0b	; 11
    125a:	1c 96       	adiw	r26, 0x0c	; 12
    125c:	3c 91       	ld	r19, X
    125e:	1c 97       	sbiw	r26, 0x0c	; 12
    1260:	1d 96       	adiw	r26, 0x0d	; 13
    1262:	2c 91       	ld	r18, X
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
    1264:	f8 01       	movw	r30, r16
    1266:	e8 0f       	add	r30, r24
    1268:	f9 1f       	adc	r31, r25
    126a:	60 83       	st	Z, r22
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
    126c:	41 83       	std	Z+1, r20	; 0x01
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
    126e:	32 83       	std	Z+2, r19	; 0x02
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
    1270:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->buffer_size);
      return offset;
    }
    1272:	04 96       	adiw	r24, 0x04	; 4
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	08 95       	ret

00001286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	fc 01       	movw	r30, r24
  {
    var = 0;
    1290:	10 82       	st	Z, r1
    1292:	11 82       	std	Z+1, r1	; 0x01
    1294:	12 82       	std	Z+2, r1	; 0x02
    1296:	13 82       	std	Z+3, r1	; 0x03
    1298:	db 01       	movw	r26, r22
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    for(size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
    129e:	4d 91       	ld	r20, X+
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x24>
    12a6:	44 0f       	add	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x20>
    12ae:	05 2e       	mov	r0, r21
    12b0:	00 0c       	add	r0, r0
    12b2:	66 0b       	sbc	r22, r22
    12b4:	77 0b       	sbc	r23, r23
    12b6:	c0 80       	ld	r12, Z
    12b8:	d1 80       	ldd	r13, Z+1	; 0x01
    12ba:	e2 80       	ldd	r14, Z+2	; 0x02
    12bc:	f3 80       	ldd	r15, Z+3	; 0x03
    12be:	4c 29       	or	r20, r12
    12c0:	5d 29       	or	r21, r13
    12c2:	6e 29       	or	r22, r14
    12c4:	7f 29       	or	r23, r15
    12c6:	40 83       	st	Z, r20
    12c8:	51 83       	std	Z+1, r21	; 0x01
    12ca:	62 83       	std	Z+2, r22	; 0x02
    12cc:	73 83       	std	Z+3, r23	; 0x03
    12ce:	28 5f       	subi	r18, 0xF8	; 248
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for(size_t i = 0; i < sizeof(V); i++)
    12d2:	20 32       	cpi	r18, 0x20	; 32
    12d4:	31 05       	cpc	r19, r1
    12d6:	19 f7       	brne	.-58     	; 0x129e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x18>
      var |= (arr[i] << (8 * i));
  }
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    12e2:	4f 92       	push	r4
    12e4:	5f 92       	push	r5
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	8f 92       	push	r8
    12ec:	9f 92       	push	r9
    12ee:	af 92       	push	r10
    12f0:	bf 92       	push	r11
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
    1300:	1f 92       	push	r1
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	7c 01       	movw	r14, r24
    1308:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
    130a:	fb 01       	movw	r30, r22
    130c:	81 91       	ld	r24, Z+
    130e:	bf 01       	movw	r22, r30
    1310:	f7 01       	movw	r30, r14
    1312:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	b6 df       	rcall	.-148    	; 0x1286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	ab 81       	ldd	r26, Y+3	; 0x03
    1320:	bc 81       	ldd	r27, Y+4	; 0x04
    1322:	4c 01       	movw	r8, r24
    1324:	5d 01       	movw	r10, r26
    1326:	f5 e0       	ldi	r31, 0x05	; 5
    1328:	8f 0e       	add	r8, r31
    132a:	91 1c       	adc	r9, r1
    132c:	a1 1c       	adc	r10, r1
    132e:	b1 1c       	adc	r11, r1
    1330:	a8 01       	movw	r20, r16
    1332:	4c 5f       	subi	r20, 0xFC	; 252
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	fa 01       	movw	r30, r20
    1338:	25 e0       	ldi	r18, 0x05	; 5
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	29 01       	movw	r4, r18
    133e:	61 2c       	mov	r6, r1
    1340:	71 2c       	mov	r7, r1
    1342:	48 14       	cp	r4, r8
    1344:	59 04       	cpc	r5, r9
    1346:	6a 04       	cpc	r6, r10
    1348:	7b 04       	cpc	r7, r11
    134a:	28 f4       	brcc	.+10     	; 0x1356 <_ZN14rosserial_msgs3Log11deserializeEPh+0x74>
          inbuffer[k-1]=inbuffer[k];
    134c:	61 81       	ldd	r22, Z+1	; 0x01
    134e:	61 93       	st	Z+, r22
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    1350:	2f 5f       	subi	r18, 0xFF	; 255
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	f3 cf       	rjmp	.-26     	; 0x133c <_ZN14rosserial_msgs3Log11deserializeEPh+0x5a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
    1356:	f8 01       	movw	r30, r16
    1358:	e8 0f       	add	r30, r24
    135a:	f9 1f       	adc	r31, r25
    135c:	14 82       	std	Z+4, r1	; 0x04
      this->msg = (char *)(inbuffer + offset-1);
    135e:	f7 01       	movw	r30, r14
    1360:	54 83       	std	Z+4, r21	; 0x04
    1362:	43 83       	std	Z+3, r20	; 0x03
      offset += length_msg;
     return offset;
    }
    1364:	05 96       	adiw	r24, 0x05	; 5
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	7f 90       	pop	r7
    1384:	6f 90       	pop	r6
    1386:	5f 90       	pop	r5
    1388:	4f 90       	pop	r4
    138a:	08 95       	ret

0000138c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	60 97       	sbiw	r28, 0x10	; 16
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	8c 01       	movw	r16, r24
    13c2:	6b 01       	movw	r12, r22
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    13c4:	db 01       	movw	r26, r22
    13c6:	8d 90       	ld	r8, X+
    13c8:	9d 90       	ld	r9, X+
    13ca:	ad 90       	ld	r10, X+
    13cc:	bc 90       	ld	r11, X
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
    13ce:	fc 01       	movw	r30, r24
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	a4 81       	ldd	r26, Z+4	; 0x04
    13d6:	b5 81       	ldd	r27, Z+5	; 0x05
    13d8:	88 15       	cp	r24, r8
    13da:	99 05       	cpc	r25, r9
    13dc:	aa 05       	cpc	r26, r10
    13de:	bb 05       	cpc	r27, r11
    13e0:	70 f4       	brcc	.+28     	; 0x13fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
    13e2:	b4 01       	movw	r22, r8
    13e4:	66 0f       	add	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	66 0f       	add	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	82 85       	ldd	r24, Z+10	; 0x0a
    13ee:	93 85       	ldd	r25, Z+11	; 0x0b
    13f0:	0e 94 dd 20 	call	0x41ba	; 0x41ba <realloc>
    13f4:	d8 01       	movw	r26, r16
    13f6:	1b 96       	adiw	r26, 0x0b	; 11
    13f8:	9c 93       	st	X, r25
    13fa:	8e 93       	st	-X, r24
    13fc:	1a 97       	sbiw	r26, 0x0a	; 10
      ints_length = ints_lengthT;
    13fe:	f8 01       	movw	r30, r16
    1400:	82 82       	std	Z+2, r8	; 0x02
    1402:	93 82       	std	Z+3, r9	; 0x03
    1404:	a4 82       	std	Z+4, r10	; 0x04
    1406:	b5 82       	std	Z+5, r11	; 0x05
    1408:	96 01       	movw	r18, r12
      for( uint32_t i = 0; i < ints_length; i++){
    140a:	81 2c       	mov	r8, r1
    140c:	91 2c       	mov	r9, r1
    140e:	54 01       	movw	r10, r8
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
    1410:	44 e0       	ldi	r20, 0x04	; 4
    1412:	50 e0       	ldi	r21, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    1414:	b8 01       	movw	r22, r16
    1416:	6a 5f       	subi	r22, 0xFA	; 250
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	2c 5f       	subi	r18, 0xFC	; 252
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    141e:	f8 01       	movw	r30, r16
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	a4 81       	ldd	r26, Z+4	; 0x04
    1426:	b5 81       	ldd	r27, Z+5	; 0x05
    1428:	fa 01       	movw	r30, r20
    142a:	34 96       	adiw	r30, 0x04	; 4
    142c:	1f 01       	movw	r2, r30
    142e:	88 16       	cp	r8, r24
    1430:	99 06       	cpc	r9, r25
    1432:	aa 06       	cpc	r10, r26
    1434:	bb 06       	cpc	r11, r27
    1436:	50 f5       	brcc	.+84     	; 0x148c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
    1438:	d9 01       	movw	r26, r18
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	fc 90       	ld	r15, X
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	8c 91       	ld	r24, X
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e0       	ldi	r26, 0x00	; 0
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	dc 01       	movw	r26, r24
    144c:	99 27       	eor	r25, r25
    144e:	88 27       	eor	r24, r24
    1450:	9f 29       	or	r25, r15
    1452:	f9 01       	movw	r30, r18
    1454:	f0 80       	ld	r15, Z
    1456:	8f 29       	or	r24, r15
    1458:	f3 80       	ldd	r15, Z+3	; 0x03
    145a:	bf 29       	or	r27, r15
    145c:	f8 01       	movw	r30, r16
    145e:	86 83       	std	Z+6, r24	; 0x06
    1460:	97 83       	std	Z+7, r25	; 0x07
    1462:	a0 87       	std	Z+8, r26	; 0x08
    1464:	b1 87       	std	Z+9, r27	; 0x09
    1466:	da 01       	movw	r26, r20
    1468:	a1 01       	movw	r20, r2
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    146a:	14 97       	sbiw	r26, 0x04	; 4
    146c:	82 85       	ldd	r24, Z+10	; 0x0a
    146e:	93 85       	ldd	r25, Z+11	; 0x0b
    1470:	a8 0f       	add	r26, r24
    1472:	b9 1f       	adc	r27, r25
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	fb 01       	movw	r30, r22
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	8a 95       	dec	r24
    147e:	e1 f7       	brne	.-8      	; 0x1478 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    1480:	ff ef       	ldi	r31, 0xFF	; 255
    1482:	8f 1a       	sub	r8, r31
    1484:	9f 0a       	sbc	r9, r31
    1486:	af 0a       	sbc	r10, r31
    1488:	bf 0a       	sbc	r11, r31
    148a:	c7 cf       	rjmp	.-114    	; 0x141a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    148c:	46 01       	movw	r8, r12
    148e:	84 0e       	add	r8, r20
    1490:	95 1e       	adc	r9, r21
    1492:	d4 01       	movw	r26, r8
    1494:	8c 91       	ld	r24, X
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    1496:	11 96       	adiw	r26, 0x01	; 1
    1498:	9c 91       	ld	r25, X
    149a:	11 97       	sbiw	r26, 0x01	; 1
    149c:	12 96       	adiw	r26, 0x02	; 2
    149e:	4c 90       	ld	r4, X
    14a0:	12 97       	sbiw	r26, 0x02	; 2
    14a2:	51 2c       	mov	r5, r1
    14a4:	61 2c       	mov	r6, r1
    14a6:	71 2c       	mov	r7, r1
    14a8:	32 01       	movw	r6, r4
    14aa:	55 24       	eor	r5, r5
    14ac:	44 24       	eor	r4, r4
    14ae:	59 2a       	or	r5, r25
    14b0:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    14b2:	13 96       	adiw	r26, 0x03	; 3
    14b4:	8c 91       	ld	r24, X
    14b6:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    14b8:	5f 01       	movw	r10, r30
      if(floats_lengthT > floats_length)
    14ba:	f8 01       	movw	r30, r16
    14bc:	84 85       	ldd	r24, Z+12	; 0x0c
    14be:	95 85       	ldd	r25, Z+13	; 0x0d
    14c0:	a6 85       	ldd	r26, Z+14	; 0x0e
    14c2:	b7 85       	ldd	r27, Z+15	; 0x0f
    14c4:	84 15       	cp	r24, r4
    14c6:	95 05       	cpc	r25, r5
    14c8:	a6 05       	cpc	r26, r6
    14ca:	b7 05       	cpc	r27, r7
    14cc:	70 f4       	brcc	.+28     	; 0x14ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    14ce:	b2 01       	movw	r22, r4
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	84 89       	ldd	r24, Z+20	; 0x14
    14da:	95 89       	ldd	r25, Z+21	; 0x15
    14dc:	0e 94 dd 20 	call	0x41ba	; 0x41ba <realloc>
    14e0:	d8 01       	movw	r26, r16
    14e2:	55 96       	adiw	r26, 0x15	; 21
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
    14e8:	54 97       	sbiw	r26, 0x14	; 20
      floats_length = floats_lengthT;
    14ea:	f8 01       	movw	r30, r16
    14ec:	44 86       	std	Z+12, r4	; 0x0c
    14ee:	55 86       	std	Z+13, r5	; 0x0d
    14f0:	66 86       	std	Z+14, r6	; 0x0e
    14f2:	77 86       	std	Z+15, r7	; 0x0f
    14f4:	c4 01       	movw	r24, r8
      for( uint32_t i = 0; i < floats_length; i++){
    14f6:	41 2c       	mov	r4, r1
    14f8:	51 2c       	mov	r5, r1
    14fa:	32 01       	movw	r6, r4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    14fc:	98 01       	movw	r18, r16
    14fe:	20 5f       	subi	r18, 0xF0	; 240
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1502:	d8 01       	movw	r26, r16
    1504:	1c 96       	adiw	r26, 0x0c	; 12
    1506:	4d 91       	ld	r20, X+
    1508:	5d 91       	ld	r21, X+
    150a:	6d 91       	ld	r22, X+
    150c:	7c 91       	ld	r23, X
    150e:	1f 97       	sbiw	r26, 0x0f	; 15
    1510:	f5 01       	movw	r30, r10
    1512:	34 96       	adiw	r30, 0x04	; 4
    1514:	44 16       	cp	r4, r20
    1516:	55 06       	cpc	r5, r21
    1518:	66 06       	cpc	r6, r22
    151a:	77 06       	cpc	r7, r23
    151c:	98 f5       	brcc	.+102    	; 0x1584 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1f8>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    151e:	dc 01       	movw	r26, r24
    1520:	15 96       	adiw	r26, 0x05	; 5
    1522:	fc 90       	ld	r15, X
    1524:	15 97       	sbiw	r26, 0x05	; 5
    1526:	16 96       	adiw	r26, 0x06	; 6
    1528:	4c 91       	ld	r20, X
    152a:	16 97       	sbiw	r26, 0x06	; 6
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	ba 01       	movw	r22, r20
    1534:	55 27       	eor	r21, r21
    1536:	44 27       	eor	r20, r20
    1538:	5f 29       	or	r21, r15
    153a:	14 96       	adiw	r26, 0x04	; 4
    153c:	fc 90       	ld	r15, X
    153e:	14 97       	sbiw	r26, 0x04	; 4
    1540:	4f 29       	or	r20, r15
    1542:	17 96       	adiw	r26, 0x07	; 7
    1544:	fc 90       	ld	r15, X
    1546:	7f 29       	or	r23, r15
      this->st_floats = u_st_floats.real;
    1548:	d8 01       	movw	r26, r16
    154a:	50 96       	adiw	r26, 0x10	; 16
    154c:	4d 93       	st	X+, r20
    154e:	5d 93       	st	X+, r21
    1550:	6d 93       	st	X+, r22
    1552:	7c 93       	st	X, r23
    1554:	53 97       	sbiw	r26, 0x13	; 19
    1556:	5f 01       	movw	r10, r30
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    1558:	ac 01       	movw	r20, r24
    155a:	48 19       	sub	r20, r8
    155c:	59 09       	sbc	r21, r9
    155e:	54 96       	adiw	r26, 0x14	; 20
    1560:	0d 90       	ld	r0, X+
    1562:	bc 91       	ld	r27, X
    1564:	a0 2d       	mov	r26, r0
    1566:	a4 0f       	add	r26, r20
    1568:	b5 1f       	adc	r27, r21
    156a:	44 e0       	ldi	r20, 0x04	; 4
    156c:	f9 01       	movw	r30, r18
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	4a 95       	dec	r20
    1574:	e1 f7       	brne	.-8      	; 0x156e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e2>
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1576:	bf ef       	ldi	r27, 0xFF	; 255
    1578:	4b 1a       	sub	r4, r27
    157a:	5b 0a       	sbc	r5, r27
    157c:	6b 0a       	sbc	r6, r27
    157e:	7b 0a       	sbc	r7, r27
    1580:	04 96       	adiw	r24, 0x04	; 4
    1582:	bf cf       	rjmp	.-130    	; 0x1502 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x176>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    1584:	d6 01       	movw	r26, r12
    1586:	aa 0d       	add	r26, r10
    1588:	bb 1d       	adc	r27, r11
    158a:	8c 91       	ld	r24, X
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	9c 91       	ld	r25, X
    1590:	11 97       	sbiw	r26, 0x01	; 1
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	8c 90       	ld	r8, X
    1596:	12 97       	sbiw	r26, 0x02	; 2
    1598:	91 2c       	mov	r9, r1
    159a:	a1 2c       	mov	r10, r1
    159c:	b1 2c       	mov	r11, r1
    159e:	54 01       	movw	r10, r8
    15a0:	99 24       	eor	r9, r9
    15a2:	88 24       	eor	r8, r8
    15a4:	99 2a       	or	r9, r25
    15a6:	88 2a       	or	r8, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    15a8:	13 96       	adiw	r26, 0x03	; 3
    15aa:	8c 91       	ld	r24, X
    15ac:	b8 2a       	or	r11, r24
      offset += sizeof(this->strings_length);
    15ae:	7f 01       	movw	r14, r30
      if(strings_lengthT > strings_length)
    15b0:	f8 01       	movw	r30, r16
    15b2:	86 89       	ldd	r24, Z+22	; 0x16
    15b4:	97 89       	ldd	r25, Z+23	; 0x17
    15b6:	a0 8d       	ldd	r26, Z+24	; 0x18
    15b8:	b1 8d       	ldd	r27, Z+25	; 0x19
    15ba:	88 15       	cp	r24, r8
    15bc:	99 05       	cpc	r25, r9
    15be:	aa 05       	cpc	r26, r10
    15c0:	bb 05       	cpc	r27, r11
    15c2:	60 f4       	brcc	.+24     	; 0x15dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    15c4:	b4 01       	movw	r22, r8
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    15cc:	95 8d       	ldd	r25, Z+29	; 0x1d
    15ce:	0e 94 dd 20 	call	0x41ba	; 0x41ba <realloc>
    15d2:	d8 01       	movw	r26, r16
    15d4:	5d 96       	adiw	r26, 0x1d	; 29
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	5c 97       	sbiw	r26, 0x1c	; 28
      strings_length = strings_lengthT;
    15dc:	f8 01       	movw	r30, r16
    15de:	86 8a       	std	Z+22, r8	; 0x16
    15e0:	97 8a       	std	Z+23, r9	; 0x17
    15e2:	a0 8e       	std	Z+24, r10	; 0x18
    15e4:	b1 8e       	std	Z+25, r11	; 0x19
    15e6:	21 2c       	mov	r2, r1
    15e8:	31 2c       	mov	r3, r1
      for( uint32_t i = 0; i < strings_length; i++){
    15ea:	81 2c       	mov	r8, r1
    15ec:	91 2c       	mov	r9, r1
    15ee:	54 01       	movw	r10, r8
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    15f0:	98 01       	movw	r18, r16
    15f2:	26 5e       	subi	r18, 0xE6	; 230
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	3a 87       	std	Y+10, r19	; 0x0a
    15f8:	29 87       	std	Y+9, r18	; 0x09
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    15fa:	f8 01       	movw	r30, r16
    15fc:	86 89       	ldd	r24, Z+22	; 0x16
    15fe:	97 89       	ldd	r25, Z+23	; 0x17
    1600:	a0 8d       	ldd	r26, Z+24	; 0x18
    1602:	b1 8d       	ldd	r27, Z+25	; 0x19
    1604:	88 16       	cp	r8, r24
    1606:	99 06       	cpc	r9, r25
    1608:	aa 06       	cpc	r10, r26
    160a:	bb 06       	cpc	r11, r27
    160c:	08 f0       	brcs	.+2      	; 0x1610 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x284>
    160e:	5e c0       	rjmp	.+188    	; 0x16cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x340>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    1610:	b6 01       	movw	r22, r12
    1612:	6e 0d       	add	r22, r14
    1614:	7f 1d       	adc	r23, r15
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	35 de       	rcall	.-918    	; 0x1286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    161c:	97 01       	movw	r18, r14
    161e:	2c 5f       	subi	r18, 0xFC	; 252
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	38 8b       	std	Y+16, r19	; 0x10
    1624:	2f 87       	std	Y+15, r18	; 0x0f
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    1626:	49 81       	ldd	r20, Y+1	; 0x01
    1628:	5a 81       	ldd	r21, Y+2	; 0x02
    162a:	6b 81       	ldd	r22, Y+3	; 0x03
    162c:	7c 81       	ldd	r23, Y+4	; 0x04
    162e:	c9 01       	movw	r24, r18
    1630:	33 0f       	add	r19, r19
    1632:	aa 0b       	sbc	r26, r26
    1634:	bb 0b       	sbc	r27, r27
    1636:	2c 01       	movw	r4, r24
    1638:	3d 01       	movw	r6, r26
    163a:	44 0e       	add	r4, r20
    163c:	55 1e       	adc	r5, r21
    163e:	66 1e       	adc	r6, r22
    1640:	77 1e       	adc	r7, r23
    1642:	4b 86       	std	Y+11, r4	; 0x0b
    1644:	5c 86       	std	Y+12, r5	; 0x0c
    1646:	6d 86       	std	Y+13, r6	; 0x0d
    1648:	7e 86       	std	Y+14, r7	; 0x0e
    164a:	23 e0       	ldi	r18, 0x03	; 3
    164c:	e2 0e       	add	r14, r18
    164e:	f1 1c       	adc	r15, r1
    1650:	f6 01       	movw	r30, r12
    1652:	ee 0d       	add	r30, r14
    1654:	ff 1d       	adc	r31, r15
    1656:	2f 85       	ldd	r18, Y+15	; 0x0f
    1658:	38 89       	ldd	r19, Y+16	; 0x10
    165a:	c9 01       	movw	r24, r18
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	4b 84       	ldd	r4, Y+11	; 0x0b
    1662:	5c 84       	ldd	r5, Y+12	; 0x0c
    1664:	6d 84       	ldd	r6, Y+13	; 0x0d
    1666:	7e 84       	ldd	r7, Y+14	; 0x0e
    1668:	84 15       	cp	r24, r4
    166a:	95 05       	cpc	r25, r5
    166c:	a6 05       	cpc	r26, r6
    166e:	b7 05       	cpc	r27, r7
    1670:	28 f4       	brcc	.+10     	; 0x167c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2f0>
          inbuffer[k-1]=inbuffer[k];
    1672:	a1 81       	ldd	r26, Z+1	; 0x01
    1674:	a1 93       	st	Z+, r26
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	ef cf       	rjmp	.-34     	; 0x165a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    167c:	6f 84       	ldd	r6, Y+15	; 0x0f
    167e:	78 88       	ldd	r7, Y+16	; 0x10
    1680:	46 0d       	add	r20, r6
    1682:	57 1d       	adc	r21, r7
    1684:	f6 01       	movw	r30, r12
    1686:	e4 0f       	add	r30, r20
    1688:	f5 1f       	adc	r31, r21
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    168e:	c3 01       	movw	r24, r6
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	8c 0d       	add	r24, r12
    1694:	9d 1d       	adc	r25, r13
    1696:	d8 01       	movw	r26, r16
    1698:	5b 96       	adiw	r26, 0x1b	; 27
    169a:	9c 93       	st	X, r25
    169c:	8e 93       	st	-X, r24
    169e:	5a 97       	sbiw	r26, 0x1a	; 26
      offset += length_st_strings;
    16a0:	7a 01       	movw	r14, r20
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    16a2:	5c 96       	adiw	r26, 0x1c	; 28
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	5d 97       	sbiw	r26, 0x1d	; 29
    16aa:	e2 0d       	add	r30, r2
    16ac:	f3 1d       	adc	r31, r3
    16ae:	a9 85       	ldd	r26, Y+9	; 0x09
    16b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    16b2:	8d 91       	ld	r24, X+
    16b4:	9c 91       	ld	r25, X
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    16ba:	bf ef       	ldi	r27, 0xFF	; 255
    16bc:	8b 1a       	sub	r8, r27
    16be:	9b 0a       	sbc	r9, r27
    16c0:	ab 0a       	sbc	r10, r27
    16c2:	bb 0a       	sbc	r11, r27
    16c4:	e2 e0       	ldi	r30, 0x02	; 2
    16c6:	2e 0e       	add	r2, r30
    16c8:	31 1c       	adc	r3, r1
    16ca:	97 cf       	rjmp	.-210    	; 0x15fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
    16cc:	c7 01       	movw	r24, r14
    16ce:	60 96       	adiw	r28, 0x10	; 16
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	9f 90       	pop	r9
    16f0:	8f 90       	pop	r8
    16f2:	7f 90       	pop	r7
    16f4:	6f 90       	pop	r6
    16f6:	5f 90       	pop	r5
    16f8:	4f 90       	pop	r4
    16fa:	3f 90       	pop	r3
    16fc:	2f 90       	pop	r2
    16fe:	08 95       	ret

00001700 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    1700:	4f 92       	push	r4
    1702:	5f 92       	push	r5
    1704:	6f 92       	push	r6
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2c 97       	sbiw	r28, 0x0c	; 12
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	7c 01       	movw	r14, r24
    1732:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
    1734:	db 01       	movw	r26, r22
    1736:	8c 91       	ld	r24, X
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	f7 01       	movw	r30, r14
    173c:	93 83       	std	Z+3, r25	; 0x03
    173e:	82 83       	std	Z+2, r24	; 0x02
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	2c 91       	ld	r18, X
    1744:	92 2b       	or	r25, r18
    1746:	93 83       	std	Z+3, r25	; 0x03
    1748:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
    174a:	6e 5f       	subi	r22, 0xFE	; 254
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	ce 01       	movw	r24, r28
    1750:	09 96       	adiw	r24, 0x09	; 9
    1752:	99 dd       	rcall	.-1230   	; 0x1286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    1754:	89 84       	ldd	r8, Y+9	; 0x09
    1756:	9a 84       	ldd	r9, Y+10	; 0x0a
    1758:	ab 84       	ldd	r10, Y+11	; 0x0b
    175a:	bc 84       	ldd	r11, Y+12	; 0x0c
    175c:	24 01       	movw	r4, r8
    175e:	35 01       	movw	r6, r10
    1760:	f6 e0       	ldi	r31, 0x06	; 6
    1762:	4f 0e       	add	r4, r31
    1764:	51 1c       	adc	r5, r1
    1766:	61 1c       	adc	r6, r1
    1768:	71 1c       	adc	r7, r1
    176a:	98 01       	movw	r18, r16
    176c:	2b 5f       	subi	r18, 0xFB	; 251
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	f9 01       	movw	r30, r18
    1772:	86 e0       	ldi	r24, 0x06	; 6
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	ac 01       	movw	r20, r24
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	44 15       	cp	r20, r4
    177e:	55 05       	cpc	r21, r5
    1780:	66 05       	cpc	r22, r6
    1782:	77 05       	cpc	r23, r7
    1784:	20 f4       	brcc	.+8      	; 0x178e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8e>
          inbuffer[k-1]=inbuffer[k];
    1786:	41 81       	ldd	r20, Z+1	; 0x01
    1788:	41 93       	st	Z+, r20
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	f4 cf       	rjmp	.-24     	; 0x1776 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
    178e:	f8 01       	movw	r30, r16
    1790:	e8 0d       	add	r30, r8
    1792:	f9 1d       	adc	r31, r9
    1794:	15 82       	std	Z+5, r1	; 0x05
      this->topic_name = (char *)(inbuffer + offset-1);
    1796:	d7 01       	movw	r26, r14
    1798:	15 96       	adiw	r26, 0x05	; 5
    179a:	3c 93       	st	X, r19
    179c:	2e 93       	st	-X, r18
    179e:	14 97       	sbiw	r26, 0x04	; 4
      offset += length_topic_name;
    17a0:	b4 01       	movw	r22, r8
    17a2:	6a 5f       	subi	r22, 0xFA	; 250
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
    17a6:	60 0f       	add	r22, r16
    17a8:	71 1f       	adc	r23, r17
    17aa:	ce 01       	movw	r24, r28
    17ac:	05 96       	adiw	r24, 0x05	; 5
    17ae:	6b dd       	rcall	.-1322   	; 0x1286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    17b0:	ba e0       	ldi	r27, 0x0A	; 10
    17b2:	8b 0e       	add	r8, r27
    17b4:	91 1c       	adc	r9, r1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    17b6:	4d 80       	ldd	r4, Y+5	; 0x05
    17b8:	5e 80       	ldd	r5, Y+6	; 0x06
    17ba:	6f 80       	ldd	r6, Y+7	; 0x07
    17bc:	78 84       	ldd	r7, Y+8	; 0x08
    17be:	a4 01       	movw	r20, r8
    17c0:	09 2c       	mov	r0, r9
    17c2:	00 0c       	add	r0, r0
    17c4:	66 0b       	sbc	r22, r22
    17c6:	77 0b       	sbc	r23, r23
    17c8:	44 0d       	add	r20, r4
    17ca:	55 1d       	adc	r21, r5
    17cc:	66 1d       	adc	r22, r6
    17ce:	77 1d       	adc	r23, r7
    17d0:	d8 01       	movw	r26, r16
    17d2:	a8 0d       	add	r26, r8
    17d4:	b9 1d       	adc	r27, r9
    17d6:	cd 01       	movw	r24, r26
    17d8:	80 1b       	sub	r24, r16
    17da:	91 0b       	sbc	r25, r17
    17dc:	5c 01       	movw	r10, r24
    17de:	c1 2c       	mov	r12, r1
    17e0:	d1 2c       	mov	r13, r1
    17e2:	a4 16       	cp	r10, r20
    17e4:	b5 06       	cpc	r11, r21
    17e6:	c6 06       	cpc	r12, r22
    17e8:	d7 06       	cpc	r13, r23
    17ea:	28 f4       	brcc	.+10     	; 0x17f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xf6>
          inbuffer[k-1]=inbuffer[k];
    17ec:	8d 91       	ld	r24, X+
    17ee:	fd 01       	movw	r30, r26
    17f0:	32 97       	sbiw	r30, 0x02	; 2
    17f2:	80 83       	st	Z, r24
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    17f4:	f0 cf       	rjmp	.-32     	; 0x17d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd6>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
    17f6:	54 01       	movw	r10, r8
    17f8:	a4 0c       	add	r10, r4
    17fa:	b5 1c       	adc	r11, r5
    17fc:	b8 01       	movw	r22, r16
    17fe:	6a 0d       	add	r22, r10
    1800:	7b 1d       	adc	r23, r11
    1802:	fb 01       	movw	r30, r22
    1804:	31 97       	sbiw	r30, 0x01	; 1
    1806:	10 82       	st	Z, r1
      this->message_type = (char *)(inbuffer + offset-1);
    1808:	c4 01       	movw	r24, r8
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	80 0f       	add	r24, r16
    180e:	91 1f       	adc	r25, r17
    1810:	f7 01       	movw	r30, r14
    1812:	97 83       	std	Z+7, r25	; 0x07
    1814:	86 83       	std	Z+6, r24	; 0x06
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	35 dd       	rcall	.-1430   	; 0x1286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    181c:	95 01       	movw	r18, r10
    181e:	2c 5f       	subi	r18, 0xFC	; 252
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	ab 81       	ldd	r26, Y+3	; 0x03
    1828:	bc 81       	ldd	r27, Y+4	; 0x04
    182a:	29 01       	movw	r4, r18
    182c:	03 2e       	mov	r0, r19
    182e:	00 0c       	add	r0, r0
    1830:	66 08       	sbc	r6, r6
    1832:	77 08       	sbc	r7, r7
    1834:	48 0e       	add	r4, r24
    1836:	59 1e       	adc	r5, r25
    1838:	6a 1e       	adc	r6, r26
    183a:	7b 1e       	adc	r7, r27
    183c:	f5 01       	movw	r30, r10
    183e:	33 96       	adiw	r30, 0x03	; 3
    1840:	e0 0f       	add	r30, r16
    1842:	f1 1f       	adc	r31, r17
    1844:	a9 01       	movw	r20, r18
    1846:	4a 01       	movw	r8, r20
    1848:	a1 2c       	mov	r10, r1
    184a:	b1 2c       	mov	r11, r1
    184c:	84 14       	cp	r8, r4
    184e:	95 04       	cpc	r9, r5
    1850:	a6 04       	cpc	r10, r6
    1852:	b7 04       	cpc	r11, r7
    1854:	28 f4       	brcc	.+10     	; 0x1860 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x160>
          inbuffer[k-1]=inbuffer[k];
    1856:	61 81       	ldd	r22, Z+1	; 0x01
    1858:	61 93       	st	Z+, r22
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    185a:	4f 5f       	subi	r20, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	f3 cf       	rjmp	.-26     	; 0x1846 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
    1860:	82 0f       	add	r24, r18
    1862:	93 1f       	adc	r25, r19
    1864:	f8 01       	movw	r30, r16
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	df 01       	movw	r26, r30
    186c:	11 97       	sbiw	r26, 0x01	; 1
    186e:	1c 92       	st	X, r1
      this->md5sum = (char *)(inbuffer + offset-1);
    1870:	21 50       	subi	r18, 0x01	; 1
    1872:	31 09       	sbc	r19, r1
    1874:	02 0f       	add	r16, r18
    1876:	13 1f       	adc	r17, r19
    1878:	d7 01       	movw	r26, r14
    187a:	19 96       	adiw	r26, 0x09	; 9
    187c:	1c 93       	st	X, r17
    187e:	0e 93       	st	-X, r16
    1880:	18 97       	sbiw	r26, 0x08	; 8
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
    1882:	21 81       	ldd	r18, Z+1	; 0x01
    1884:	42 81       	ldd	r20, Z+2	; 0x02
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	ba 01       	movw	r22, r20
    188e:	55 27       	eor	r21, r21
    1890:	44 27       	eor	r20, r20
    1892:	52 2b       	or	r21, r18
    1894:	20 81       	ld	r18, Z
    1896:	42 2b       	or	r20, r18
    1898:	23 81       	ldd	r18, Z+3	; 0x03
    189a:	72 2b       	or	r23, r18
    189c:	f7 01       	movw	r30, r14
    189e:	42 87       	std	Z+10, r20	; 0x0a
    18a0:	53 87       	std	Z+11, r21	; 0x0b
    18a2:	64 87       	std	Z+12, r22	; 0x0c
    18a4:	75 87       	std	Z+13, r23	; 0x0d
      offset += sizeof(this->buffer_size);
     return offset;
    }
    18a6:	04 96       	adiw	r24, 0x04	; 4
    18a8:	2c 96       	adiw	r28, 0x0c	; 12
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	7f 90       	pop	r7
    18ce:	6f 90       	pop	r6
    18d0:	5f 90       	pop	r5
    18d2:	4f 90       	pop	r4
    18d4:	08 95       	ret

000018d6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>:
      /********************************************************************
       * Topic Management
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
    18d6:	fc 01       	movw	r30, r24
    18d8:	ec 5e       	subi	r30, 0xEC	; 236
    18da:	fb 4f       	sbci	r31, 0xFB	; 251
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
          if(publishers[i] == 0){ // empty slot
    18e0:	41 91       	ld	r20, Z+
    18e2:	51 91       	ld	r21, Z+
    18e4:	45 2b       	or	r20, r21
    18e6:	91 f4       	brne	.+36     	; 0x190c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE+0x36>
            publishers[i] = &p;
    18e8:	f9 01       	movw	r30, r18
    18ea:	e6 5f       	subi	r30, 0xF6	; 246
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	e8 0f       	add	r30, r24
    18f4:	f9 1f       	adc	r31, r25
    18f6:	71 83       	std	Z+1, r23	; 0x01
    18f8:	60 83       	st	Z, r22
            p.id_ = i+100+MAX_SUBSCRIBERS;
    18fa:	23 58       	subi	r18, 0x83	; 131
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	fb 01       	movw	r30, r22
    1900:	36 83       	std	Z+6, r19	; 0x06
    1902:	25 83       	std	Z+5, r18	; 0x05
            p.nh_ = this;
    1904:	90 87       	std	Z+8, r25	; 0x08
    1906:	87 83       	std	Z+7, r24	; 0x07
            return true;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	08 95       	ret
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    190c:	2f 5f       	subi	r18, 0xFF	; 255
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	29 31       	cpi	r18, 0x19	; 25
    1912:	31 05       	cpc	r19, r1
    1914:	29 f7       	brne	.-54     	; 0x18e0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE+0xa>
            p.id_ = i+100+MAX_SUBSCRIBERS;
            p.nh_ = this;
            return true;
          }
        }
        return false;
    1916:	80 e0       	ldi	r24, 0x00	; 0
      }
    1918:	08 95       	ret

0000191a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	2a 97       	sbiw	r28, 0x0a	; 10
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	8c 01       	movw	r16, r24
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    1934:	8e eb       	ldi	r24, 0xBE	; 190
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
    193c:	1b 82       	std	Y+3, r1	; 0x03
    193e:	1c 82       	std	Y+4, r1	; 0x04
    1940:	1d 82       	std	Y+5, r1	; 0x05
    1942:	1e 82       	std	Y+6, r1	; 0x06
    1944:	1f 82       	std	Y+7, r1	; 0x07
    1946:	18 86       	std	Y+8, r1	; 0x08
    1948:	19 86       	std	Y+9, r1	; 0x09
    194a:	1a 86       	std	Y+10, r1	; 0x0a
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
    194c:	d8 01       	movw	r26, r16
    194e:	ed 91       	ld	r30, X+
    1950:	fc 91       	ld	r31, X
    1952:	01 90       	ld	r0, Z+
    1954:	f0 81       	ld	r31, Z
    1956:	e0 2d       	mov	r30, r0
    1958:	ae 01       	movw	r20, r28
    195a:	4f 5f       	subi	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	6a e0       	ldi	r22, 0x0A	; 10
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	c8 01       	movw	r24, r16
    1964:	19 95       	eicall
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    1966:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
        rt_time = hardware_.time();
    196a:	f8 01       	movw	r30, r16
    196c:	60 87       	std	Z+8, r22	; 0x08
    196e:	71 87       	std	Z+9, r23	; 0x09
    1970:	82 87       	std	Z+10, r24	; 0x0a
    1972:	93 87       	std	Z+11, r25	; 0x0b
      }
    1974:	2a 96       	adiw	r28, 0x0a	; 10
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>:

      void syncTime(uint8_t * data)
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	2a 97       	sbiw	r28, 0x0a	; 10
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	8c 01       	movw	r16, r24
    19b4:	5b 01       	movw	r10, r22
    19b6:	8e eb       	ldi	r24, 0xBE	; 190
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	1b 82       	std	Y+3, r1	; 0x03
    19c0:	1c 82       	std	Y+4, r1	; 0x04
    19c2:	1d 82       	std	Y+5, r1	; 0x05
    19c4:	1e 82       	std	Y+6, r1	; 0x06
    19c6:	1f 82       	std	Y+7, r1	; 0x07
    19c8:	18 86       	std	Y+8, r1	; 0x08
    19ca:	19 86       	std	Y+9, r1	; 0x09
    19cc:	1a 86       	std	Y+10, r1	; 0x0a
    19ce:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
    19d2:	f8 01       	movw	r30, r16
    19d4:	c0 84       	ldd	r12, Z+8	; 0x08
    19d6:	d1 84       	ldd	r13, Z+9	; 0x09
    19d8:	e2 84       	ldd	r14, Z+10	; 0x0a
    19da:	f3 84       	ldd	r15, Z+11	; 0x0b
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	2c 19       	sub	r18, r12
    19e2:	3d 09       	sbc	r19, r13
    19e4:	4e 09       	sbc	r20, r14
    19e6:	5f 09       	sbc	r21, r15
    19e8:	69 01       	movw	r12, r18
    19ea:	7a 01       	movw	r14, r20

        t.deserialize(data);
    19ec:	b5 01       	movw	r22, r10
    19ee:	ce 01       	movw	r24, r28
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	cb d8       	rcall	.-3690   	; 0xb8a <_ZN8std_msgs4Time11deserializeEPh>
        t.data.sec += offset/1000;
    19f4:	88 ee       	ldi	r24, 0xE8	; 232
    19f6:	88 2e       	mov	r8, r24
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	98 2e       	mov	r9, r24
    19fc:	a1 2c       	mov	r10, r1
    19fe:	b1 2c       	mov	r11, r1
    1a00:	c7 01       	movw	r24, r14
    1a02:	b6 01       	movw	r22, r12
    1a04:	a5 01       	movw	r20, r10
    1a06:	94 01       	movw	r18, r8
    1a08:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    1a0c:	cb 80       	ldd	r12, Y+3	; 0x03
    1a0e:	dc 80       	ldd	r13, Y+4	; 0x04
    1a10:	ed 80       	ldd	r14, Y+5	; 0x05
    1a12:	fe 80       	ldd	r15, Y+6	; 0x06
    1a14:	c2 0e       	add	r12, r18
    1a16:	d3 1e       	adc	r13, r19
    1a18:	e4 1e       	adc	r14, r20
    1a1a:	f5 1e       	adc	r15, r21
    1a1c:	cb 82       	std	Y+3, r12	; 0x03
    1a1e:	dc 82       	std	Y+4, r13	; 0x04
    1a20:	ed 82       	std	Y+5, r14	; 0x05
    1a22:	fe 82       	std	Y+6, r15	; 0x06
        t.data.nsec += (offset%1000)*1000000UL;
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	60 e4       	ldi	r22, 0x40	; 64
    1a2a:	72 e4       	ldi	r23, 0x42	; 66
    1a2c:	8f e0       	ldi	r24, 0x0F	; 15
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
    1a34:	cf 80       	ldd	r12, Y+7	; 0x07
    1a36:	d8 84       	ldd	r13, Y+8	; 0x08
    1a38:	e9 84       	ldd	r14, Y+9	; 0x09
    1a3a:	fa 84       	ldd	r15, Y+10	; 0x0a
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8c 0d       	add	r24, r12
    1a42:	9d 1d       	adc	r25, r13
    1a44:	ae 1d       	adc	r26, r14
    1a46:	bf 1d       	adc	r27, r15
    1a48:	8f 83       	std	Y+7, r24	; 0x07
    1a4a:	98 87       	std	Y+8, r25	; 0x08
    1a4c:	a9 87       	std	Y+9, r26	; 0x09
    1a4e:	ba 87       	std	Y+10, r27	; 0x0a
    1a50:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
    1a54:	cb 80       	ldd	r12, Y+3	; 0x03
    1a56:	dc 80       	ldd	r13, Y+4	; 0x04
    1a58:	ed 80       	ldd	r14, Y+5	; 0x05
    1a5a:	fe 80       	ldd	r15, Y+6	; 0x06
    1a5c:	31 e0       	ldi	r19, 0x01	; 1
    1a5e:	c3 1a       	sub	r12, r19
    1a60:	d1 08       	sbc	r13, r1
    1a62:	e1 08       	sbc	r14, r1
    1a64:	f1 08       	sbc	r15, r1
    1a66:	a5 01       	movw	r20, r10
    1a68:	94 01       	movw	r18, r8
    1a6a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    1a6e:	c2 1a       	sub	r12, r18
    1a70:	d3 0a       	sbc	r13, r19
    1a72:	e4 0a       	sbc	r14, r20
    1a74:	f5 0a       	sbc	r15, r21
    1a76:	f8 01       	movw	r30, r16
    1a78:	c4 86       	std	Z+12, r12	; 0x0c
    1a7a:	d5 86       	std	Z+13, r13	; 0x0d
    1a7c:	e6 86       	std	Z+14, r14	; 0x0e
    1a7e:	f7 86       	std	Z+15, r15	; 0x0f
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
    1a80:	cf 80       	ldd	r12, Y+7	; 0x07
    1a82:	d8 84       	ldd	r13, Y+8	; 0x08
    1a84:	e9 84       	ldd	r14, Y+9	; 0x09
    1a86:	fa 84       	ldd	r15, Y+10	; 0x0a
    1a88:	f6 e3       	ldi	r31, 0x36	; 54
    1a8a:	df 1a       	sub	r13, r31
    1a8c:	f5 e6       	ldi	r31, 0x65	; 101
    1a8e:	ef 0a       	sbc	r14, r31
    1a90:	f4 ec       	ldi	r31, 0xC4	; 196
    1a92:	ff 0a       	sbc	r15, r31
    1a94:	9b 01       	movw	r18, r22
    1a96:	ac 01       	movw	r20, r24
    1a98:	60 e4       	ldi	r22, 0x40	; 64
    1a9a:	72 e4       	ldi	r23, 0x42	; 66
    1a9c:	8f e0       	ldi	r24, 0x0F	; 15
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
    1aa4:	c6 1a       	sub	r12, r22
    1aa6:	d7 0a       	sbc	r13, r23
    1aa8:	e8 0a       	sbc	r14, r24
    1aaa:	f9 0a       	sbc	r15, r25
    1aac:	f8 01       	movw	r30, r16
    1aae:	c0 8a       	std	Z+16, r12	; 0x10
    1ab0:	d1 8a       	std	Z+17, r13	; 0x11
    1ab2:	e2 8a       	std	Z+18, r14	; 0x12
    1ab4:	f3 8a       	std	Z+19, r15	; 0x13
        normalizeSecNSec(sec_offset, nsec_offset);
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	60 5f       	subi	r22, 0xF0	; 240
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	c8 01       	movw	r24, r16
    1abe:	0c 96       	adiw	r24, 0x0c	; 12
    1ac0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <_ZN3ros16normalizeSecNSecERmS0_>
    1ac4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
    1ac8:	f8 01       	movw	r30, r16
    1aca:	e9 57       	subi	r30, 0x79	; 121
    1acc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ace:	60 83       	st	Z, r22
    1ad0:	71 83       	std	Z+1, r23	; 0x01
    1ad2:	82 83       	std	Z+2, r24	; 0x02
    1ad4:	93 83       	std	Z+3, r25	; 0x03
      }
    1ad6:	2a 96       	adiw	r28, 0x0a	; 10
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	08 95       	ret

00001afc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>:
       * Logging
       */

    private:
      
      void log(char byte, const char * msg){
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc+0x6>
    1b02:	1f 92       	push	r1
    1b04:	1f 92       	push	r1
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
    1b0a:	26 ed       	ldi	r18, 0xD6	; 214
    1b0c:	32 e0       	ldi	r19, 0x02	; 2
    1b0e:	3a 83       	std	Y+2, r19	; 0x02
    1b10:	29 83       	std	Y+1, r18	; 0x01
        rosserial_msgs::Log l;
        l.level= byte;
    1b12:	6b 83       	std	Y+3, r22	; 0x03
        l.msg = (char*) msg;
    1b14:	5d 83       	std	Y+5, r21	; 0x05
    1b16:	4c 83       	std	Y+4, r20	; 0x04
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
    1b18:	dc 01       	movw	r26, r24
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	01 90       	ld	r0, Z+
    1b20:	f0 81       	ld	r31, Z
    1b22:	e0 2d       	mov	r30, r0
    1b24:	ae 01       	movw	r20, r28
    1b26:	4f 5f       	subi	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	67 e0       	ldi	r22, 0x07	; 7
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	19 95       	eicall
      }
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE>:
        }
        
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
    1b40:	af 92       	push	r10
    1b42:	bf 92       	push	r11
    1b44:	cf 92       	push	r12
    1b46:	df 92       	push	r13
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
      {
        if(id >= 100 && !configured_)
    1b54:	64 36       	cpi	r22, 0x64	; 100
    1b56:	71 05       	cpc	r23, r1
    1b58:	3c f0       	brlt	.+14     	; 0x1b68 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	ee 57       	subi	r30, 0x7E	; 126
    1b5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b60:	20 81       	ld	r18, Z
    1b62:	22 23       	and	r18, r18
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    1b66:	62 c0       	rjmp	.+196    	; 0x1c2c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xec>
    1b68:	da 01       	movw	r26, r20
    1b6a:	6b 01       	movw	r12, r22
    1b6c:	ec 01       	movw	r28, r24
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
    1b6e:	bc 01       	movw	r22, r24
    1b70:	65 5e       	subi	r22, 0xE5	; 229
    1b72:	7d 4f       	sbci	r23, 0xFD	; 253
    1b74:	ed 91       	ld	r30, X+
    1b76:	fc 91       	ld	r31, X
    1b78:	01 90       	ld	r0, Z+
    1b7a:	f0 81       	ld	r31, Z
    1b7c:	e0 2d       	mov	r30, r0
    1b7e:	ca 01       	movw	r24, r20
    1b80:	19 95       	eicall
    1b82:	8c 01       	movw	r16, r24

        /* setup the header */
        message_out[0] = 0xff;
    1b84:	7e 01       	movw	r14, r28
    1b86:	2c ee       	ldi	r18, 0xEC	; 236
    1b88:	e2 1a       	sub	r14, r18
    1b8a:	2d ef       	ldi	r18, 0xFD	; 253
    1b8c:	f2 0a       	sbc	r15, r18
    1b8e:	2f ef       	ldi	r18, 0xFF	; 255
    1b90:	d7 01       	movw	r26, r14
    1b92:	2c 93       	st	X, r18
        message_out[1] = PROTOCOL_VER;
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 5e       	subi	r30, 0xEB	; 235
    1b98:	fd 4f       	sbci	r31, 0xFD	; 253
    1b9a:	2e ef       	ldi	r18, 0xFE	; 254
    1b9c:	20 83       	st	Z, r18
        message_out[2] = (uint8_t) ((uint16_t)l&255);
    1b9e:	31 96       	adiw	r30, 0x01	; 1
    1ba0:	80 83       	st	Z, r24
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
    1ba2:	31 96       	adiw	r30, 0x01	; 1
    1ba4:	90 83       	st	Z, r25
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
    1ba6:	31 96       	adiw	r30, 0x01	; 1
    1ba8:	98 0f       	add	r25, r24
    1baa:	90 95       	com	r25
    1bac:	90 83       	st	Z, r25
        message_out[5] = (uint8_t) ((int16_t)id&255);
    1bae:	31 96       	adiw	r30, 0x01	; 1
    1bb0:	c0 82       	st	Z, r12
        message_out[6] = (uint8_t) ((int16_t)id>>8);
    1bb2:	16 96       	adiw	r26, 0x06	; 6
    1bb4:	dc 92       	st	X, r13

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    1bb6:	45 e0       	ldi	r20, 0x05	; 5
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
        for(int i =5; i<l+7; i++)
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	07 96       	adiw	r24, 0x07	; 7
    1bc2:	48 17       	cp	r20, r24
    1bc4:	59 07       	cpc	r21, r25
    1bc6:	30 f4       	brcc	.+12     	; 0x1bd4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x94>
          chk += message_out[i];
    1bc8:	61 91       	ld	r22, Z+
    1bca:	26 0f       	add	r18, r22
    1bcc:	31 1d       	adc	r19, r1
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    1bce:	4f 5f       	subi	r20, 0xFF	; 255
    1bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd2:	f7 cf       	rjmp	.-18     	; 0x1bc2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x82>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
    1bd4:	08 5f       	subi	r16, 0xF8	; 248
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	8c 0f       	add	r24, r28
    1bda:	9d 1f       	adc	r25, r29
    1bdc:	fc 01       	movw	r30, r24
    1bde:	ec 5e       	subi	r30, 0xEC	; 236
    1be0:	fd 4f       	sbci	r31, 0xFD	; 253
    1be2:	20 95       	com	r18
    1be4:	20 83       	st	Z, r18

        if( l <= OUTPUT_SIZE ){
    1be6:	01 30       	cpi	r16, 0x01	; 1
    1be8:	b2 e0       	ldi	r27, 0x02	; 2
    1bea:	1b 07       	cpc	r17, r27
    1bec:	a8 f4       	brcc	.+42     	; 0x1c18 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xd8>
          hardware_.write(message_out, l);
    1bee:	68 01       	movw	r12, r16
    1bf0:	57 01       	movw	r10, r14
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
    1bf2:	c5 01       	movw	r24, r10
    1bf4:	8e 19       	sub	r24, r14
    1bf6:	9f 09       	sbc	r25, r15
    1bf8:	80 17       	cp	r24, r16
    1bfa:	91 07       	cpc	r25, r17
    1bfc:	cc f4       	brge	.+50     	; 0x1c30 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
        iostream->write(data[i]);
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	f5 01       	movw	r30, r10
    1c04:	61 91       	ld	r22, Z+
    1c06:	5f 01       	movw	r10, r30
    1c08:	dc 01       	movw	r26, r24
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	01 90       	ld	r0, Z+
    1c10:	f0 81       	ld	r31, Z
    1c12:	e0 2d       	mov	r30, r0
    1c14:	19 95       	eicall
    1c16:	ed cf       	rjmp	.-38     	; 0x1bf2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xb2>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1c18:	46 e0       	ldi	r20, 0x06	; 6
    1c1a:	52 e0       	ldi	r21, 0x02	; 2
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	ce 01       	movw	r24, r28
    1c20:	6d df       	rcall	.-294    	; 0x1afc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        if( l <= OUTPUT_SIZE ){
          hardware_.write(message_out, l);
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
    1c22:	cc 24       	eor	r12, r12
    1c24:	ca 94       	dec	r12
    1c26:	dd 24       	eor	r13, r13
    1c28:	da 94       	dec	r13
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
	  return 0;
    1c2c:	c1 2c       	mov	r12, r1
    1c2e:	d1 2c       	mov	r13, r1
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
        }
      }
    1c30:	c6 01       	movw	r24, r12
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	08 95       	ret

00001c48 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>:
          }
        }
        return false;
      }

      void negotiateTopics()
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	af 92       	push	r10
    1c52:	bf 92       	push	r11
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	66 97       	sbiw	r28, 0x16	; 22
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	8c 01       	movw	r16, r24
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    1c76:	8a ec       	ldi	r24, 0xCA	; 202
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	1c 82       	std	Y+4, r1	; 0x04
    1c80:	1b 82       	std	Y+3, r1	; 0x03
    1c82:	8e e3       	ldi	r24, 0x3E	; 62
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	98 87       	std	Y+8, r25	; 0x08
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	9a 87       	std	Y+10, r25	; 0x0a
    1c90:	89 87       	std	Y+9, r24	; 0x09
    1c92:	1b 86       	std	Y+11, r1	; 0x0b
    1c94:	1c 86       	std	Y+12, r1	; 0x0c
    1c96:	1d 86       	std	Y+13, r1	; 0x0d
    1c98:	1e 86       	std	Y+14, r1	; 0x0e
    1c9a:	68 01       	movw	r12, r16
    1c9c:	8c ee       	ldi	r24, 0xEC	; 236
    1c9e:	c8 1a       	sub	r12, r24
    1ca0:	8b ef       	ldi	r24, 0xFB	; 251
    1ca2:	d8 0a       	sbc	r13, r24
    1ca4:	78 01       	movw	r14, r16
    1ca6:	aa eb       	ldi	r26, 0xBA	; 186
    1ca8:	ea 1a       	sub	r14, r26
    1caa:	ab ef       	ldi	r26, 0xFB	; 251
    1cac:	fa 0a       	sbc	r15, r26
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
	    ti.buffer_size = OUTPUT_SIZE;
    1cae:	41 2c       	mov	r4, r1
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	59 2e       	mov	r5, r25
    1cb4:	61 2c       	mov	r6, r1
    1cb6:	71 2c       	mov	r7, r1
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
    1cb8:	f6 01       	movw	r30, r12
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	89 2b       	or	r24, r25
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x7c>
    1cc2:	5a c0       	rjmp	.+180    	; 0x1d78 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x130>
          {
	    ReadBuffer buffer;
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0f 96       	adiw	r24, 0x0f	; 15
    1cc8:	12 d9       	rcall	.-3548   	; 0xeee <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = publishers[i]->id_;
    1cca:	d6 01       	movw	r26, r12
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	85 81       	ldd	r24, Z+5	; 0x05
    1cd2:	96 81       	ldd	r25, Z+6	; 0x06
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    }
    
    // for topics
    const char * readTopicName( const Publisher * pub )
    {
      return readTopic( pub->topic_, pub->has_flash_topic_ );
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	42 81       	ldd	r20, Z+2	; 0x02
    1cde:	ce 01       	movw	r24, r28
    1ce0:	0f 96       	adiw	r24, 0x0f	; 15
    1ce2:	00 d9       	rcall	.-3584   	; 0xee4 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
    1ce8:	d6 01       	movw	r26, r12
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	83 81       	ldd	r24, Z+3	; 0x03
    1cf0:	94 81       	ldd	r25, Z+4	; 0x04
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	ed 91       	ld	r30, X+
    1cf6:	fc 91       	ld	r31, X
    1cf8:	04 80       	ldd	r0, Z+4	; 0x04
    1cfa:	f5 81       	ldd	r31, Z+5	; 0x05
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	19 95       	eicall
    }
    
    // for md5sum / msg type
    virtual const char *  readMsgInfo( const char * msg_info )
    {
      return readFromFlash( reinterpret_cast<const __FlashStringHelper*>( msg_info ) );
    1d00:	bc 01       	movw	r22, r24
    1d02:	ce 01       	movw	r24, r28
    1d04:	0f 96       	adiw	r24, 0x0f	; 15
    1d06:	ae d8       	rcall	.-3748   	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
    1d0c:	d6 01       	movw	r26, r12
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	83 81       	ldd	r24, Z+3	; 0x03
    1d14:	94 81       	ldd	r25, Z+4	; 0x04
    1d16:	dc 01       	movw	r26, r24
    1d18:	ed 91       	ld	r30, X+
    1d1a:	fc 91       	ld	r31, X
    1d1c:	06 80       	ldd	r0, Z+6	; 0x06
    1d1e:	f7 81       	ldd	r31, Z+7	; 0x07
    1d20:	e0 2d       	mov	r30, r0
    1d22:	19 95       	eicall
    1d24:	bc 01       	movw	r22, r24
    1d26:	ce 01       	movw	r24, r28
    1d28:	0f 96       	adiw	r24, 0x0f	; 15
    1d2a:	9c d8       	rcall	.-3784   	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1d2c:	9a 87       	std	Y+10, r25	; 0x0a
    1d2e:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = OUTPUT_SIZE;
    1d30:	4b 86       	std	Y+11, r4	; 0x0b
    1d32:	5c 86       	std	Y+12, r5	; 0x0c
    1d34:	6d 86       	std	Y+13, r6	; 0x0d
    1d36:	7e 86       	std	Y+14, r7	; 0x0e
    1d38:	d6 01       	movw	r26, r12
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
	    publish( publishers[i]->getEndpointType(), &ti );
    1d3e:	61 85       	ldd	r22, Z+9	; 0x09
    1d40:	72 85       	ldd	r23, Z+10	; 0x0a
    1d42:	d8 01       	movw	r26, r16
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	01 90       	ld	r0, Z+
    1d4a:	f0 81       	ld	r31, Z
    1d4c:	e0 2d       	mov	r30, r0
    1d4e:	ae 01       	movw	r20, r28
    1d50:	4f 5f       	subi	r20, 0xFF	; 255
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	c8 01       	movw	r24, r16
    1d56:	19 95       	eicall
    1d58:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    // clean up buffer here before eventually going into log
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x11c>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1d5e:	4f e3       	ldi	r20, 0x3F	; 63
    1d60:	52 e0       	ldi	r21, 0x02	; 2
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x124>
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x12a>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1d68:	43 e5       	ldi	r20, 0x53	; 83
    1d6a:	52 e0       	ldi	r21, 0x02	; 2
    1d6c:	63 e0       	ldi	r22, 0x03	; 3
    1d6e:	c8 01       	movw	r24, r16
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    1d70:	c5 de       	rcall	.-630    	; 0x1afc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
    1d72:	ce 01       	movw	r24, r28
    1d74:	0f 96       	adiw	r24, 0x0f	; 15
    1d76:	3f d8       	rcall	.-3970   	; 0xdf6 <_ZN3ros19FlashReadOutBuffer_D1Ev>
    1d78:	b2 e0       	ldi	r27, 0x02	; 2
    1d7a:	cb 0e       	add	r12, r27
    1d7c:	d1 1c       	adc	r13, r1
      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
    1d7e:	ce 14       	cp	r12, r14
    1d80:	df 04       	cpc	r13, r15
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x13e>
    1d84:	99 cf       	rjmp	.-206    	; 0x1cb8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x70>
    1d86:	68 01       	movw	r12, r16
    1d88:	e8 e8       	ldi	r30, 0x88	; 136
    1d8a:	ce 1a       	sub	r12, r30
    1d8c:	eb ef       	ldi	r30, 0xFB	; 251
    1d8e:	de 0a       	sbc	r13, r30
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
	    ti.buffer_size = INPUT_SIZE;
    1d90:	41 2c       	mov	r4, r1
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	58 2e       	mov	r5, r24
    1d96:	61 2c       	mov	r6, r1
    1d98:	71 2c       	mov	r7, r1
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
    1d9a:	d7 01       	movw	r26, r14
    1d9c:	8d 91       	ld	r24, X+
    1d9e:	9c 91       	ld	r25, X
    1da0:	89 2b       	or	r24, r25
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x15e>
          {
	    ReadBuffer buffer;
    1da4:	5d c0       	rjmp	.+186    	; 0x1e60 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x218>
    1da6:	ce 01       	movw	r24, r28
    1da8:	0f 96       	adiw	r24, 0x0f	; 15
    1daa:	a1 d8       	rcall	.-3774   	; 0xeee <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = subscribers[i]->id_;
    1dac:	d7 01       	movw	r26, r14
    1dae:	ed 91       	ld	r30, X+
    1db0:	fc 91       	ld	r31, X
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    }
    
    // for topics
    const char * readTopicName( const Subscriber_ * sub )
    {
      return readTopic( sub->topic_, sub->has_flash_topic_ );
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	64 81       	ldd	r22, Z+4	; 0x04
    1dbc:	75 81       	ldd	r23, Z+5	; 0x05
    1dbe:	46 81       	ldd	r20, Z+6	; 0x06
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0f 96       	adiw	r24, 0x0f	; 15
    1dc4:	8f d8       	rcall	.-3810   	; 0xee4 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
    1dca:	f7 01       	movw	r30, r14
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	ed 91       	ld	r30, X+
    1dd4:	fc 91       	ld	r31, X
    1dd6:	04 80       	ldd	r0, Z+4	; 0x04
    1dd8:	f5 81       	ldd	r31, Z+5	; 0x05
    1dda:	e0 2d       	mov	r30, r0
    1ddc:	19 95       	eicall
    1dde:	bc 01       	movw	r22, r24
    1de0:	ce 01       	movw	r24, r28
    1de2:	0f 96       	adiw	r24, 0x0f	; 15
    1de4:	3f d8       	rcall	.-3970   	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
    1dea:	f7 01       	movw	r30, r14
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	dc 01       	movw	r26, r24
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	06 80       	ldd	r0, Z+6	; 0x06
    1df8:	f7 81       	ldd	r31, Z+7	; 0x07
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	19 95       	eicall
    1dfe:	bc 01       	movw	r22, r24
    1e00:	ce 01       	movw	r24, r28
    1e02:	0f 96       	adiw	r24, 0x0f	; 15
    1e04:	2f d8       	rcall	.-4002   	; 0xe64 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1e06:	9a 87       	std	Y+10, r25	; 0x0a
    1e08:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = INPUT_SIZE;
    1e0a:	4b 86       	std	Y+11, r4	; 0x0b
    1e0c:	5c 86       	std	Y+12, r5	; 0x0c
    1e0e:	6d 86       	std	Y+13, r6	; 0x0d
    1e10:	7e 86       	std	Y+14, r7	; 0x0e
	    publish( subscribers[i]->getEndpointType(), &ti );
    1e12:	d8 01       	movw	r26, r16
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	a0 80       	ld	r10, Z
    1e1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	dc 01       	movw	r26, r24
    1e24:	ed 91       	ld	r30, X+
    1e26:	fc 91       	ld	r31, X
    1e28:	02 80       	ldd	r0, Z+2	; 0x02
    1e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	19 95       	eicall
    1e30:	ae 01       	movw	r20, r28
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	bc 01       	movw	r22, r24
    1e38:	c8 01       	movw	r24, r16
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	19 95       	eicall
    1e3e:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x202>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1e44:	4f e3       	ldi	r20, 0x3F	; 63
    1e46:	52 e0       	ldi	r21, 0x02	; 2
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x20a>
    1e4a:	82 30       	cpi	r24, 0x02	; 2
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1e4c:	29 f4       	brne	.+10     	; 0x1e58 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x210>
    1e4e:	43 e5       	ldi	r20, 0x53	; 83
    1e50:	52 e0       	ldi	r21, 0x02	; 2
    1e52:	63 e0       	ldi	r22, 0x03	; 3
    1e54:	c8 01       	movw	r24, r16
    1e56:	52 de       	rcall	.-860    	; 0x1afc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0f 96       	adiw	r24, 0x0f	; 15
    1e5c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN3ros19FlashReadOutBuffer_D1Ev>
    1e60:	f2 e0       	ldi	r31, 0x02	; 2
    1e62:	ef 0e       	add	r14, r31
    1e64:	f1 1c       	adc	r15, r1
	      logerror( "Buffer overflow pub" );
	    }
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
    1e66:	ce 14       	cp	r12, r14
    1e68:	df 04       	cpc	r13, r15
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x226>
    1e6c:	96 cf       	rjmp	.-212    	; 0x1d9a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x152>
	      logerror( "Buffer overflow pub" );
	    }
	  }
        }
        
        configured_ = true;
    1e6e:	f8 01       	movw	r30, r16
    1e70:	ee 57       	subi	r30, 0x7E	; 126
    1e72:	fb 4f       	sbci	r31, 0xFB	; 251
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 83       	st	Z, r24
      }
    1e78:	66 96       	adiw	r28, 0x16	; 22
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	ff 90       	pop	r15
    1e8e:	ef 90       	pop	r14
    1e90:	df 90       	pop	r13
    1e92:	cf 90       	pop	r12
    1e94:	bf 90       	pop	r11
    1e96:	af 90       	pop	r10
    1e98:	7f 90       	pop	r7
    1e9a:	6f 90       	pop	r6
    1e9c:	5f 90       	pop	r5
    1e9e:	4f 90       	pop	r4
    1ea0:	08 95       	ret

00001ea2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
    1ea2:	2f 92       	push	r2
    1ea4:	3f 92       	push	r3
    1ea6:	4f 92       	push	r4
    1ea8:	5f 92       	push	r5
    1eaa:	6f 92       	push	r6
    1eac:	7f 92       	push	r7
    1eae:	8f 92       	push	r8
    1eb0:	9f 92       	push	r9
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	60 97       	sbiw	r28, 0x10	; 16
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
    }

    unsigned long time(){return millis();}
    1eda:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
    1ede:	4b 01       	movw	r8, r22
    1ee0:	5c 01       	movw	r10, r24

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
    1ee2:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ee4:	38 89       	ldd	r19, Y+16	; 0x10
    1ee6:	29 57       	subi	r18, 0x79	; 121
    1ee8:	3b 4f       	sbci	r19, 0xFB	; 251
    1eea:	3e 83       	std	Y+6, r19	; 0x06
    1eec:	2d 83       	std	Y+5, r18	; 0x05
    1eee:	f9 01       	movw	r30, r18
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ef6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ef8:	a5 01       	movw	r20, r10
    1efa:	94 01       	movw	r18, r8
    1efc:	28 1b       	sub	r18, r24
    1efe:	39 0b       	sbc	r19, r25
    1f00:	4a 0b       	sbc	r20, r26
    1f02:	5b 0b       	sbc	r21, r27
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	89 3f       	cpi	r24, 0xF9	; 249
    1f0a:	9a 42       	sbci	r25, 0x2A	; 42
    1f0c:	a1 05       	cpc	r26, r1
    1f0e:	b1 05       	cpc	r27, r1
    1f10:	28 f0       	brcs	.+10     	; 0x1f1c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x7a>
            configured_ = false;
    1f12:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f14:	f8 89       	ldd	r31, Y+16	; 0x10
    1f16:	ee 57       	subi	r30, 0x7E	; 126
    1f18:	fb 4f       	sbci	r31, 0xFB	; 251
    1f1a:	10 82       	st	Z, r1
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
    1f1c:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f1e:	18 89       	ldd	r17, Y+16	; 0x10
    1f20:	08 58       	subi	r16, 0x88	; 136
    1f22:	1b 4f       	sbci	r17, 0xFB	; 251
    1f24:	d8 01       	movw	r26, r16
    1f26:	8d 91       	ld	r24, X+
    1f28:	9c 91       	ld	r25, X
    1f2a:	89 2b       	or	r24, r25
    1f2c:	81 f0       	breq	.+32     	; 0x1f4e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xac>
          if (c_time > last_msg_timeout_time){
    1f2e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f30:	f8 89       	ldd	r31, Y+16	; 0x10
    1f32:	e5 57       	subi	r30, 0x75	; 117
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	a2 81       	ldd	r26, Z+2	; 0x02
    1f3c:	b3 81       	ldd	r27, Z+3	; 0x03
    1f3e:	88 15       	cp	r24, r8
    1f40:	99 05       	cpc	r25, r9
    1f42:	aa 05       	cpc	r26, r10
    1f44:	bb 05       	cpc	r27, r11
    1f46:	18 f4       	brcc	.+6      	; 0x1f4e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xac>
            mode_ = MODE_FIRST_FF;
    1f48:	f8 01       	movw	r30, r16
    1f4a:	11 82       	std	Z+1, r1	; 0x01
    1f4c:	10 82       	st	Z, r1
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
    1f4e:	6f 84       	ldd	r6, Y+15	; 0x0f
    1f50:	78 88       	ldd	r7, Y+16	; 0x10
    1f52:	f0 e8       	ldi	r31, 0x80	; 128
    1f54:	6f 1a       	sub	r6, r31
    1f56:	fb ef       	ldi	r31, 0xFB	; 251
    1f58:	7f 0a       	sbc	r7, r31
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
              if(topic_ == TopicInfo::ID_PUBLISHER){
    1f5a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f5c:	38 89       	ldd	r19, Y+16	; 0x10
    1f5e:	24 58       	subi	r18, 0x84	; 132
    1f60:	3b 4f       	sbci	r19, 0xFB	; 251
    1f62:	3a 83       	std	Y+2, r19	; 0x02
    1f64:	29 83       	std	Y+1, r18	; 0x01
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
    1f66:	cf 84       	ldd	r12, Y+15	; 0x0f
    1f68:	d8 88       	ldd	r13, Y+16	; 0x10
    1f6a:	34 e1       	ldi	r19, 0x14	; 20
    1f6c:	c3 0e       	add	r12, r19
    1f6e:	d1 1c       	adc	r13, r1
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
    1f70:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f72:	58 89       	ldd	r21, Y+16	; 0x10
    1f74:	4e 57       	subi	r20, 0x7E	; 126
    1f76:	5b 4f       	sbci	r21, 0xFB	; 251
    1f78:	58 87       	std	Y+8, r21	; 0x08
    1f7a:	4f 83       	std	Y+7, r20	; 0x07
                last_sync_receive_time = c_time;
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
    1f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7e:	98 89       	ldd	r25, Y+16	; 0x10
    1f80:	80 57       	subi	r24, 0x70	; 112
    1f82:	9b 4f       	sbci	r25, 0xFB	; 251
    1f84:	9a 87       	std	Y+10, r25	; 0x0a
    1f86:	89 87       	std	Y+9, r24	; 0x09
                  param_recieved= true;
    1f88:	af 85       	ldd	r26, Y+15	; 0x0f
    1f8a:	b8 89       	ldd	r27, Y+16	; 0x10
    1f8c:	a1 57       	subi	r26, 0x71	; 113
    1f8e:	bb 4f       	sbci	r27, 0xFB	; 251
    1f90:	bc 87       	std	Y+12, r27	; 0x0c
    1f92:	ab 87       	std	Y+11, r26	; 0x0b
            mode_++;
            checksum_ = data;               /* first byte included in checksum */
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
    1f94:	ef 84       	ldd	r14, Y+15	; 0x0f
    1f96:	f8 88       	ldd	r15, Y+16	; 0x10
    1f98:	b6 e8       	ldi	r27, 0x86	; 134
    1f9a:	eb 1a       	sub	r14, r27
    1f9c:	bb ef       	ldi	r27, 0xFB	; 251
    1f9e:	fb 0a       	sbc	r15, r27
              if (configured_ == false)
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
            bytes_ = data;
            index_ = 0;
    1fa0:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fa2:	f8 89       	ldd	r31, Y+16	; 0x10
    1fa4:	e2 58       	subi	r30, 0x82	; 130
    1fa6:	fb 4f       	sbci	r31, 0xFB	; 251
    1fa8:	fc 83       	std	Y+4, r31	; 0x04
    1faa:	eb 83       	std	Y+3, r30	; 0x03
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_FIRST_FF ){
            if(data == 0xff){
              mode_++;
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    1fac:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fae:	38 89       	ldd	r19, Y+16	; 0x10
    1fb0:	25 57       	subi	r18, 0x75	; 117
    1fb2:	3b 4f       	sbci	r19, 0xFB	; 251
    1fb4:	3e 87       	std	Y+14, r19	; 0x0e
    1fb6:	2d 87       	std	Y+13, r18	; 0x0d
    1fb8:	14 01       	movw	r2, r8
    1fba:	25 01       	movw	r4, r10
    1fbc:	34 e1       	ldi	r19, 0x14	; 20
    1fbe:	23 0e       	add	r2, r19
    1fc0:	31 1c       	adc	r3, r1
    1fc2:	41 1c       	adc	r4, r1
    1fc4:	51 1c       	adc	r5, r1
    1fc6:	af 85       	ldd	r26, Y+15	; 0x0f
    1fc8:	b8 89       	ldd	r27, Y+16	; 0x10
    1fca:	12 96       	adiw	r26, 0x02	; 2
    1fcc:	8d 91       	ld	r24, X+
    1fce:	9c 91       	ld	r25, X
    1fd0:	13 97       	sbiw	r26, 0x03	; 3
      delay(3000); 
#endif
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	ed 91       	ld	r30, X+
    1fd6:	fc 91       	ld	r31, X
    1fd8:	02 84       	ldd	r0, Z+10	; 0x0a
    1fda:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fdc:	e0 2d       	mov	r30, r0
    1fde:	19 95       	eicall
    1fe0:	9c 01       	movw	r18, r24

        /* while available buffer, read data */
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
    1fe2:	97 fd       	sbrc	r25, 7
    1fe4:	22 c1       	rjmp	.+580    	; 0x222a <__stack+0x2b>
            break;
          checksum_ += data;
    1fe6:	f3 01       	movw	r30, r6
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
    1ff4:	d8 01       	movw	r26, r16
    1ff6:	4d 91       	ld	r20, X+
    1ff8:	5c 91       	ld	r21, X
    1ffa:	47 30       	cpi	r20, 0x07	; 7
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	d1 f4       	brne	.+52     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
            message_in[index_++] = data;
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	ac 01       	movw	r20, r24
    200a:	4f 5f       	subi	r20, 0xFF	; 255
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
    200e:	51 83       	std	Z+1, r21	; 0x01
    2010:	40 83       	st	Z, r20
    2012:	ef 85       	ldd	r30, Y+15	; 0x0f
    2014:	f8 89       	ldd	r31, Y+16	; 0x10
    2016:	e8 0f       	add	r30, r24
    2018:	f9 1f       	adc	r31, r25
    201a:	24 8b       	std	Z+20, r18	; 0x14
            bytes_--;
    201c:	d7 01       	movw	r26, r14
    201e:	8d 91       	ld	r24, X+
    2020:	9c 91       	ld	r25, X
    2022:	11 97       	sbiw	r26, 0x01	; 1
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	8d 93       	st	X+, r24
    2028:	9c 93       	st	X, r25
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
    202a:	89 2b       	or	r24, r25
    202c:	61 f6       	brne	.-104    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              mode_ = MODE_MSG_CHECKSUM;
    202e:	88 e0       	ldi	r24, 0x08	; 8
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	30 c0       	rjmp	.+96     	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
          }else if( mode_ == MODE_FIRST_FF ){
    2034:	41 15       	cp	r20, r1
    2036:	51 05       	cpc	r21, r1
    2038:	29 f5       	brne	.+74     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
            if(data == 0xff){
    203a:	2f 3f       	cpi	r18, 0xFF	; 255
    203c:	31 05       	cpc	r19, r1
    203e:	61 f4       	brne	.+24     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
              mode_++;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	d8 01       	movw	r26, r16
    2046:	8d 93       	st	X+, r24
    2048:	9c 93       	st	X, r25
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    204a:	ed 85       	ldd	r30, Y+13	; 0x0d
    204c:	fe 85       	ldd	r31, Y+14	; 0x0e
    204e:	20 82       	st	Z, r2
    2050:	31 82       	std	Z+1, r3	; 0x01
    2052:	42 82       	std	Z+2, r4	; 0x02
    2054:	53 82       	std	Z+3, r5	; 0x03
    2056:	b7 cf       	rjmp	.-146    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    2058:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	88 19       	sub	r24, r8
    2062:	99 09       	sbc	r25, r9
    2064:	aa 09       	sbc	r26, r10
    2066:	bb 09       	sbc	r27, r11
    2068:	06 97       	sbiw	r24, 0x06	; 6
    206a:	a1 05       	cpc	r26, r1
    206c:	b1 05       	cpc	r27, r1
    206e:	08 f4       	brcc	.+2      	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2070:	aa cf       	rjmp	.-172    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
    2072:	2f 85       	ldd	r18, Y+15	; 0x0f
    2074:	38 89       	ldd	r19, Y+16	; 0x10
    2076:	2e 57       	subi	r18, 0x7E	; 126
    2078:	3b 4f       	sbci	r19, 0xFB	; 251
    207a:	d9 01       	movw	r26, r18
    207c:	1c 92       	st	X, r1
              return -2;
    207e:	8e ef       	ldi	r24, 0xFE	; 254
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	fb c0       	rjmp	.+502    	; 0x227a <__stack+0x7b>
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
    2084:	41 30       	cpi	r20, 0x01	; 1
    2086:	51 05       	cpc	r21, r1
    2088:	a9 f4       	brne	.+42     	; 0x20b4 <__DATA_REGION_LENGTH__+0xb4>
            if(data == PROTOCOL_VER){
    208a:	2e 3f       	cpi	r18, 0xFE	; 254
    208c:	31 05       	cpc	r19, r1
    208e:	31 f4       	brne	.+12     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
              mode_++;
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	f8 01       	movw	r30, r16
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	95 cf       	rjmp	.-214    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }else{
              mode_ = MODE_FIRST_FF;
    209c:	d8 01       	movw	r26, r16
    209e:	1d 92       	st	X+, r1
    20a0:	1c 92       	st	X, r1
              if (configured_ == false)
    20a2:	ef 81       	ldd	r30, Y+7	; 0x07
    20a4:	f8 85       	ldd	r31, Y+8	; 0x08
    20a6:	80 81       	ld	r24, Z
    20a8:	81 11       	cpse	r24, r1
    20aa:	8d cf       	rjmp	.-230    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	98 89       	ldd	r25, Y+16	; 0x10
    20b0:	34 dc       	rcall	.-1944   	; 0x191a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
    20b2:	89 cf       	rjmp	.-238    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
    20b4:	42 30       	cpi	r20, 0x02	; 2
    20b6:	51 05       	cpc	r21, r1
    20b8:	81 f4       	brne	.+32     	; 0x20da <__DATA_REGION_LENGTH__+0xda>
            bytes_ = data;
    20ba:	d7 01       	movw	r26, r14
    20bc:	2d 93       	st	X+, r18
    20be:	3c 93       	st	X, r19
            index_ = 0;
    20c0:	eb 81       	ldd	r30, Y+3	; 0x03
    20c2:	fc 81       	ldd	r31, Y+4	; 0x04
    20c4:	11 82       	std	Z+1, r1	; 0x01
    20c6:	10 82       	st	Z, r1
            mode_++;
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	d8 01       	movw	r26, r16
    20ce:	8d 93       	st	X+, r24
    20d0:	9c 93       	st	X, r25
            checksum_ = data;               /* first byte for calculating size checksum */
    20d2:	f3 01       	movw	r30, r6
    20d4:	31 83       	std	Z+1, r19	; 0x01
    20d6:	20 83       	st	Z, r18
    20d8:	76 cf       	rjmp	.-276    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
    20da:	43 30       	cpi	r20, 0x03	; 3
    20dc:	51 05       	cpc	r21, r1
    20de:	69 f4       	brne	.+26     	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
            bytes_ += data<<8;
    20e0:	32 2f       	mov	r19, r18
    20e2:	22 27       	eor	r18, r18
    20e4:	d7 01       	movw	r26, r14
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	11 97       	sbiw	r26, 0x01	; 1
    20ec:	28 0f       	add	r18, r24
    20ee:	39 1f       	adc	r19, r25
    20f0:	2d 93       	st	X+, r18
    20f2:	3c 93       	st	X, r19
	    mode_++;
    20f4:	84 e0       	ldi	r24, 0x04	; 4
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	cd cf       	rjmp	.-102    	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
    20fa:	44 30       	cpi	r20, 0x04	; 4
    20fc:	51 05       	cpc	r21, r1
    20fe:	89 f4       	brne	.+34     	; 0x2122 <__DATA_REGION_LENGTH__+0x122>
            if( (checksum_%256) == 255)
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	71 e0       	ldi	r23, 0x01	; 1
    2104:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__divmodhi4>
    2108:	8f 3f       	cpi	r24, 0xFF	; 255
    210a:	91 05       	cpc	r25, r1
    210c:	31 f4       	brne	.+12     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
	      mode_++;
    210e:	85 e0       	ldi	r24, 0x05	; 5
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	d8 01       	movw	r26, r16
    2114:	8d 93       	st	X+, r24
    2116:	9c 93       	st	X, r25
    2118:	56 cf       	rjmp	.-340    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    211a:	f8 01       	movw	r30, r16
    211c:	11 82       	std	Z+1, r1	; 0x01
    211e:	10 82       	st	Z, r1
    2120:	52 cf       	rjmp	.-348    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
    2122:	45 30       	cpi	r20, 0x05	; 5
    2124:	51 05       	cpc	r21, r1
    2126:	69 f4       	brne	.+26     	; 0x2142 <__DATA_REGION_LENGTH__+0x142>
            topic_ = data;
    2128:	a9 81       	ldd	r26, Y+1	; 0x01
    212a:	ba 81       	ldd	r27, Y+2	; 0x02
    212c:	2d 93       	st	X+, r18
    212e:	3c 93       	st	X, r19
            mode_++;
    2130:	46 e0       	ldi	r20, 0x06	; 6
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	f8 01       	movw	r30, r16
    2136:	51 83       	std	Z+1, r21	; 0x01
    2138:	40 83       	st	Z, r20
            checksum_ = data;               /* first byte included in checksum */
    213a:	d3 01       	movw	r26, r6
    213c:	2d 93       	st	X+, r18
    213e:	3c 93       	st	X, r19
    2140:	42 cf       	rjmp	.-380    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
    2142:	46 30       	cpi	r20, 0x06	; 6
    2144:	51 05       	cpc	r21, r1
    2146:	99 f4       	brne	.+38     	; 0x216e <__DATA_REGION_LENGTH__+0x16e>
            topic_ += data<<8;
    2148:	32 2f       	mov	r19, r18
    214a:	22 27       	eor	r18, r18
    214c:	e9 81       	ldd	r30, Y+1	; 0x01
    214e:	fa 81       	ldd	r31, Y+2	; 0x02
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	28 0f       	add	r18, r24
    2156:	39 1f       	adc	r19, r25
    2158:	31 83       	std	Z+1, r19	; 0x01
    215a:	20 83       	st	Z, r18
            mode_ = MODE_MESSAGE;
    215c:	e7 e0       	ldi	r30, 0x07	; 7
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	d8 01       	movw	r26, r16
    2162:	ed 93       	st	X+, r30
    2164:	fc 93       	st	X, r31
            if(bytes_ == 0)
    2166:	d7 01       	movw	r26, r14
    2168:	8d 91       	ld	r24, X+
    216a:	9c 91       	ld	r25, X
    216c:	5e cf       	rjmp	.-324    	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
    216e:	48 30       	cpi	r20, 0x08	; 8
    2170:	51 05       	cpc	r21, r1
    2172:	09 f0       	breq	.+2      	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    2174:	28 cf       	rjmp	.-432    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            mode_ = MODE_FIRST_FF;
    2176:	f8 01       	movw	r30, r16
    2178:	11 82       	std	Z+1, r1	; 0x01
    217a:	10 82       	st	Z, r1
            if( (checksum_%256) == 255){
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	71 e0       	ldi	r23, 0x01	; 1
    2180:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__divmodhi4>
    2184:	8f 3f       	cpi	r24, 0xFF	; 255
    2186:	91 05       	cpc	r25, r1
    2188:	09 f0       	breq	.+2      	; 0x218c <__DATA_REGION_LENGTH__+0x18c>
    218a:	1d cf       	rjmp	.-454    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              if(topic_ == TopicInfo::ID_PUBLISHER){
    218c:	a9 81       	ldd	r26, Y+1	; 0x01
    218e:	ba 81       	ldd	r27, Y+2	; 0x02
    2190:	8d 91       	ld	r24, X+
    2192:	9c 91       	ld	r25, X
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	b9 f4       	brne	.+46     	; 0x21c6 <__DATA_REGION_LENGTH__+0x1c6>
                requestSyncTime();
    2198:	8f 85       	ldd	r24, Y+15	; 0x0f
    219a:	98 89       	ldd	r25, Y+16	; 0x10
    219c:	be db       	rcall	.-2180   	; 0x191a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
                negotiateTopics();
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	98 89       	ldd	r25, Y+16	; 0x10
    21a2:	52 dd       	rcall	.-1372   	; 0x1c48 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>
                last_sync_time = c_time;
    21a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    21a6:	f8 89       	ldd	r31, Y+16	; 0x10
    21a8:	ed 57       	subi	r30, 0x7D	; 125
    21aa:	fb 4f       	sbci	r31, 0xFB	; 251
    21ac:	80 82       	st	Z, r8
    21ae:	91 82       	std	Z+1, r9	; 0x01
    21b0:	a2 82       	std	Z+2, r10	; 0x02
    21b2:	b3 82       	std	Z+3, r11	; 0x03
                last_sync_receive_time = c_time;
    21b4:	ed 81       	ldd	r30, Y+5	; 0x05
    21b6:	fe 81       	ldd	r31, Y+6	; 0x06
    21b8:	80 82       	st	Z, r8
    21ba:	91 82       	std	Z+1, r9	; 0x01
    21bc:	a2 82       	std	Z+2, r10	; 0x02
    21be:	b3 82       	std	Z+3, r11	; 0x03
                return -1;
    21c0:	8f ef       	ldi	r24, 0xFF	; 255
    21c2:	9f ef       	ldi	r25, 0xFF	; 255
    21c4:	5a c0       	rjmp	.+180    	; 0x227a <__stack+0x7b>
              }else if(topic_ == TopicInfo::ID_TIME){
    21c6:	8a 30       	cpi	r24, 0x0A	; 10
    21c8:	91 05       	cpc	r25, r1
    21ca:	29 f4       	brne	.+10     	; 0x21d6 <__DATA_REGION_LENGTH__+0x1d6>
                syncTime(message_in);
    21cc:	b6 01       	movw	r22, r12
    21ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d0:	98 89       	ldd	r25, Y+16	; 0x10
    21d2:	db db       	rcall	.-2122   	; 0x198a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>
    21d4:	f8 ce       	rjmp	.-528    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
    21d6:	86 30       	cpi	r24, 0x06	; 6
    21d8:	91 05       	cpc	r25, r1
                  req_param_resp.deserialize(message_in);
    21da:	49 f4       	brne	.+18     	; 0x21ee <__DATA_REGION_LENGTH__+0x1ee>
    21dc:	b6 01       	movw	r22, r12
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	d4 d8       	rcall	.-3672   	; 0x138c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                  param_recieved= true;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    21e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    21ea:	8c 93       	st	X, r24
    21ec:	ec ce       	rjmp	.-552    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
    21ee:	8b 30       	cpi	r24, 0x0B	; 11
    21f0:	91 05       	cpc	r25, r1
    21f2:	21 f4       	brne	.+8      	; 0x21fc <__DATA_REGION_LENGTH__+0x1fc>
                  configured_ = false;
    21f4:	ef 81       	ldd	r30, Y+7	; 0x07
    21f6:	f8 85       	ldd	r31, Y+8	; 0x08
    21f8:	10 82       	st	Z, r1
    21fa:	e5 ce       	rjmp	.-566    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else{
                if(subscribers[topic_-100])
    21fc:	fc 01       	movw	r30, r24
    21fe:	e1 54       	subi	r30, 0x41	; 65
    2200:	fe 4f       	sbci	r31, 0xFE	; 254
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	2f 85       	ldd	r18, Y+15	; 0x0f
    2208:	38 89       	ldd	r19, Y+16	; 0x10
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	09 f4       	brne	.+2      	; 0x2218 <__stack+0x19>
    2216:	d7 ce       	rjmp	.-594    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
                  subscribers[topic_-100]->callback( message_in );
    2218:	dc 01       	movw	r26, r24
    221a:	ed 91       	ld	r30, X+
    221c:	fc 91       	ld	r31, X
    221e:	01 90       	ld	r0, Z+
    2220:	f0 81       	ld	r31, Z
    2222:	e0 2d       	mov	r30, r0
    2224:	b6 01       	movw	r22, r12
    2226:	19 95       	eicall
    2228:	ce ce       	rjmp	.-612    	; 0x1fc6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
    222a:	ef 85       	ldd	r30, Y+15	; 0x0f
    222c:	f8 89       	ldd	r31, Y+16	; 0x10
    222e:	ee 57       	subi	r30, 0x7E	; 126
    2230:	fb 4f       	sbci	r31, 0xFB	; 251
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	f9 f0       	breq	.+62     	; 0x2276 <__stack+0x77>
    2238:	0f 85       	ldd	r16, Y+15	; 0x0f
    223a:	18 89       	ldd	r17, Y+16	; 0x10
    223c:	0d 57       	subi	r16, 0x7D	; 125
    223e:	1b 4f       	sbci	r17, 0xFB	; 251
    2240:	f8 01       	movw	r30, r16
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	a2 81       	ldd	r26, Z+2	; 0x02
    2248:	b3 81       	ldd	r27, Z+3	; 0x03
    224a:	a5 01       	movw	r20, r10
    224c:	94 01       	movw	r18, r8
    224e:	28 1b       	sub	r18, r24
    2250:	39 0b       	sbc	r19, r25
    2252:	4a 0b       	sbc	r20, r26
    2254:	5b 0b       	sbc	r21, r27
    2256:	da 01       	movw	r26, r20
    2258:	c9 01       	movw	r24, r18
    225a:	85 3c       	cpi	r24, 0xC5	; 197
    225c:	99 40       	sbci	r25, 0x09	; 9
    225e:	a1 05       	cpc	r26, r1
    2260:	b1 05       	cpc	r27, r1
          requestSyncTime();
    2262:	48 f0       	brcs	.+18     	; 0x2276 <__stack+0x77>
    2264:	8f 85       	ldd	r24, Y+15	; 0x0f
    2266:	98 89       	ldd	r25, Y+16	; 0x10
    2268:	58 db       	rcall	.-2384   	; 0x191a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
          last_sync_time = c_time;
    226a:	d8 01       	movw	r26, r16
    226c:	8d 92       	st	X+, r8
    226e:	9d 92       	st	X+, r9
    2270:	ad 92       	st	X+, r10
    2272:	bc 92       	st	X, r11
    2274:	13 97       	sbiw	r26, 0x03	; 3
        }

        return 0;
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
      }
    227a:	60 96       	adiw	r28, 0x10	; 16
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	3f 90       	pop	r3
    22a8:	2f 90       	pop	r2
    22aa:	08 95       	ret

000022ac <main>:
void turnRight(DC_Motor_Driver* _motorLeft, DC_Motor_Driver* _motorRight);
void goStraight(DC_Motor_Driver* _motorLeft, DC_Motor_Driver* _motorRight);


int main()
{
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	c9 51       	subi	r28, 0x19	; 25
    22b6:	d6 40       	sbci	r29, 0x06	; 6
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
	init();
    22c2:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <init>
	
	//Setup Timers

	uint8_t motorControlTimerId = declareTimer(20, 1, Elapsed);
    22c6:	e1 2c       	mov	r14, r1
    22c8:	f1 2c       	mov	r15, r1
    22ca:	00 e0       	ldi	r16, 0x00	; 0
    22cc:	10 e0       	ldi	r17, 0x00	; 0
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	84 e1       	ldi	r24, 0x14	; 20
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	01 d7       	rcall	.+3586   	; 0x30de <_Z12declareTimerjh9timerModePFvvEjPVj>
    22dc:	cc 5e       	subi	r28, 0xEC	; 236
    22de:	d9 4f       	sbci	r29, 0xF9	; 249
    22e0:	88 83       	st	Y, r24
    22e2:	c4 51       	subi	r28, 0x14	; 20
    22e4:	d6 40       	sbci	r29, 0x06	; 6
	startTimer(motorControlTimerId);
    22e6:	3c d7       	rcall	.+3704   	; 0x3160 <_Z10startTimerh>
    22e8:	20 e0       	ldi	r18, 0x00	; 0
	
	uint8_t stuckTimerId = declareTimer(6000, 0, Elapsed);
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	80 e7       	ldi	r24, 0x70	; 112
    22f2:	97 e1       	ldi	r25, 0x17	; 23
    22f4:	f4 d6       	rcall	.+3560   	; 0x30de <_Z12declareTimerjh9timerModePFvvEjPVj>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
	//startTimer(turnTimerId);
	
	uint8_t chaosTimerId = declareTimer(59000, 0, Elapsed);
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	88 e7       	ldi	r24, 0x78	; 120
    2300:	96 ee       	ldi	r25, 0xE6	; 230
    2302:	ed d6       	rcall	.+3546   	; 0x30de <_Z12declareTimerjh9timerModePFvvEjPVj>
    2304:	20 e0       	ldi	r18, 0x00	; 0
	//startTimer(chaosTimerId);
	
	uint8_t ultraTimerId = declareTimer(200, 1, Elapsed);
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	e6 d6       	rcall	.+3532   	; 0x30de <_Z12declareTimerjh9timerModePFvvEjPVj>
    2312:	cb 5e       	subi	r28, 0xEB	; 235
    2314:	d9 4f       	sbci	r29, 0xF9	; 249
    2316:	88 83       	st	Y, r24
    2318:	c5 51       	subi	r28, 0x15	; 21
    231a:	d6 40       	sbci	r29, 0x06	; 6
	startTimer(ultraTimerId);
    231c:	21 d7       	rcall	.+3650   	; 0x3160 <_Z10startTimerh>
    231e:	82 e1       	ldi	r24, 0x12	; 18

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	8e ef       	ldi	r24, 0xFE	; 254
      /* Leonardo support */
      iostream = &Serial1;
#elif defined(USE_TEENSY_HW_SERIAL) or defined(USE_STM32_HW_SERIAL)
      iostream = &Serial1;
#else
      iostream = &Serial;
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
    232e:	80 e0       	ldi	r24, 0x00	; 0
#endif
      baud_ = 57600;
    2330:	91 ee       	ldi	r25, 0xE1	; 225
    2332:	a0 e0       	ldi	r26, 0x00	; 0
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	af 83       	std	Y+7, r26	; 0x07
    233c:	b8 87       	std	Y+8, r27	; 0x08
    233e:	cd 57       	subi	r28, 0x7D	; 125
    2340:	db 4f       	sbci	r29, 0xFB	; 251
    2342:	18 82       	st	Y, r1
    2344:	c3 58       	subi	r28, 0x83	; 131
    2346:	d4 40       	sbci	r29, 0x04	; 4
    2348:	82 ee       	ldi	r24, 0xE2	; 226
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	cf 56       	subi	r28, 0x6F	; 111
    234e:	db 4f       	sbci	r29, 0xFB	; 251
    2350:	99 83       	std	Y+1, r25	; 0x01
    2352:	88 83       	st	Y, r24
    2354:	c1 59       	subi	r28, 0x91	; 145
    2356:	d4 40       	sbci	r29, 0x04	; 4
    2358:	cd 56       	subi	r28, 0x6D	; 109
    235a:	db 4f       	sbci	r29, 0xFB	; 251
    235c:	18 82       	st	Y, r1
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	1a 82       	std	Y+2, r1	; 0x02
    2362:	1b 82       	std	Y+3, r1	; 0x03
    2364:	c3 59       	subi	r28, 0x93	; 147
    2366:	d4 40       	sbci	r29, 0x04	; 4
    2368:	c5 56       	subi	r28, 0x65	; 101
    236a:	db 4f       	sbci	r29, 0xFB	; 251
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	18 82       	st	Y, r1
    2370:	cb 59       	subi	r28, 0x9B	; 155
    2372:	d4 40       	sbci	r29, 0x04	; 4
    2374:	c3 56       	subi	r28, 0x63	; 99
    2376:	db 4f       	sbci	r29, 0xFB	; 251
    2378:	18 82       	st	Y, r1
    237a:	19 82       	std	Y+1, r1	; 0x01
    237c:	1a 82       	std	Y+2, r1	; 0x02
    237e:	1b 82       	std	Y+3, r1	; 0x03
    2380:	cd 59       	subi	r28, 0x9D	; 157
    2382:	d4 40       	sbci	r29, 0x04	; 4
    2384:	cb 55       	subi	r28, 0x5B	; 91
    2386:	db 4f       	sbci	r29, 0xFB	; 251
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	18 82       	st	Y, r1
    238c:	c5 5a       	subi	r28, 0xA5	; 165
    238e:	d4 40       	sbci	r29, 0x04	; 4
    2390:	c9 55       	subi	r28, 0x59	; 89
    2392:	db 4f       	sbci	r29, 0xFB	; 251
    2394:	18 82       	st	Y, r1
    2396:	19 82       	std	Y+1, r1	; 0x01
    2398:	1a 82       	std	Y+2, r1	; 0x02
    239a:	1b 82       	std	Y+3, r1	; 0x03
    239c:	c7 5a       	subi	r28, 0xA7	; 167
    239e:	d4 40       	sbci	r29, 0x04	; 4
    23a0:	c3 55       	subi	r28, 0x53	; 83
    23a2:	db 4f       	sbci	r29, 0xFB	; 251
    23a4:	19 82       	std	Y+1, r1	; 0x01
    23a6:	18 82       	st	Y, r1
    23a8:	cd 5a       	subi	r28, 0xAD	; 173
    23aa:	d4 40       	sbci	r29, 0x04	; 4
    23ac:	ce 01       	movw	r24, r28
    23ae:	8b 5e       	subi	r24, 0xEB	; 235
    23b0:	9b 4f       	sbci	r25, 0xFB	; 251
    23b2:	5e 01       	movw	r10, r28
    23b4:	29 eb       	ldi	r18, 0xB9	; 185
    23b6:	a2 1a       	sub	r10, r18
    23b8:	2b ef       	ldi	r18, 0xFB	; 251
    23ba:	b2 0a       	sbc	r11, r18
    23bc:	fc 01       	movw	r30, r24
    23be:	11 92       	st	Z+, r1

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
    23c0:	11 92       	st	Z+, r1
    23c2:	ae 16       	cp	r10, r30
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
    23c4:	bf 06       	cpc	r11, r31
    23c6:	d9 f7       	brne	.-10     	; 0x23be <main+0x112>
    23c8:	4e 01       	movw	r8, r28
    23ca:	37 e8       	ldi	r19, 0x87	; 135
    23cc:	83 1a       	sub	r8, r19
    23ce:	3b ef       	ldi	r19, 0xFB	; 251
    23d0:	93 0a       	sbc	r9, r19
    23d2:	f5 01       	movw	r30, r10
    23d4:	11 92       	st	Z+, r1
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
    23d6:	11 92       	st	Z+, r1
    23d8:	8e 16       	cp	r8, r30
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
    23da:	9f 06       	cpc	r9, r31
    23dc:	d9 f7       	brne	.-10     	; 0x23d4 <main+0x128>
    23de:	de 01       	movw	r26, r28
    23e0:	55 96       	adiw	r26, 0x15	; 21
    23e2:	fe 01       	movw	r30, r28
    23e4:	eb 5e       	subi	r30, 0xEB	; 235
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	1d 92       	st	X+, r1
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
    23ea:	ea 17       	cp	r30, r26
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
    23ec:	fb 07       	cpc	r31, r27
    23ee:	e1 f7       	brne	.-8      	; 0x23e8 <main+0x13c>
    23f0:	11 92       	st	Z+, r1
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
    23f2:	e8 17       	cp	r30, r24
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
    23f4:	f9 07       	cpc	r31, r25
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <main+0x144>
    23f8:	1e 01       	movw	r2, r28
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
      data(0)
    23fa:	44 ef       	ldi	r20, 0xF4	; 244
    23fc:	24 1a       	sub	r2, r20
    23fe:	49 ef       	ldi	r20, 0xF9	; 249
    2400:	34 0a       	sbc	r3, r20
    2402:	8a ef       	ldi	r24, 0xFA	; 250
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	f1 01       	movw	r30, r2
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	12 82       	std	Z+2, r1	; 0x02
    240e:	13 82       	std	Z+3, r1	; 0x03
    2410:	14 82       	std	Z+4, r1	; 0x04
    2412:	15 82       	std	Z+5, r1	; 0x05
    2414:	27 e6       	ldi	r18, 0x67	; 103
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        has_flash_topic_( false ),
        msg_(msg),
        endpoint_(endpoint) 
    2416:	32 e0       	ldi	r19, 0x02	; 2
    2418:	cf 50       	subi	r28, 0x0F	; 15
    241a:	da 4f       	sbci	r29, 0xFA	; 250
    241c:	39 83       	std	Y+1, r19	; 0x01
    241e:	28 83       	st	Y, r18
    2420:	c1 5f       	subi	r28, 0xF1	; 241
    2422:	d5 40       	sbci	r29, 0x05	; 5
    2424:	cd 50       	subi	r28, 0x0D	; 13
    2426:	da 4f       	sbci	r29, 0xFA	; 250
    2428:	18 82       	st	Y, r1
    242a:	c3 5f       	subi	r28, 0xF3	; 243
    242c:	d5 40       	sbci	r29, 0x05	; 5
    242e:	cc 50       	subi	r28, 0x0C	; 12
    2430:	da 4f       	sbci	r29, 0xFA	; 250
    2432:	39 82       	std	Y+1, r3	; 0x01
    2434:	28 82       	st	Y, r2
    2436:	c4 5f       	subi	r28, 0xF4	; 244
    2438:	d5 40       	sbci	r29, 0x05	; 5
    243a:	c6 50       	subi	r28, 0x06	; 6
    243c:	da 4f       	sbci	r29, 0xFA	; 250
    243e:	19 82       	std	Y+1, r1	; 0x01
    2440:	18 82       	st	Y, r1
    2442:	ca 5f       	subi	r28, 0xFA	; 250
    2444:	d5 40       	sbci	r29, 0x05	; 5
    2446:	70 97       	sbiw	r30, 0x10	; 16
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
      data(0)
    2448:	26 e0       	ldi	r18, 0x06	; 6
    244a:	33 e0       	ldi	r19, 0x03	; 3
    244c:	31 83       	std	Z+1, r19	; 0x01
    244e:	20 83       	st	Z, r18
    2450:	12 82       	std	Z+2, r1	; 0x02
    2452:	13 82       	std	Z+3, r1	; 0x03
    2454:	14 82       	std	Z+4, r1	; 0x04
    2456:	15 82       	std	Z+5, r1	; 0x05
    2458:	16 82       	std	Z+6, r1	; 0x06
    245a:	17 82       	std	Z+7, r1	; 0x07
    245c:	10 86       	std	Z+8, r1	; 0x08
    245e:	11 86       	std	Z+9, r1	; 0x09
    2460:	26 e7       	ldi	r18, 0x76	; 118
    2462:	32 e0       	ldi	r19, 0x02	; 2
    2464:	ca 51       	subi	r28, 0x1A	; 26
    2466:	da 4f       	sbci	r29, 0xFA	; 250
    2468:	39 83       	std	Y+1, r19	; 0x01
    246a:	28 83       	st	Y, r18
    246c:	c6 5e       	subi	r28, 0xE6	; 230
    246e:	d5 40       	sbci	r29, 0x05	; 5
    2470:	c8 51       	subi	r28, 0x18	; 24
    2472:	da 4f       	sbci	r29, 0xFA	; 250
    2474:	18 82       	st	Y, r1
    2476:	c8 5e       	subi	r28, 0xE8	; 232
    2478:	d5 40       	sbci	r29, 0x05	; 5
    247a:	c7 51       	subi	r28, 0x17	; 23
    247c:	da 4f       	sbci	r29, 0xFA	; 250
    247e:	f9 83       	std	Y+1, r31	; 0x01
    2480:	e8 83       	st	Y, r30
    2482:	c9 5e       	subi	r28, 0xE9	; 233
    2484:	d5 40       	sbci	r29, 0x05	; 5
    2486:	c1 51       	subi	r28, 0x11	; 17
    2488:	da 4f       	sbci	r29, 0xFA	; 250
    248a:	19 82       	std	Y+1, r1	; 0x01
    248c:	18 82       	st	Y, r1
    248e:	cf 5e       	subi	r28, 0xEF	; 239
    2490:	d5 40       	sbci	r29, 0x05	; 5
    2492:	3a 96       	adiw	r30, 0x0a	; 10
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	12 82       	std	Z+2, r1	; 0x02
    249a:	13 82       	std	Z+3, r1	; 0x03
    249c:	14 82       	std	Z+4, r1	; 0x04
    249e:	15 82       	std	Z+5, r1	; 0x05
    24a0:	25 e8       	ldi	r18, 0x85	; 133
    24a2:	32 e0       	ldi	r19, 0x02	; 2
    24a4:	c5 52       	subi	r28, 0x25	; 37
    24a6:	da 4f       	sbci	r29, 0xFA	; 250
    24a8:	39 83       	std	Y+1, r19	; 0x01
    24aa:	28 83       	st	Y, r18
    24ac:	cb 5d       	subi	r28, 0xDB	; 219
    24ae:	d5 40       	sbci	r29, 0x05	; 5
    24b0:	c3 52       	subi	r28, 0x23	; 35
    24b2:	da 4f       	sbci	r29, 0xFA	; 250
    24b4:	18 82       	st	Y, r1
    24b6:	cd 5d       	subi	r28, 0xDD	; 221
    24b8:	d5 40       	sbci	r29, 0x05	; 5
    24ba:	c2 52       	subi	r28, 0x22	; 34
    24bc:	da 4f       	sbci	r29, 0xFA	; 250
    24be:	f9 83       	std	Y+1, r31	; 0x01
    24c0:	e8 83       	st	Y, r30
    24c2:	ce 5d       	subi	r28, 0xDE	; 222
    24c4:	d5 40       	sbci	r29, 0x05	; 5
    24c6:	cc 51       	subi	r28, 0x1C	; 28
    24c8:	da 4f       	sbci	r29, 0xFA	; 250
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	18 82       	st	Y, r1
    24ce:	c4 5e       	subi	r28, 0xE4	; 228
    24d0:	d5 40       	sbci	r29, 0x05	; 5
    24d2:	6e 01       	movw	r12, r28
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
    24d4:	f6 e3       	ldi	r31, 0x36	; 54
    24d6:	cf 1a       	sub	r12, r31
    24d8:	fa ef       	ldi	r31, 0xFA	; 250
    24da:	df 0a       	sbc	r13, r31
    24dc:	4c e1       	ldi	r20, 0x1C	; 28
    24de:	53 e0       	ldi	r21, 0x03	; 3
    24e0:	f6 01       	movw	r30, r12
    24e2:	51 83       	std	Z+1, r21	; 0x01
    24e4:	40 83       	st	Z, r20
    24e6:	90 87       	std	Z+8, r25	; 0x08
    24e8:	87 83       	std	Z+7, r24	; 0x07
    24ea:	11 86       	std	Z+9, r1	; 0x09
    24ec:	12 86       	std	Z+10, r1	; 0x0a
    24ee:	13 86       	std	Z+11, r1	; 0x0b
    24f0:	14 86       	std	Z+12, r1	; 0x0c
    24f2:	2d e0       	ldi	r18, 0x0D	; 13
    24f4:	37 e0       	ldi	r19, 0x07	; 7
    24f6:	36 87       	std	Z+14, r19	; 0x0e
    24f8:	25 87       	std	Z+13, r18	; 0x0d
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	30 8b       	std	Z+16, r19	; 0x10
    2500:	27 87       	std	Z+15, r18	; 0x0f
    2502:	65 e9       	ldi	r22, 0x95	; 149
      {
        topic_ = topic_name;
    2504:	72 e0       	ldi	r23, 0x02	; 2
    2506:	75 83       	std	Z+5, r23	; 0x05
    2508:	64 83       	std	Z+4, r22	; 0x04
    250a:	16 82       	std	Z+6, r1	; 0x06
        has_flash_topic_ = false;
    250c:	7e 01       	movw	r14, r28
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
    250e:	f7 e4       	ldi	r31, 0x47	; 71
    2510:	ef 1a       	sub	r14, r31
    2512:	fa ef       	ldi	r31, 0xFA	; 250
    2514:	ff 0a       	sbc	r15, r31
    2516:	f7 01       	movw	r30, r14
    2518:	51 83       	std	Z+1, r21	; 0x01
    251a:	40 83       	st	Z, r20
    251c:	90 87       	std	Z+8, r25	; 0x08
    251e:	87 83       	std	Z+7, r24	; 0x07
    2520:	11 86       	std	Z+9, r1	; 0x09
    2522:	12 86       	std	Z+10, r1	; 0x0a
    2524:	13 86       	std	Z+11, r1	; 0x0b
    2526:	14 86       	std	Z+12, r1	; 0x0c
    2528:	85 e1       	ldi	r24, 0x15	; 21
    252a:	97 e0       	ldi	r25, 0x07	; 7
    252c:	96 87       	std	Z+14, r25	; 0x0e
    252e:	85 87       	std	Z+13, r24	; 0x0d
    2530:	30 8b       	std	Z+16, r19	; 0x10
    2532:	27 87       	std	Z+15, r18	; 0x0f
    2534:	87 ea       	ldi	r24, 0xA7	; 167
      {
        topic_ = topic_name;
    2536:	92 e0       	ldi	r25, 0x02	; 2
    2538:	95 83       	std	Z+5, r25	; 0x05
    253a:	84 83       	std	Z+4, r24	; 0x04
    253c:	16 82       	std	Z+6, r1	; 0x06
        has_flash_topic_ = false;
    253e:	0e 94 14 05 	call	0xa28	; 0xa28 <_Z16createEventStorev>
	ros::Subscriber<std_msgs::Int32> motorLeftVelSub("LeftWheelVelocity", &leftWheelVelCallback);
	ros::Subscriber<std_msgs::Int32> motorRightVelSub("RightWheelVelocity", &RightWheelVelCallback);
	
	
	// Init the eventStore used in main
	event_type mainStore = createEventStore();
    2542:	ce 5e       	subi	r28, 0xEE	; 238
    2544:	d9 4f       	sbci	r29, 0xF9	; 249
    2546:	99 83       	std	Y+1, r25	; 0x01
    2548:	88 83       	st	Y, r24
    254a:	c2 51       	subi	r28, 0x12	; 18
    254c:	d6 40       	sbci	r29, 0x06	; 6
    254e:	4d 81       	ldd	r20, Y+5	; 0x05
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2550:	5e 81       	ldd	r21, Y+6	; 0x06
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	26 e0       	ldi	r18, 0x06	; 6
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <_ZN14HardwareSerial5beginEmh>
    2560:	f4 01       	movw	r30, r8
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
    2562:	11 82       	std	Z+1, r1	; 0x01
    2564:	10 82       	st	Z, r1
    2566:	c5 58       	subi	r28, 0x85	; 133
        bytes_ = 0;
    2568:	db 4f       	sbci	r29, 0xFB	; 251
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	18 82       	st	Y, r1
    256e:	cb 57       	subi	r28, 0x7B	; 123
    2570:	d4 40       	sbci	r29, 0x04	; 4
    2572:	c1 58       	subi	r28, 0x81	; 129
        index_ = 0;
    2574:	db 4f       	sbci	r29, 0xFB	; 251
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	18 82       	st	Y, r1
    257a:	cf 57       	subi	r28, 0x7F	; 127
    257c:	d4 40       	sbci	r29, 0x04	; 4
    257e:	c3 58       	subi	r28, 0x83	; 131
        topic_ = 0;
    2580:	db 4f       	sbci	r29, 0xFB	; 251
    2582:	19 82       	std	Y+1, r1	; 0x01
    2584:	18 82       	st	Y, r1
    2586:	cd 57       	subi	r28, 0x7D	; 125
    2588:	d4 40       	sbci	r29, 0x04	; 4


	// Init ROS NodeHandle
	nh.initNode();
	
	nh.advertise(motorLeftTicksPub);
    258a:	be 01       	movw	r22, r28
    258c:	6f 50       	subi	r22, 0x0F	; 15
    258e:	7a 4f       	sbci	r23, 0xFA	; 250
    2590:	ce 01       	movw	r24, r28
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	a0 d9       	rcall	.-3264   	; 0x18d6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
	nh.advertise(motorRightTicksPub);
    2596:	be 01       	movw	r22, r28
    2598:	65 52       	subi	r22, 0x25	; 37
    259a:	7a 4f       	sbci	r23, 0xFA	; 250
    259c:	ce 01       	movw	r24, r28
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	9a d9       	rcall	.-3276   	; 0x18d6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
	nh.advertise(UltraDistancesPub);
    25a2:	be 01       	movw	r22, r28
    25a4:	6a 51       	subi	r22, 0x1A	; 26
    25a6:	7a 4f       	sbci	r23, 0xFA	; 250
    25a8:	ce 01       	movw	r24, r28
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	94 d9       	rcall	.-3288   	; 0x18d6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
    25ae:	f5 01       	movw	r30, r10
    25b0:	80 e0       	ldi	r24, 0x00	; 0
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	21 91       	ld	r18, Z+
          if(subscribers[i] == 0){ // empty slot
    25b6:	31 91       	ld	r19, Z+
    25b8:	23 2b       	or	r18, r19
    25ba:	99 f4       	brne	.+38     	; 0x25e2 <main+0x336>
    25bc:	fc 01       	movw	r30, r24
            subscribers[i] = static_cast<Subscriber_*>(&s);
    25be:	ed 5d       	subi	r30, 0xDD	; 221
    25c0:	fd 4f       	sbci	r31, 0xFD	; 253
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	21 e0       	ldi	r18, 0x01	; 1
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	2c 0f       	add	r18, r28
    25cc:	3d 1f       	adc	r19, r29
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	d1 82       	std	Z+1, r13	; 0x01
    25d4:	c0 82       	st	Z, r12
    25d6:	8c 59       	subi	r24, 0x9C	; 156
            s.id_ = i+100;
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	f6 01       	movw	r30, r12
    25dc:	93 83       	std	Z+3, r25	; 0x03
    25de:	82 83       	std	Z+2, r24	; 0x02
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <main+0x33e>
    25e2:	01 96       	adiw	r24, 0x01	; 1
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    25e4:	89 31       	cpi	r24, 0x19	; 25
    25e6:	91 05       	cpc	r25, r1
    25e8:	29 f7       	brne	.-54     	; 0x25b4 <main+0x308>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	f5 01       	movw	r30, r10
          if(subscribers[i] == 0){ // empty slot
    25f0:	21 91       	ld	r18, Z+
    25f2:	31 91       	ld	r19, Z+
    25f4:	5f 01       	movw	r10, r30
    25f6:	23 2b       	or	r18, r19
    25f8:	99 f4       	brne	.+38     	; 0x2620 <main+0x374>
    25fa:	fc 01       	movw	r30, r24
            subscribers[i] = static_cast<Subscriber_*>(&s);
    25fc:	ed 5d       	subi	r30, 0xDD	; 221
    25fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2600:	ee 0f       	add	r30, r30
    2602:	ff 1f       	adc	r31, r31
    2604:	21 e0       	ldi	r18, 0x01	; 1
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	2c 0f       	add	r18, r28
    260a:	3d 1f       	adc	r19, r29
    260c:	e2 0f       	add	r30, r18
    260e:	f3 1f       	adc	r31, r19
    2610:	f1 82       	std	Z+1, r15	; 0x01
    2612:	e0 82       	st	Z, r14
    2614:	8c 59       	subi	r24, 0x9C	; 156
            s.id_ = i+100;
    2616:	9f 4f       	sbci	r25, 0xFF	; 255
    2618:	f7 01       	movw	r30, r14
    261a:	93 83       	std	Z+3, r25	; 0x03
    261c:	82 83       	std	Z+2, r24	; 0x02
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <main+0x37c>
    2620:	01 96       	adiw	r24, 0x01	; 1
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    2622:	89 31       	cpi	r24, 0x19	; 25
    2624:	91 05       	cpc	r25, r1
    2626:	19 f7       	brne	.-58     	; 0x25ee <main+0x342>
    2628:	60 e0       	ldi	r22, 0x00	; 0
	nh.subscribe(motorLeftVelSub);
	nh.subscribe(motorRightVelSub);

	//Serial.begin(57900);
	
	motorLeft.setPwmDutyCycle(0);
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	8f e6       	ldi	r24, 0x6F	; 111
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    2634:	8f e6       	ldi	r24, 0x6F	; 111
	motorLeft.startMotor();
    2636:	93 e0       	ldi	r25, 0x03	; 3
    2638:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>
    263c:	60 e0       	ldi	r22, 0x00	; 0
	
	motorRight.setPwmDutyCycle(0);
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	89 e5       	ldi	r24, 0x59	; 89
    2642:	93 e0       	ldi	r25, 0x03	; 3
    2644:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    2648:	89 e5       	ldi	r24, 0x59	; 89
	motorRight.startMotor();
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>
    2650:	47 e3       	ldi	r20, 0x37	; 55
	
	Encoder_Tracker Tracker_MotorLeft = Encoder_Tracker(50, PPR_MOTOR_LEFT);
    2652:	54 e0       	ldi	r21, 0x04	; 4
    2654:	62 e3       	ldi	r22, 0x32	; 50
    2656:	ce 01       	movw	r24, r28
    2658:	82 58       	subi	r24, 0x82	; 130
    265a:	9a 4f       	sbci	r25, 0xFA	; 250
    265c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN15Encoder_TrackerC1Ehj>
    2660:	1f 92       	push	r1
	PidController PID_MotorLeft = PidController(0.122, 0.200, 0, 20, MIN_ERROR_MOTOR_LEFT, MAX_ERROR_MOTOR_LEFT, MIN_CONTROL_VALUE_MOTOR_LEFT, MAX_CONTROL_VALUE_MOTOR_LEFT); //(0.03, 0.011, 0.0, 20, 0, 7269, 730, 7999)
    2662:	1f 92       	push	r1
    2664:	ff e1       	ldi	r31, 0x1F	; 31
    2666:	ff 93       	push	r31
    2668:	2f e3       	ldi	r18, 0x3F	; 63
    266a:	2f 93       	push	r18
    266c:	bb 24       	eor	r11, r11
    266e:	ba 94       	dec	r11
    2670:	bf 92       	push	r11
    2672:	bf 92       	push	r11
    2674:	80 ee       	ldi	r24, 0xE0	; 224
    2676:	48 2e       	mov	r4, r24
    2678:	4f 92       	push	r4
    267a:	91 ec       	ldi	r25, 0xC1	; 193
    267c:	59 2e       	mov	r5, r25
    267e:	5f 92       	push	r5
    2680:	1f 92       	push	r1
    2682:	23 e0       	ldi	r18, 0x03	; 3
    2684:	62 2e       	mov	r6, r18
    2686:	6f 92       	push	r6
    2688:	3a e4       	ldi	r19, 0x4A	; 74
    268a:	73 2e       	mov	r7, r19
    268c:	7f 92       	push	r7
    268e:	48 ef       	ldi	r20, 0xF8	; 248
    2690:	84 2e       	mov	r8, r20
    2692:	8f 92       	push	r8
    2694:	bf 92       	push	r11
    2696:	5c ef       	ldi	r21, 0xFC	; 252
    2698:	95 2e       	mov	r9, r21
    269a:	9f 92       	push	r9
    269c:	35 eb       	ldi	r19, 0xB5	; 181
    269e:	3f 93       	push	r19
    26a0:	48 e0       	ldi	r20, 0x08	; 8
    26a2:	4f 93       	push	r20
    26a4:	64 e1       	ldi	r22, 0x14	; 20
    26a6:	a6 2e       	mov	r10, r22
    26a8:	c1 2c       	mov	r12, r1
    26aa:	d1 2c       	mov	r13, r1
    26ac:	76 01       	movw	r14, r12
    26ae:	0d ec       	ldi	r16, 0xCD	; 205
    26b0:	1c ec       	ldi	r17, 0xCC	; 204
    26b2:	2c e4       	ldi	r18, 0x4C	; 76
    26b4:	3e e3       	ldi	r19, 0x3E	; 62
    26b6:	43 e2       	ldi	r20, 0x23	; 35
    26b8:	5b ed       	ldi	r21, 0xDB	; 219
    26ba:	69 ef       	ldi	r22, 0xF9	; 249
    26bc:	7d e3       	ldi	r23, 0x3D	; 61
    26be:	ce 01       	movw	r24, r28
    26c0:	87 50       	subi	r24, 0x07	; 7
    26c2:	9b 4f       	sbci	r25, 0xFB	; 251
    26c4:	8c d1       	rcall	.+792    	; 0x29de <_ZN13PidControllerC1Efffhllll>
    26c6:	47 e3       	ldi	r20, 0x37	; 55
	
	Encoder_Tracker Tracker_MotorRight = Encoder_Tracker(50, PPR_MOTOR_RIGHT);
    26c8:	54 e0       	ldi	r21, 0x04	; 4
    26ca:	62 e3       	ldi	r22, 0x32	; 50
    26cc:	ce 01       	movw	r24, r28
    26ce:	8d 5b       	subi	r24, 0xBD	; 189
    26d0:	9a 4f       	sbci	r25, 0xFA	; 250
    26d2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN15Encoder_TrackerC1Ehj>
    26d6:	1f 92       	push	r1
	PidController PID_MotorRight = PidController(0.122, 0.200, 0, 20, MIN_ERROR_MOTOR_RIGHT, MAX_ERROR_MOTOR_RIGHT, MIN_CONTROL_VALUE_MOTOR_RIGHT, MAX_CONTROL_VALUE_MOTOR_RIGHT); //(0.050, 0.009, 0.0, 20, 0, 7269, 730, 7999)
    26d8:	1f 92       	push	r1
    26da:	5f e1       	ldi	r21, 0x1F	; 31
    26dc:	5f 93       	push	r21
    26de:	6f e3       	ldi	r22, 0x3F	; 63
    26e0:	6f 93       	push	r22
    26e2:	bf 92       	push	r11
    26e4:	bf 92       	push	r11
    26e6:	4f 92       	push	r4
    26e8:	5f 92       	push	r5
    26ea:	1f 92       	push	r1
    26ec:	6f 92       	push	r6
    26ee:	7f 92       	push	r7
    26f0:	8f 92       	push	r8
    26f2:	bf 92       	push	r11
    26f4:	9f 92       	push	r9
    26f6:	85 eb       	ldi	r24, 0xB5	; 181
    26f8:	8f 93       	push	r24
    26fa:	98 e0       	ldi	r25, 0x08	; 8
    26fc:	9f 93       	push	r25
    26fe:	0d ec       	ldi	r16, 0xCD	; 205
    2700:	1c ec       	ldi	r17, 0xCC	; 204
    2702:	2c e4       	ldi	r18, 0x4C	; 76
    2704:	3e e3       	ldi	r19, 0x3E	; 62
    2706:	43 e2       	ldi	r20, 0x23	; 35
    2708:	5b ed       	ldi	r21, 0xDB	; 219
    270a:	69 ef       	ldi	r22, 0xF9	; 249
    270c:	7d e3       	ldi	r23, 0x3D	; 61
    270e:	ce 01       	movw	r24, r28
    2710:	81 55       	subi	r24, 0x51	; 81
    2712:	9b 4f       	sbci	r25, 0xFB	; 251
    2714:	64 d1       	rcall	.+712    	; 0x29de <_ZN13PidControllerC1Efffhllll>
    2716:	0f b6       	in	r0, 0x3f	; 63
	
	motorLeft.setTargetRPM(0);
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	ba 01       	movw	r22, r20
    2726:	8f e6       	ldi	r24, 0x6F	; 111
    2728:	93 e0       	ldi	r25, 0x03	; 3
    272a:	0e 94 43 01 	call	0x286	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
    272e:	40 e0       	ldi	r20, 0x00	; 0
	motorRight.setTargetRPM(0);
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	ba 01       	movw	r22, r20
    2734:	89 e5       	ldi	r24, 0x59	; 89
    2736:	93 e0       	ldi	r25, 0x03	; 3
    2738:	0e 94 43 01 	call	0x286	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
	int8_t turning = 0;
	uint8_t mode = TELEOP_MODE;
	
	while(1)
	{
		if(timerElapsed(motorControlTimerId))
    273c:	cc 5e       	subi	r28, 0xEC	; 236
    273e:	d9 4f       	sbci	r29, 0xF9	; 249
    2740:	88 81       	ld	r24, Y
    2742:	c4 51       	subi	r28, 0x14	; 20
    2744:	d6 40       	sbci	r29, 0x06	; 6
    2746:	28 d5       	rcall	.+2640   	; 0x3198 <_Z12timerElapsedh>
    2748:	88 23       	and	r24, r24
    274a:	09 f4       	brne	.+2      	; 0x274e <main+0x4a2>
    274c:	94 c0       	rjmp	.+296    	; 0x2876 <main+0x5ca>
		{
			clearTimerElapsed(motorControlTimerId);
    274e:	cc 5e       	subi	r28, 0xEC	; 236
    2750:	d9 4f       	sbci	r29, 0xF9	; 249
    2752:	88 81       	ld	r24, Y
    2754:	c4 51       	subi	r28, 0x14	; 20
    2756:	d6 40       	sbci	r29, 0x06	; 6
    2758:	28 d5       	rcall	.+2640   	; 0x31aa <_Z17clearTimerElapsedh>
    275a:	8f e6       	ldi	r24, 0x6F	; 111
			
			int32_t ticksLeft = motorLeft.getEncoderCount();
    275c:	93 e0       	ldi	r25, 0x03	; 3
    275e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN15DC_Motor_Driver15getEncoderCountEv>
    2762:	4b 01       	movw	r8, r22
    2764:	5c 01       	movw	r10, r24
    2766:	89 e5       	ldi	r24, 0x59	; 89
			int32_t ticksRight = motorRight.getEncoderCount();
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN15DC_Motor_Driver15getEncoderCountEv>
    276e:	2b 01       	movw	r4, r22
    2770:	3c 01       	movw	r6, r24
    2772:	b5 01       	movw	r22, r10
			Tracker_MotorLeft.Track(ticksLeft);
    2774:	a4 01       	movw	r20, r8
    2776:	ce 01       	movw	r24, r28
    2778:	82 58       	subi	r24, 0x82	; 130
    277a:	9a 4f       	sbci	r25, 0xFA	; 250
    277c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN15Encoder_Tracker5TrackEl>
    2780:	b3 01       	movw	r22, r6
			Tracker_MotorRight.Track(ticksRight);			
    2782:	a2 01       	movw	r20, r4
    2784:	ce 01       	movw	r24, r28
    2786:	8d 5b       	subi	r24, 0xBD	; 189
    2788:	9a 4f       	sbci	r25, 0xFA	; 250
    278a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN15Encoder_Tracker5TrackEl>
    278e:	8f e6       	ldi	r24, 0x6F	; 111
			
			int32_t error_motor_left = motorLeft.getTargetPPM()-Tracker_MotorLeft.getPPM();
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN15DC_Motor_Driver12getTargetPPMEv>
    2796:	6b 01       	movw	r12, r22
    2798:	7c 01       	movw	r14, r24
    279a:	ce 01       	movw	r24, r28
    279c:	82 58       	subi	r24, 0x82	; 130
    279e:	9a 4f       	sbci	r25, 0xFA	; 250
    27a0:	0e 94 38 04 	call	0x870	; 0x870 <_ZN15Encoder_Tracker6getPPMEv>
    27a4:	a7 01       	movw	r20, r14
    27a6:	96 01       	movw	r18, r12
    27a8:	26 1b       	sub	r18, r22
    27aa:	37 0b       	sbc	r19, r23
    27ac:	48 0b       	sbc	r20, r24
    27ae:	59 0b       	sbc	r21, r25
    27b0:	ca 5e       	subi	r28, 0xEA	; 234
    27b2:	d9 4f       	sbci	r29, 0xF9	; 249
    27b4:	28 83       	st	Y, r18
    27b6:	39 83       	std	Y+1, r19	; 0x01
    27b8:	4a 83       	std	Y+2, r20	; 0x02
    27ba:	5b 83       	std	Y+3, r21	; 0x03
    27bc:	c6 51       	subi	r28, 0x16	; 22
    27be:	d6 40       	sbci	r29, 0x06	; 6
    27c0:	89 e5       	ldi	r24, 0x59	; 89
			int32_t error_motor_right = motorRight.getTargetPPM()-Tracker_MotorRight.getPPM();
    27c2:	93 e0       	ldi	r25, 0x03	; 3
    27c4:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN15DC_Motor_Driver12getTargetPPMEv>
    27c8:	6b 01       	movw	r12, r22
    27ca:	7c 01       	movw	r14, r24
    27cc:	ce 01       	movw	r24, r28
    27ce:	8d 5b       	subi	r24, 0xBD	; 189
    27d0:	9a 4f       	sbci	r25, 0xFA	; 250
    27d2:	0e 94 38 04 	call	0x870	; 0x870 <_ZN15Encoder_Tracker6getPPMEv>
    27d6:	c6 1a       	sub	r12, r22
    27d8:	d7 0a       	sbc	r13, r23
    27da:	e8 0a       	sbc	r14, r24
    27dc:	f9 0a       	sbc	r15, r25
			
			motorLeft.setPwmDutyCycle(PID_MotorLeft.Control(error_motor_left)); //1650
    27de:	ca 5e       	subi	r28, 0xEA	; 234
    27e0:	d9 4f       	sbci	r29, 0xF9	; 249
    27e2:	48 81       	ld	r20, Y
    27e4:	59 81       	ldd	r21, Y+1	; 0x01
    27e6:	6a 81       	ldd	r22, Y+2	; 0x02
    27e8:	7b 81       	ldd	r23, Y+3	; 0x03
    27ea:	c6 51       	subi	r28, 0x16	; 22
    27ec:	d6 40       	sbci	r29, 0x06	; 6
    27ee:	ce 01       	movw	r24, r28
    27f0:	87 50       	subi	r24, 0x07	; 7
    27f2:	9b 4f       	sbci	r25, 0xFB	; 251
    27f4:	63 d1       	rcall	.+710    	; 0x2abc <_ZN13PidController7ControlEl>
    27f6:	bc 01       	movw	r22, r24
    27f8:	8f e6       	ldi	r24, 0x6F	; 111
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
			motorRight.setPwmDutyCycle(PID_MotorRight.Control(error_motor_right)); //1420
    2800:	b7 01       	movw	r22, r14
    2802:	a6 01       	movw	r20, r12
    2804:	ce 01       	movw	r24, r28
    2806:	81 55       	subi	r24, 0x51	; 81
    2808:	9b 4f       	sbci	r25, 0xFB	; 251
    280a:	58 d1       	rcall	.+688    	; 0x2abc <_ZN13PidController7ControlEl>
    280c:	bc 01       	movw	r22, r24
    280e:	89 e5       	ldi	r24, 0x59	; 89
    2810:	93 e0       	ldi	r25, 0x03	; 3
    2812:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    2816:	f1 01       	movw	r30, r2
			
			motorLeftTicksMsg.data = ticksLeft;
    2818:	82 82       	std	Z+2, r8	; 0x02
    281a:	93 82       	std	Z+3, r9	; 0x03
    281c:	a4 82       	std	Z+4, r10	; 0x04
    281e:	b5 82       	std	Z+5, r11	; 0x05
    2820:	70 94       	com	r7
			motorRightTicksMsg.data = -ticksRight;
    2822:	60 94       	com	r6
    2824:	50 94       	com	r5
    2826:	40 94       	com	r4
    2828:	41 1c       	adc	r4, r1
    282a:	51 1c       	adc	r5, r1
    282c:	61 1c       	adc	r6, r1
    282e:	71 1c       	adc	r7, r1
    2830:	c8 5f       	subi	r28, 0xF8	; 248
    2832:	d9 4f       	sbci	r29, 0xF9	; 249
    2834:	48 82       	st	Y, r4
    2836:	59 82       	std	Y+1, r5	; 0x01
    2838:	6a 82       	std	Y+2, r6	; 0x02
    283a:	7b 82       	std	Y+3, r7	; 0x03
    283c:	c8 50       	subi	r28, 0x08	; 8
    283e:	d6 40       	sbci	r29, 0x06	; 6
    2840:	b1 01       	movw	r22, r2
			
			motorLeftTicksPub.publish(&motorLeftTicksMsg);
    2842:	ce 01       	movw	r24, r28
    2844:	8f 50       	subi	r24, 0x0F	; 15
    2846:	9a 4f       	sbci	r25, 0xFA	; 250
    2848:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    284c:	be 01       	movw	r22, r28
			motorRightTicksPub.publish(&motorRightTicksMsg);
    284e:	6a 5f       	subi	r22, 0xFA	; 250
    2850:	79 4f       	sbci	r23, 0xF9	; 249
    2852:	ce 01       	movw	r24, r28
    2854:	85 52       	subi	r24, 0x25	; 37
    2856:	9a 4f       	sbci	r25, 0xFA	; 250
    2858:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
			
			motorLeftMsg.data = Tracker_MotorLeft.getRPM();
    285c:	ce 01       	movw	r24, r28
    285e:	82 58       	subi	r24, 0x82	; 130
    2860:	9a 4f       	sbci	r25, 0xFA	; 250
    2862:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN15Encoder_Tracker6getRPMEv>
			motorRightMsg.data = Tracker_MotorRight.getRPM();
    2866:	ce 01       	movw	r24, r28
    2868:	8d 5b       	subi	r24, 0xBD	; 189
    286a:	9a 4f       	sbci	r25, 0xFA	; 250
    286c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN15Encoder_Tracker6getRPMEv>
			
			nh.spinOnce();
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
		}
			
			
			
		
		if (timerElapsed(ultraTimerId))
    2874:	16 db       	rcall	.-2516   	; 0x1ea2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>
    2876:	cb 5e       	subi	r28, 0xEB	; 235
    2878:	d9 4f       	sbci	r29, 0xF9	; 249
    287a:	88 81       	ld	r24, Y
    287c:	c5 51       	subi	r28, 0x15	; 21
    287e:	d6 40       	sbci	r29, 0x06	; 6
    2880:	8b d4       	rcall	.+2326   	; 0x3198 <_Z12timerElapsedh>
		{
			clearTimerElapsed(ultraTimerId);
    2882:	88 23       	and	r24, r24
    2884:	09 f4       	brne	.+2      	; 0x2888 <main+0x5dc>
    2886:	5a cf       	rjmp	.-332    	; 0x273c <main+0x490>
    2888:	cb 5e       	subi	r28, 0xEB	; 235
    288a:	d9 4f       	sbci	r29, 0xF9	; 249
    288c:	88 81       	ld	r24, Y
			ultraLeft.pullTrigger();
    288e:	c5 51       	subi	r28, 0x15	; 21
    2890:	d6 40       	sbci	r29, 0x06	; 6
    2892:	8b d4       	rcall	.+2326   	; 0x31aa <_Z17clearTimerElapsedh>
			ultraMiddle.pullTrigger();
    2894:	80 e5       	ldi	r24, 0x50	; 80
    2896:	93 e0       	ldi	r25, 0x03	; 3
    2898:	16 d5       	rcall	.+2604   	; 0x32c6 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
			ultraRight.pullTrigger();
    289a:	87 e4       	ldi	r24, 0x47	; 71
    289c:	93 e0       	ldi	r25, 0x03	; 3
    289e:	13 d5       	rcall	.+2598   	; 0x32c6 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
    28a0:	8e e3       	ldi	r24, 0x3E	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28a2:	93 e0       	ldi	r25, 0x03	; 3
    28a4:	10 d5       	rcall	.+2592   	; 0x32c6 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
    28a6:	f5 e3       	ldi	r31, 0x35	; 53
			_delay_us(10);
			ultraLeft.stopTriggering();
    28a8:	fa 95       	dec	r31
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <main+0x5fc>
    28ac:	00 00       	nop
			ultraMiddle.stopTriggering();
    28ae:	80 e5       	ldi	r24, 0x50	; 80
    28b0:	93 e0       	ldi	r25, 0x03	; 3
    28b2:	1c d5       	rcall	.+2616   	; 0x32ec <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    28b4:	87 e4       	ldi	r24, 0x47	; 71
			ultraRight.stopTriggering();
    28b6:	93 e0       	ldi	r25, 0x03	; 3
    28b8:	19 d5       	rcall	.+2610   	; 0x32ec <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    28ba:	8e e3       	ldi	r24, 0x3E	; 62
    28bc:	93 e0       	ldi	r25, 0x03	; 3
			
			int64_t distLeft = ultraLeft.getDistance();
    28be:	16 d5       	rcall	.+2604   	; 0x32ec <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    28c0:	80 e5       	ldi	r24, 0x50	; 80
    28c2:	93 e0       	ldi	r25, 0x03	; 3
    28c4:	28 d5       	rcall	.+2640   	; 0x3316 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    28c6:	e9 2e       	mov	r14, r25
    28c8:	d8 2e       	mov	r13, r24
    28ca:	f9 2e       	mov	r15, r25
    28cc:	ff 0c       	add	r15, r15
    28ce:	ff 08       	sbc	r15, r15
			int64_t distMiddle = ultraMiddle.getDistance();
    28d0:	87 e4       	ldi	r24, 0x47	; 71
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	20 d5       	rcall	.+2624   	; 0x3316 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    28d6:	b8 2e       	mov	r11, r24
    28d8:	c9 2e       	mov	r12, r25
    28da:	8e e3       	ldi	r24, 0x3E	; 62
			int64_t distRight = ultraRight.getDistance();
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	1b d5       	rcall	.+2614   	; 0x3316 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    28e0:	78 2e       	mov	r7, r24
    28e2:	89 2e       	mov	r8, r25
    28e4:	2b 2d       	mov	r18, r11
    28e6:	9c 2d       	mov	r25, r12
			// Save 
			int64_t distancesUltra = distLeft;
			distancesUltra |= (distMiddle << 16);
			distancesUltra |= (distRight << 32);
			
			UltraDistancesMsg.data = distancesUltra;
    28e8:	99 0f       	add	r25, r25
    28ea:	99 0b       	sbc	r25, r25
    28ec:	3c 2d       	mov	r19, r12
    28ee:	49 2f       	mov	r20, r25
    28f0:	59 2f       	mov	r21, r25
    28f2:	69 2f       	mov	r22, r25
    28f4:	79 2f       	mov	r23, r25
    28f6:	89 2f       	mov	r24, r25
    28f8:	00 e1       	ldi	r16, 0x10	; 16
    28fa:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__ashldi3>
    28fe:	92 2e       	mov	r9, r18
    2900:	a3 2e       	mov	r10, r19
    2902:	b4 2e       	mov	r11, r20
    2904:	c5 2e       	mov	r12, r21
    2906:	b6 2f       	mov	r27, r22
    2908:	a7 2f       	mov	r26, r23
    290a:	fc 01       	movw	r30, r24
    290c:	27 2d       	mov	r18, r7
    290e:	98 2d       	mov	r25, r8
    2910:	99 0f       	add	r25, r25
    2912:	99 0b       	sbc	r25, r25
    2914:	38 2d       	mov	r19, r8
    2916:	49 2f       	mov	r20, r25
    2918:	59 2f       	mov	r21, r25
    291a:	69 2f       	mov	r22, r25
    291c:	79 2f       	mov	r23, r25
    291e:	89 2f       	mov	r24, r25
    2920:	00 e2       	ldi	r16, 0x20	; 32
    2922:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__ashldi3>
    2926:	92 2a       	or	r9, r18
    2928:	a3 2a       	or	r10, r19
    292a:	4b 29       	or	r20, r11
    292c:	5c 29       	or	r21, r12
    292e:	6b 2b       	or	r22, r27
    2930:	7a 2b       	or	r23, r26
    2932:	8e 2b       	or	r24, r30
    2934:	9f 2b       	or	r25, r31
    2936:	d9 28       	or	r13, r9
    2938:	ea 28       	or	r14, r10
    293a:	4f 29       	or	r20, r15
    293c:	5f 29       	or	r21, r15
    293e:	6f 29       	or	r22, r15
    2940:	7f 29       	or	r23, r15
    2942:	e8 2f       	mov	r30, r24
    2944:	ef 29       	or	r30, r15
    2946:	f9 2a       	or	r15, r25
    2948:	c2 50       	subi	r28, 0x02	; 2
    294a:	da 4f       	sbci	r29, 0xFA	; 250
    294c:	d8 82       	st	Y, r13
    294e:	ce 5f       	subi	r28, 0xFE	; 254
    2950:	d5 40       	sbci	r29, 0x05	; 5
    2952:	c1 50       	subi	r28, 0x01	; 1
    2954:	da 4f       	sbci	r29, 0xFA	; 250
    2956:	e8 82       	st	Y, r14
    2958:	cf 5f       	subi	r28, 0xFF	; 255
    295a:	d5 40       	sbci	r29, 0x05	; 5
    295c:	c0 50       	subi	r28, 0x00	; 0
    295e:	da 4f       	sbci	r29, 0xFA	; 250
    2960:	48 83       	st	Y, r20
    2962:	c0 50       	subi	r28, 0x00	; 0
    2964:	d6 40       	sbci	r29, 0x06	; 6
    2966:	cf 5f       	subi	r28, 0xFF	; 255
    2968:	d9 4f       	sbci	r29, 0xF9	; 249
    296a:	58 83       	st	Y, r21
    296c:	c1 50       	subi	r28, 0x01	; 1
    296e:	d6 40       	sbci	r29, 0x06	; 6
    2970:	ce 5f       	subi	r28, 0xFE	; 254
    2972:	d9 4f       	sbci	r29, 0xF9	; 249
    2974:	68 83       	st	Y, r22
    2976:	c2 50       	subi	r28, 0x02	; 2
    2978:	d6 40       	sbci	r29, 0x06	; 6
    297a:	cd 5f       	subi	r28, 0xFD	; 253
    297c:	d9 4f       	sbci	r29, 0xF9	; 249
    297e:	78 83       	st	Y, r23
    2980:	c3 50       	subi	r28, 0x03	; 3
    2982:	d6 40       	sbci	r29, 0x06	; 6
    2984:	cc 5f       	subi	r28, 0xFC	; 252
    2986:	d9 4f       	sbci	r29, 0xF9	; 249
    2988:	e8 83       	st	Y, r30
    298a:	c4 50       	subi	r28, 0x04	; 4
    298c:	d6 40       	sbci	r29, 0x06	; 6
    298e:	cb 5f       	subi	r28, 0xFB	; 251
    2990:	d9 4f       	sbci	r29, 0xF9	; 249
    2992:	f8 82       	st	Y, r15
    2994:	c5 50       	subi	r28, 0x05	; 5
    2996:	d6 40       	sbci	r29, 0x06	; 6
    2998:	be 01       	movw	r22, r28
    299a:	64 50       	subi	r22, 0x04	; 4
			
			UltraDistancesPub.publish(&UltraDistancesMsg);
    299c:	7a 4f       	sbci	r23, 0xFA	; 250
    299e:	ce 01       	movw	r24, r28
    29a0:	8a 51       	subi	r24, 0x1A	; 26
    29a2:	9a 4f       	sbci	r25, 0xFA	; 250
    29a4:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    29a8:	c9 ce       	rjmp	.-622    	; 0x273c <main+0x490>

000029aa <_GLOBAL__sub_I_motorLeft>:
    29aa:	47 e3       	ldi	r20, 0x37	; 55
    29ac:	54 e0       	ldi	r21, 0x04	; 4
#include "Ultra_Sonic_Range_Finder_Driver.h"
#include "PidController.h";


// Create Motor Instances
DC_Motor_Driver motorLeft(PWM_0, PPR_MOTOR_LEFT);	
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	8f e6       	ldi	r24, 0x6F	; 111
    29b2:	93 e0       	ldi	r25, 0x03	; 3
    29b4:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN15DC_Motor_DriverC1Ehj>
DC_Motor_Driver motorRight(PWM_1, PPR_MOTOR_RIGHT);
    29b8:	47 e3       	ldi	r20, 0x37	; 55
    29ba:	54 e0       	ldi	r21, 0x04	; 4
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	89 e5       	ldi	r24, 0x59	; 89
    29c0:	93 e0       	ldi	r25, 0x03	; 3
    29c2:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN15DC_Motor_DriverC1Ehj>

// Create UltraSonic Instances
Ultra_Sonic_Range_Finder_Driver ultraLeft(INT_2);
    29c6:	62 e0       	ldi	r22, 0x02	; 2
    29c8:	80 e5       	ldi	r24, 0x50	; 80
    29ca:	93 e0       	ldi	r25, 0x03	; 3
    29cc:	01 d4       	rcall	.+2050   	; 0x31d0 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>
Ultra_Sonic_Range_Finder_Driver ultraMiddle(INT_3);
    29ce:	63 e0       	ldi	r22, 0x03	; 3
    29d0:	87 e4       	ldi	r24, 0x47	; 71
    29d2:	93 e0       	ldi	r25, 0x03	; 3
    29d4:	fd d3       	rcall	.+2042   	; 0x31d0 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>
Ultra_Sonic_Range_Finder_Driver ultraRight(INT_5);
    29d6:	65 e0       	ldi	r22, 0x05	; 5
    29d8:	8e e3       	ldi	r24, 0x3E	; 62
    29da:	93 e0       	ldi	r25, 0x03	; 3
    29dc:	f9 c3       	rjmp	.+2034   	; 0x31d0 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>

000029de <_ZN13PidControllerC1Efffhllll>:


#include "PidController.h"


PidController::PidController(float _kp, float _ki, float _kd, uint8_t _period, int32_t _minError, int32_t _maxError, int32_t _minControlValue, int32_t _maxControlValue)
    29de:	8f 92       	push	r8
    29e0:	9f 92       	push	r9
    29e2:	af 92       	push	r10
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	4c 01       	movw	r8, r24
{
	Pid_P = 0;
    29fa:	fc 01       	movw	r30, r24
    29fc:	10 86       	std	Z+8, r1	; 0x08
    29fe:	11 86       	std	Z+9, r1	; 0x09
    2a00:	12 86       	std	Z+10, r1	; 0x0a
    2a02:	13 86       	std	Z+11, r1	; 0x0b
	Pid_D = 0;
    2a04:	14 86       	std	Z+12, r1	; 0x0c
    2a06:	15 86       	std	Z+13, r1	; 0x0d
    2a08:	16 86       	std	Z+14, r1	; 0x0e
    2a0a:	17 86       	std	Z+15, r1	; 0x0f
	Pid_I = 0;
    2a0c:	10 8a       	std	Z+16, r1	; 0x10
    2a0e:	11 8a       	std	Z+17, r1	; 0x11
    2a10:	12 8a       	std	Z+18, r1	; 0x12
    2a12:	13 8a       	std	Z+19, r1	; 0x13
	PID_Total = 0;
    2a14:	10 82       	st	Z, r1
    2a16:	11 82       	std	Z+1, r1	; 0x01
    2a18:	12 82       	std	Z+2, r1	; 0x02
    2a1a:	13 82       	std	Z+3, r1	; 0x03
	kp = _kp;
    2a1c:	44 8b       	std	Z+20, r20	; 0x14
    2a1e:	55 8b       	std	Z+21, r21	; 0x15
    2a20:	66 8b       	std	Z+22, r22	; 0x16
    2a22:	77 8b       	std	Z+23, r23	; 0x17
	kd = _kd;
    2a24:	c0 8e       	std	Z+24, r12	; 0x18
    2a26:	d1 8e       	std	Z+25, r13	; 0x19
    2a28:	e2 8e       	std	Z+26, r14	; 0x1a
    2a2a:	f3 8e       	std	Z+27, r15	; 0x1b
	ki = _ki;
    2a2c:	04 8f       	std	Z+28, r16	; 0x1c
    2a2e:	15 8f       	std	Z+29, r17	; 0x1d
    2a30:	26 8f       	std	Z+30, r18	; 0x1e
    2a32:	37 8f       	std	Z+31, r19	; 0x1f
	period = _period;
    2a34:	a0 aa       	std	Z+48, r10	; 0x30
	MinError = _minError;
    2a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a38:	98 89       	ldd	r25, Y+16	; 0x10
    2a3a:	a9 89       	ldd	r26, Y+17	; 0x11
    2a3c:	ba 89       	ldd	r27, Y+18	; 0x12
    2a3e:	84 a3       	std	Z+36, r24	; 0x24
    2a40:	95 a3       	std	Z+37, r25	; 0x25
    2a42:	a6 a3       	std	Z+38, r26	; 0x26
    2a44:	b7 a3       	std	Z+39, r27	; 0x27
	MaxError = _maxError;
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	ad 89       	ldd	r26, Y+21	; 0x15
    2a4c:	be 89       	ldd	r27, Y+22	; 0x16
    2a4e:	80 a3       	std	Z+32, r24	; 0x20
    2a50:	91 a3       	std	Z+33, r25	; 0x21
    2a52:	a2 a3       	std	Z+34, r26	; 0x22
    2a54:	b3 a3       	std	Z+35, r27	; 0x23
	MinControlValue = _minControlValue;
    2a56:	8f 89       	ldd	r24, Y+23	; 0x17
    2a58:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5a:	a9 8d       	ldd	r26, Y+25	; 0x19
    2a5c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2a5e:	84 a7       	std	Z+44, r24	; 0x2c
    2a60:	95 a7       	std	Z+45, r25	; 0x2d
    2a62:	a6 a7       	std	Z+46, r26	; 0x2e
    2a64:	b7 a7       	std	Z+47, r27	; 0x2f
	MaxControlValue = _maxControlValue;
    2a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2a6c:	be 8d       	ldd	r27, Y+30	; 0x1e
    2a6e:	80 a7       	std	Z+40, r24	; 0x28
    2a70:	91 a7       	std	Z+41, r25	; 0x29
    2a72:	a2 a7       	std	Z+42, r26	; 0x2a
    2a74:	b3 a7       	std	Z+43, r27	; 0x2b
	
	_setPointChanged = 0;
    2a76:	11 aa       	std	Z+49, r1	; 0x31
	
	initQueue(&Pid_D_History, Pid_D_History_Array, PID_D_QUEUE_SIZE);
    2a78:	b4 01       	movw	r22, r8
    2a7a:	6e 5b       	subi	r22, 0xBE	; 190
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	42 e0       	ldi	r20, 0x02	; 2
    2a84:	c4 01       	movw	r24, r8
    2a86:	ca 96       	adiw	r24, 0x3a	; 58
    2a88:	bf d1       	rcall	.+894    	; 0x2e08 <_Z9initQueueP5QueuePlhS1_>
	Pid_D_N_History = PID_D_N_TARGET;
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e0       	ldi	r26, 0x00	; 0
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	f4 01       	movw	r30, r8
    2a94:	82 ab       	std	Z+50, r24	; 0x32
    2a96:	93 ab       	std	Z+51, r25	; 0x33
    2a98:	a4 ab       	std	Z+52, r26	; 0x34
    2a9a:	b5 ab       	std	Z+53, r27	; 0x35
	
	previous_Error = 0;	
    2a9c:	14 82       	std	Z+4, r1	; 0x04
    2a9e:	15 82       	std	Z+5, r1	; 0x05
    2aa0:	16 82       	std	Z+6, r1	; 0x06
    2aa2:	17 82       	std	Z+7, r1	; 0x07
}
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	af 90       	pop	r10
    2ab6:	9f 90       	pop	r9
    2ab8:	8f 90       	pop	r8
    2aba:	08 95       	ret

00002abc <_ZN13PidController7ControlEl>:




int16_t PidController::Control(int32_t error)
{
    2abc:	3f 92       	push	r3
    2abe:	4f 92       	push	r4
    2ac0:	5f 92       	push	r5
    2ac2:	6f 92       	push	r6
    2ac4:	7f 92       	push	r7
    2ac6:	8f 92       	push	r8
    2ac8:	9f 92       	push	r9
    2aca:	af 92       	push	r10
    2acc:	bf 92       	push	r11
    2ace:	cf 92       	push	r12
    2ad0:	df 92       	push	r13
    2ad2:	ef 92       	push	r14
    2ad4:	ff 92       	push	r15
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	2e 97       	sbiw	r28, 0x0e	; 14
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	9e 87       	std	Y+14, r25	; 0x0e
    2af0:	8d 87       	std	Y+13, r24	; 0x0d
    2af2:	2a 01       	movw	r4, r20
    2af4:	3b 01       	movw	r6, r22
	int32_t errorDifference;
	if(!_setPointChanged)
    2af6:	dc 01       	movw	r26, r24
    2af8:	d1 96       	adiw	r26, 0x31	; 49
    2afa:	8c 91       	ld	r24, X
    2afc:	d1 97       	sbiw	r26, 0x31	; 49
    2afe:	81 11       	cpse	r24, r1
    2b00:	0d c0       	rjmp	.+26     	; 0x2b1c <_ZN13PidController7ControlEl+0x60>
	{
		errorDifference = error-previous_Error;
    2b02:	14 96       	adiw	r26, 0x04	; 4
    2b04:	8d 91       	ld	r24, X+
    2b06:	9d 91       	ld	r25, X+
    2b08:	0d 90       	ld	r0, X+
    2b0a:	bc 91       	ld	r27, X
    2b0c:	a0 2d       	mov	r26, r0
    2b0e:	6a 01       	movw	r12, r20
    2b10:	7b 01       	movw	r14, r22
    2b12:	c8 1a       	sub	r12, r24
    2b14:	d9 0a       	sbc	r13, r25
    2b16:	ea 0a       	sbc	r14, r26
    2b18:	fb 0a       	sbc	r15, r27
    2b1a:	03 c0       	rjmp	.+6      	; 0x2b22 <_ZN13PidController7ControlEl+0x66>
	}
	else
	{
		errorDifference = 0;
    2b1c:	c1 2c       	mov	r12, r1
    2b1e:	d1 2c       	mov	r13, r1
    2b20:	76 01       	movw	r14, r12
	}	
	
	Pid_P = kp*error;
    2b22:	c3 01       	movw	r24, r6
    2b24:	b2 01       	movw	r22, r4
    2b26:	15 d6       	rcall	.+3114   	; 0x3752 <__floatsisf>
    2b28:	4b 01       	movw	r8, r22
    2b2a:	5c 01       	movw	r10, r24
    2b2c:	9b 01       	movw	r18, r22
    2b2e:	ac 01       	movw	r20, r24
    2b30:	ed 85       	ldd	r30, Y+13	; 0x0d
    2b32:	fe 85       	ldd	r31, Y+14	; 0x0e
    2b34:	64 89       	ldd	r22, Z+20	; 0x14
    2b36:	75 89       	ldd	r23, Z+21	; 0x15
    2b38:	86 89       	ldd	r24, Z+22	; 0x16
    2b3a:	97 89       	ldd	r25, Z+23	; 0x17
    2b3c:	96 d6       	rcall	.+3372   	; 0x386a <__mulsf3>
    2b3e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2b40:	be 85       	ldd	r27, Y+14	; 0x0e
    2b42:	18 96       	adiw	r26, 0x08	; 8
    2b44:	6d 93       	st	X+, r22
    2b46:	7d 93       	st	X+, r23
    2b48:	8d 93       	st	X+, r24
    2b4a:	9c 93       	st	X, r25
    2b4c:	1b 97       	sbiw	r26, 0x0b	; 11
	
	int32_t sum = 0;
	
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
    2b4e:	8d 01       	movw	r16, r26
    2b50:	06 5c       	subi	r16, 0xC6	; 198
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	c7 01       	movw	r24, r14
    2b56:	b6 01       	movw	r22, r12
    2b58:	fc d5       	rcall	.+3064   	; 0x3752 <__floatsisf>
    2b5a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2b5c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2b5e:	20 8d       	ldd	r18, Z+24	; 0x18
    2b60:	31 8d       	ldd	r19, Z+25	; 0x19
    2b62:	42 8d       	ldd	r20, Z+26	; 0x1a
    2b64:	53 8d       	ldd	r21, Z+27	; 0x1b
    2b66:	81 d6       	rcall	.+3330   	; 0x386a <__mulsf3>
    2b68:	6b 01       	movw	r12, r22
    2b6a:	7c 01       	movw	r14, r24
    2b6c:	ad 85       	ldd	r26, Y+13	; 0x0d
    2b6e:	be 85       	ldd	r27, Y+14	; 0x0e
    2b70:	d0 96       	adiw	r26, 0x30	; 48
    2b72:	6c 91       	ld	r22, X
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	eb d5       	rcall	.+3030   	; 0x3752 <__floatsisf>
    2b7c:	9b 01       	movw	r18, r22
    2b7e:	ac 01       	movw	r20, r24
    2b80:	c7 01       	movw	r24, r14
    2b82:	b6 01       	movw	r22, r12
    2b84:	4b d5       	rcall	.+2710   	; 0x361c <__divsf3>
    2b86:	b2 d5       	rcall	.+2916   	; 0x36ec <__fixsfsi>
    2b88:	a8 01       	movw	r20, r16
    2b8a:	67 d1       	rcall	.+718    	; 0x2e5a <_Z6enqeuelP5Queue>
	

	sum = 0;
	for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2b8c:	31 2c       	mov	r3, r1
	
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
	

	sum = 0;
    2b8e:	c1 2c       	mov	r12, r1
    2b90:	d1 2c       	mov	r13, r1
    2b92:	76 01       	movw	r14, r12
	for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2b94:	23 2d       	mov	r18, r3
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2b9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ba0:	62 a9       	ldd	r22, Z+50	; 0x32
    2ba2:	73 a9       	ldd	r23, Z+51	; 0x33
    2ba4:	84 a9       	ldd	r24, Z+52	; 0x34
    2ba6:	95 a9       	ldd	r25, Z+53	; 0x35
    2ba8:	26 17       	cp	r18, r22
    2baa:	37 07       	cpc	r19, r23
    2bac:	48 07       	cpc	r20, r24
    2bae:	59 07       	cpc	r21, r25
    2bb0:	dc f4       	brge	.+54     	; 0x2be8 <_ZN13PidController7ControlEl+0x12c>
	{
		sum += ((Pid_D_N_History - i) * (Pid_D_N_History - i)) * (int32_t) getNthElement(&Pid_D_History, i);
    2bb2:	62 1b       	sub	r22, r18
    2bb4:	73 0b       	sbc	r23, r19
    2bb6:	84 0b       	sbc	r24, r20
    2bb8:	95 0b       	sbc	r25, r21
    2bba:	9b 01       	movw	r18, r22
    2bbc:	ac 01       	movw	r20, r24
    2bbe:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
    2bc2:	69 83       	std	Y+1, r22	; 0x01
    2bc4:	7a 83       	std	Y+2, r23	; 0x02
    2bc6:	8b 83       	std	Y+3, r24	; 0x03
    2bc8:	9c 83       	std	Y+4, r25	; 0x04
    2bca:	63 2d       	mov	r22, r3
    2bcc:	c8 01       	movw	r24, r16
    2bce:	72 d1       	rcall	.+740    	; 0x2eb4 <_Z13getNthElementP5Queueh>
    2bd0:	29 81       	ldd	r18, Y+1	; 0x01
    2bd2:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd4:	4b 81       	ldd	r20, Y+3	; 0x03
    2bd6:	5c 81       	ldd	r21, Y+4	; 0x04
    2bd8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
    2bdc:	c6 0e       	add	r12, r22
    2bde:	d7 1e       	adc	r13, r23
    2be0:	e8 1e       	adc	r14, r24
    2be2:	f9 1e       	adc	r15, r25
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
	

	sum = 0;
	for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2be4:	33 94       	inc	r3
    2be6:	d6 cf       	rjmp	.-84     	; 0x2b94 <_ZN13PidController7ControlEl+0xd8>
	{
		sum += ((Pid_D_N_History - i) * (Pid_D_N_History - i)) * (int32_t) getNthElement(&Pid_D_History, i);
	}
	if (!_setPointChanged)
    2be8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2bea:	fe 85       	ldd	r31, Y+14	; 0x0e
    2bec:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bee:	26 a9       	ldd	r18, Z+54	; 0x36
    2bf0:	37 a9       	ldd	r19, Z+55	; 0x37
    2bf2:	40 ad       	ldd	r20, Z+56	; 0x38
    2bf4:	51 ad       	ldd	r21, Z+57	; 0x39
    2bf6:	29 83       	std	Y+1, r18	; 0x01
    2bf8:	3a 83       	std	Y+2, r19	; 0x02
    2bfa:	4b 83       	std	Y+3, r20	; 0x03
    2bfc:	5c 83       	std	Y+4, r21	; 0x04
    2bfe:	a1 11       	cpse	r26, r1
	{
		Pid_D = sum/Pid_D_N_History_Sum;
    2c00:	2a c0       	rjmp	.+84     	; 0x2c56 <_ZN13PidController7ControlEl+0x19a>
    2c02:	c7 01       	movw	r24, r14
    2c04:	b6 01       	movw	r22, r12
    2c06:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
    2c0a:	ca 01       	movw	r24, r20
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	a1 d5       	rcall	.+2882   	; 0x3752 <__floatsisf>
    2c10:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c12:	be 85       	ldd	r27, Y+14	; 0x0e
    2c14:	1c 96       	adiw	r26, 0x0c	; 12
    2c16:	6d 93       	st	X+, r22
    2c18:	7d 93       	st	X+, r23
    2c1a:	8d 93       	st	X+, r24
    2c1c:	9c 93       	st	X, r25
		Pid_D = sum/(Pid_D_N_History_Sum-Pid_D_N_History*Pid_D_N_History);	
	}
	
	if(!_setPointChanged)
    {
	    Pid_I = Pid_I + ( ki * error);
    2c1e:	1f 97       	sbiw	r26, 0x0f	; 15
    2c20:	5c 96       	adiw	r26, 0x1c	; 28
    2c22:	2d 91       	ld	r18, X+
    2c24:	3d 91       	ld	r19, X+
    2c26:	4d 91       	ld	r20, X+
    2c28:	5c 91       	ld	r21, X
    2c2a:	5f 97       	sbiw	r26, 0x1f	; 31
    2c2c:	c5 01       	movw	r24, r10
    2c2e:	b4 01       	movw	r22, r8
    2c30:	1c d6       	rcall	.+3128   	; 0x386a <__mulsf3>
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c38:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c3a:	60 89       	ldd	r22, Z+16	; 0x10
    2c3c:	71 89       	ldd	r23, Z+17	; 0x11
    2c3e:	82 89       	ldd	r24, Z+18	; 0x12
    2c40:	93 89       	ldd	r25, Z+19	; 0x13
    2c42:	88 d4       	rcall	.+2320   	; 0x3554 <__addsf3>
    2c44:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c46:	be 85       	ldd	r27, Y+14	; 0x0e
    2c48:	50 96       	adiw	r26, 0x10	; 16
    2c4a:	6d 93       	st	X+, r22
    2c4c:	7d 93       	st	X+, r23
    2c4e:	8d 93       	st	X+, r24
    2c50:	9c 93       	st	X, r25
    2c52:	53 97       	sbiw	r26, 0x13	; 19
    2c54:	2a c0       	rjmp	.+84     	; 0x2caa <_ZN13PidController7ControlEl+0x1ee>
	{
		Pid_D = sum/Pid_D_N_History_Sum;
	} 
	else
	{
		Pid_D = sum/(Pid_D_N_History_Sum-Pid_D_N_History*Pid_D_N_History);	
    2c56:	9b 01       	movw	r18, r22
    2c58:	ac 01       	movw	r20, r24
    2c5a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__mulsi3>
    2c5e:	29 81       	ldd	r18, Y+1	; 0x01
    2c60:	3a 81       	ldd	r19, Y+2	; 0x02
    2c62:	4b 81       	ldd	r20, Y+3	; 0x03
    2c64:	5c 81       	ldd	r21, Y+4	; 0x04
    2c66:	26 1b       	sub	r18, r22
    2c68:	37 0b       	sbc	r19, r23
    2c6a:	48 0b       	sbc	r20, r24
    2c6c:	59 0b       	sbc	r21, r25
    2c6e:	c7 01       	movw	r24, r14
    2c70:	b6 01       	movw	r22, r12
    2c72:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
    2c76:	ca 01       	movw	r24, r20
    2c78:	b9 01       	movw	r22, r18
    2c7a:	6b d5       	rcall	.+2774   	; 0x3752 <__floatsisf>
    2c7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c80:	64 87       	std	Z+12, r22	; 0x0c
    2c82:	75 87       	std	Z+13, r23	; 0x0d
    2c84:	86 87       	std	Z+14, r24	; 0x0e
    {
	    Pid_I = Pid_I + ( ki * error);
    }
	else
	{
		Pid_I = ki * error;
    2c86:	97 87       	std	Z+15, r25	; 0x0f
    2c88:	a5 01       	movw	r20, r10
    2c8a:	94 01       	movw	r18, r8
    2c8c:	64 8d       	ldd	r22, Z+28	; 0x1c
    2c8e:	75 8d       	ldd	r23, Z+29	; 0x1d
    2c90:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c92:	97 8d       	ldd	r25, Z+31	; 0x1f
    2c94:	ea d5       	rcall	.+3028   	; 0x386a <__mulsf3>
    2c96:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c98:	be 85       	ldd	r27, Y+14	; 0x0e
    2c9a:	50 96       	adiw	r26, 0x10	; 16
    2c9c:	6d 93       	st	X+, r22
    2c9e:	7d 93       	st	X+, r23
    2ca0:	8d 93       	st	X+, r24
    2ca2:	9c 93       	st	X, r25
		_setPointChanged = 0;
    2ca4:	53 97       	sbiw	r26, 0x13	; 19
    2ca6:	d1 96       	adiw	r26, 0x31	; 49
	}

	
	PID_Total = Pid_P + Pid_D + Pid_I;
    2ca8:	1c 92       	st	X, r1
    2caa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cac:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cae:	24 85       	ldd	r18, Z+12	; 0x0c
    2cb0:	35 85       	ldd	r19, Z+13	; 0x0d
    2cb2:	46 85       	ldd	r20, Z+14	; 0x0e
    2cb4:	57 85       	ldd	r21, Z+15	; 0x0f
    2cb6:	60 85       	ldd	r22, Z+8	; 0x08
    2cb8:	71 85       	ldd	r23, Z+9	; 0x09
    2cba:	82 85       	ldd	r24, Z+10	; 0x0a
    2cbc:	93 85       	ldd	r25, Z+11	; 0x0b
    2cbe:	4a d4       	rcall	.+2196   	; 0x3554 <__addsf3>
    2cc0:	ad 85       	ldd	r26, Y+13	; 0x0d
    2cc2:	be 85       	ldd	r27, Y+14	; 0x0e
    2cc4:	50 96       	adiw	r26, 0x10	; 16
    2cc6:	2d 91       	ld	r18, X+
    2cc8:	3d 91       	ld	r19, X+
    2cca:	4d 91       	ld	r20, X+
    2ccc:	5c 91       	ld	r21, X
    2cce:	53 97       	sbiw	r26, 0x13	; 19
    2cd0:	41 d4       	rcall	.+2178   	; 0x3554 <__addsf3>
    2cd2:	0c d5       	rcall	.+2584   	; 0x36ec <__fixsfsi>
    2cd4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cd6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cd8:	60 83       	st	Z, r22
    2cda:	71 83       	std	Z+1, r23	; 0x01
    2cdc:	82 83       	std	Z+2, r24	; 0x02
    2cde:	93 83       	std	Z+3, r25	; 0x03
	
	
	if(PID_Total < MinError)
    2ce0:	24 a1       	ldd	r18, Z+36	; 0x24
    2ce2:	35 a1       	ldd	r19, Z+37	; 0x25
    2ce4:	46 a1       	ldd	r20, Z+38	; 0x26
    2ce6:	57 a1       	ldd	r21, Z+39	; 0x27
    2ce8:	29 83       	std	Y+1, r18	; 0x01
    2cea:	3a 83       	std	Y+2, r19	; 0x02
    2cec:	4b 83       	std	Y+3, r20	; 0x03
    2cee:	5c 83       	std	Y+4, r21	; 0x04
    2cf0:	62 17       	cp	r22, r18
    2cf2:	73 07       	cpc	r23, r19
    2cf4:	84 07       	cpc	r24, r20
    2cf6:	95 07       	cpc	r25, r21
    2cf8:	24 f4       	brge	.+8      	; 0x2d02 <_ZN13PidController7ControlEl+0x246>
	{
		PID_Total = MinError;
    2cfa:	20 83       	st	Z, r18
    2cfc:	31 83       	std	Z+1, r19	; 0x01
    2cfe:	42 83       	std	Z+2, r20	; 0x02
    2d00:	53 83       	std	Z+3, r21	; 0x03
	}
	if(PID_Total > MaxError)
    2d02:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d04:	be 85       	ldd	r27, Y+14	; 0x0e
    2d06:	90 96       	adiw	r26, 0x20	; 32
    2d08:	2d 91       	ld	r18, X+
    2d0a:	3d 91       	ld	r19, X+
    2d0c:	4d 91       	ld	r20, X+
    2d0e:	5c 91       	ld	r21, X
    2d10:	93 97       	sbiw	r26, 0x23	; 35
    2d12:	2d 83       	std	Y+5, r18	; 0x05
    2d14:	3e 83       	std	Y+6, r19	; 0x06
    2d16:	4f 83       	std	Y+7, r20	; 0x07
    2d18:	58 87       	std	Y+8, r21	; 0x08
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9d 91       	ld	r25, X+
    2d1e:	0d 90       	ld	r0, X+
    2d20:	bc 91       	ld	r27, X
    2d22:	a0 2d       	mov	r26, r0
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	4a 07       	cpc	r20, r26
    2d2a:	5b 07       	cpc	r21, r27
	{
		PID_Total = MaxError;
    2d2c:	34 f4       	brge	.+12     	; 0x2d3a <_ZN13PidController7ControlEl+0x27e>
    2d2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d30:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d32:	20 83       	st	Z, r18
    2d34:	31 83       	std	Z+1, r19	; 0x01
	}

	int16_t PID_Mapped = map(PID_Total, MinError, MaxError, MinControlValue, MaxControlValue);
    2d36:	42 83       	std	Z+2, r20	; 0x02
    2d38:	53 83       	std	Z+3, r21	; 0x03
    2d3a:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d3c:	be 85       	ldd	r27, Y+14	; 0x0e
    2d3e:	9c 96       	adiw	r26, 0x2c	; 44
    2d40:	6d 91       	ld	r22, X+
    2d42:	7d 91       	ld	r23, X+
    2d44:	8d 91       	ld	r24, X+
    2d46:	9c 91       	ld	r25, X
    2d48:	9f 97       	sbiw	r26, 0x2f	; 47
    2d4a:	03 d5       	rcall	.+2566   	; 0x3752 <__floatsisf>
    2d4c:	5b 01       	movw	r10, r22
    2d4e:	6c 01       	movw	r12, r24
    2d50:	6d 81       	ldd	r22, Y+5	; 0x05
    2d52:	7e 81       	ldd	r23, Y+6	; 0x06
    2d54:	8f 81       	ldd	r24, Y+7	; 0x07
    2d56:	98 85       	ldd	r25, Y+8	; 0x08
    2d58:	fc d4       	rcall	.+2552   	; 0x3752 <__floatsisf>
    2d5a:	6d 83       	std	Y+5, r22	; 0x05
    2d5c:	7e 83       	std	Y+6, r23	; 0x06
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
    2d60:	98 87       	std	Y+8, r25	; 0x08
    2d62:	69 81       	ldd	r22, Y+1	; 0x01
    2d64:	7a 81       	ldd	r23, Y+2	; 0x02
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	f3 d4       	rcall	.+2534   	; 0x3752 <__floatsisf>
    2d6c:	69 83       	std	Y+1, r22	; 0x01
    2d6e:	7a 83       	std	Y+2, r23	; 0x02
    2d70:	8b 83       	std	Y+3, r24	; 0x03
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d76:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	e8 d4       	rcall	.+2512   	; 0x3752 <__floatsisf>
    2d82:	69 87       	std	Y+9, r22	; 0x09
    2d84:	7a 87       	std	Y+10, r23	; 0x0a
    2d86:	8b 87       	std	Y+11, r24	; 0x0b
    2d88:	9c 87       	std	Y+12, r25	; 0x0c
    2d8a:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d8c:	be 85       	ldd	r27, Y+14	; 0x0e
    2d8e:	98 96       	adiw	r26, 0x28	; 40
    2d90:	6d 91       	ld	r22, X+
    2d92:	7d 91       	ld	r23, X+
    2d94:	8d 91       	ld	r24, X+
    2d96:	9c 91       	ld	r25, X
    2d98:	9b 97       	sbiw	r26, 0x2b	; 43
    2d9a:	db d4       	rcall	.+2486   	; 0x3752 <__floatsisf>
    2d9c:	9f 93       	push	r25
    2d9e:	8f 93       	push	r24
    2da0:	7f 93       	push	r23
    2da2:	6f 93       	push	r22
    2da4:	ed 80       	ldd	r14, Y+5	; 0x05
    2da6:	fe 80       	ldd	r15, Y+6	; 0x06
    2da8:	0f 81       	ldd	r16, Y+7	; 0x07
    2daa:	18 85       	ldd	r17, Y+8	; 0x08
    2dac:	29 81       	ldd	r18, Y+1	; 0x01
    2dae:	3a 81       	ldd	r19, Y+2	; 0x02
    2db0:	4b 81       	ldd	r20, Y+3	; 0x03
    2db2:	5c 81       	ldd	r21, Y+4	; 0x04
    2db4:	69 85       	ldd	r22, Y+9	; 0x09
    2db6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2db8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dba:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dbc:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z3mapfffff>
	previous_Error = error;
    2dc0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2dc2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2dc4:	44 82       	std	Z+4, r4	; 0x04
    2dc6:	55 82       	std	Z+5, r5	; 0x05
    2dc8:	66 82       	std	Z+6, r6	; 0x06
	return PID_Mapped;
    2dca:	77 82       	std	Z+7, r7	; 0x07
    2dcc:	8f d4       	rcall	.+2334   	; 0x36ec <__fixsfsi>
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
}
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	2e 96       	adiw	r28, 0x0e	; 14
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	cf 90       	pop	r12
    2df4:	bf 90       	pop	r11
    2df6:	af 90       	pop	r10
    2df8:	9f 90       	pop	r9
    2dfa:	8f 90       	pop	r8
    2dfc:	7f 90       	pop	r7
    2dfe:	6f 90       	pop	r6
    2e00:	5f 90       	pop	r5
    2e02:	4f 90       	pop	r4
    2e04:	3f 90       	pop	r3
    2e06:	08 95       	ret

00002e08 <_Z9initQueueP5QueuePlhS1_>:
    2e08:	fc 01       	movw	r30, r24
    2e0a:	40 83       	st	Z, r20
    2e0c:	11 82       	std	Z+1, r1	; 0x01
    2e0e:	12 82       	std	Z+2, r1	; 0x02
    2e10:	41 50       	subi	r20, 0x01	; 1
    2e12:	43 83       	std	Z+3, r20	; 0x03
    2e14:	75 83       	std	Z+5, r23	; 0x05
    2e16:	64 83       	std	Z+4, r22	; 0x04
    2e18:	37 83       	std	Z+7, r19	; 0x07
    2e1a:	26 83       	std	Z+6, r18	; 0x06
    2e1c:	08 95       	ret

00002e1e <_Z7dequeueP5Queue>:
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	fc 01       	movw	r30, r24
    2e24:	22 81       	ldd	r18, Z+2	; 0x02
    2e26:	82 2f       	mov	r24, r18
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a4 81       	ldd	r26, Z+4	; 0x04
    2e2c:	b5 81       	ldd	r27, Z+5	; 0x05
    2e2e:	34 e0       	ldi	r19, 0x04	; 4
    2e30:	23 9f       	mul	r18, r19
    2e32:	a0 0d       	add	r26, r0
    2e34:	b1 1d       	adc	r27, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	0d 91       	ld	r16, X+
    2e3a:	1d 91       	ld	r17, X+
    2e3c:	2d 91       	ld	r18, X+
    2e3e:	3c 91       	ld	r19, X
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	60 81       	ld	r22, Z
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	d5 d7       	rcall	.+4010   	; 0x3df2 <__divmodhi4>
    2e48:	82 83       	std	Z+2, r24	; 0x02
    2e4a:	81 81       	ldd	r24, Z+1	; 0x01
    2e4c:	81 50       	subi	r24, 0x01	; 1
    2e4e:	81 83       	std	Z+1, r24	; 0x01
    2e50:	c9 01       	movw	r24, r18
    2e52:	b8 01       	movw	r22, r16
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	08 95       	ret

00002e5a <_Z6enqeuelP5Queue>:
    2e5a:	cf 92       	push	r12
    2e5c:	df 92       	push	r13
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	6b 01       	movw	r12, r22
    2e68:	7c 01       	movw	r14, r24
    2e6a:	ea 01       	movw	r28, r20
    2e6c:	99 81       	ldd	r25, Y+1	; 0x01
    2e6e:	88 81       	ld	r24, Y
    2e70:	98 13       	cpse	r25, r24
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <_Z6enqeuelP5Queue+0x1e>
    2e74:	ca 01       	movw	r24, r20
    2e76:	d3 df       	rcall	.-90     	; 0x2e1e <_Z7dequeueP5Queue>
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	68 81       	ld	r22, Y
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	b7 d7       	rcall	.+3950   	; 0x3df2 <__divmodhi4>
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	99 27       	eor	r25, r25
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	ec 81       	ldd	r30, Y+4	; 0x04
    2e92:	fd 81       	ldd	r31, Y+5	; 0x05
    2e94:	e8 0f       	add	r30, r24
    2e96:	f9 1f       	adc	r31, r25
    2e98:	c0 82       	st	Z, r12
    2e9a:	d1 82       	std	Z+1, r13	; 0x01
    2e9c:	e2 82       	std	Z+2, r14	; 0x02
    2e9e:	f3 82       	std	Z+3, r15	; 0x03
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	08 95       	ret

00002eb4 <_Z13getNthElementP5Queueh>:
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	81 81       	ldd	r24, Z+1	; 0x01
    2eb8:	68 17       	cp	r22, r24
    2eba:	c8 f4       	brcc	.+50     	; 0x2eee <_Z13getNthElementP5Queueh+0x3a>
    2ebc:	20 81       	ld	r18, Z
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	83 81       	ldd	r24, Z+3	; 0x03
    2ec2:	a9 01       	movw	r20, r18
    2ec4:	48 0f       	add	r20, r24
    2ec6:	51 1d       	adc	r21, r1
    2ec8:	ca 01       	movw	r24, r20
    2eca:	86 1b       	sub	r24, r22
    2ecc:	91 09       	sbc	r25, r1
    2ece:	b9 01       	movw	r22, r18
    2ed0:	90 d7       	rcall	.+3872   	; 0x3df2 <__divmodhi4>
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	04 80       	ldd	r0, Z+4	; 0x04
    2edc:	f5 81       	ldd	r31, Z+5	; 0x05
    2ede:	e0 2d       	mov	r30, r0
    2ee0:	e8 0f       	add	r30, r24
    2ee2:	f9 1f       	adc	r31, r25
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	08 95       	ret
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	08 95       	ret

00002ef6 <_ZN3ros16normalizeSecNSecERmS0_>:
    2ef6:	cf 92       	push	r12
    2ef8:	df 92       	push	r13
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	8c 01       	movw	r16, r24
    2f08:	eb 01       	movw	r28, r22
    2f0a:	68 81       	ld	r22, Y
    2f0c:	79 81       	ldd	r23, Y+1	; 0x01
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3a ec       	ldi	r19, 0xCA	; 202
    2f16:	4a e9       	ldi	r20, 0x9A	; 154
    2f18:	5b e3       	ldi	r21, 0x3B	; 59
    2f1a:	7e d7       	rcall	.+3836   	; 0x3e18 <__udivmodsi4>
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	c0 80       	ld	r12, Z
    2f20:	d1 80       	ldd	r13, Z+1	; 0x01
    2f22:	e2 80       	ldd	r14, Z+2	; 0x02
    2f24:	f3 80       	ldd	r15, Z+3	; 0x03
    2f26:	c2 0e       	add	r12, r18
    2f28:	d3 1e       	adc	r13, r19
    2f2a:	e4 1e       	adc	r14, r20
    2f2c:	f5 1e       	adc	r15, r21
    2f2e:	c0 82       	st	Z, r12
    2f30:	d1 82       	std	Z+1, r13	; 0x01
    2f32:	e2 82       	std	Z+2, r14	; 0x02
    2f34:	f3 82       	std	Z+3, r15	; 0x03
    2f36:	68 83       	st	Y, r22
    2f38:	79 83       	std	Y+1, r23	; 0x01
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	9b 83       	std	Y+3, r25	; 0x03
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	08 95       	ret

00002f50 <_Z12initMilliISRv>:
 
 void setTimerPeriod(uint8_t timerId, uint16_t _period)
 {
	 cli();
	 timers[timerId].period = _period;
	 sei();
    2f50:	85 e0       	ldi	r24, 0x05	; 5
    2f52:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    2f56:	e1 eb       	ldi	r30, 0xB1	; 177
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 7f       	andi	r24, 0xF8	; 248
    2f5e:	80 83       	st	Z, r24
    2f60:	80 81       	ld	r24, Z
    2f62:	84 60       	ori	r24, 0x04	; 4
    2f64:	80 83       	st	Z, r24
    2f66:	e0 e7       	ldi	r30, 0x70	; 112
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	81 60       	ori	r24, 0x01	; 1
    2f6e:	80 83       	st	Z, r24
    2f70:	78 94       	sei
    2f72:	08 95       	ret

00002f74 <__vector_15>:
    2f74:	1f 92       	push	r1
    2f76:	0f 92       	push	r0
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	0f 92       	push	r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	0b b6       	in	r0, 0x3b	; 59
    2f80:	0f 92       	push	r0
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	2f 93       	push	r18
    2f90:	3f 93       	push	r19
    2f92:	4f 93       	push	r20
    2f94:	5f 93       	push	r21
    2f96:	6f 93       	push	r22
    2f98:	7f 93       	push	r23
    2f9a:	8f 93       	push	r24
    2f9c:	9f 93       	push	r25
    2f9e:	af 93       	push	r26
    2fa0:	bf 93       	push	r27
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	ef 93       	push	r30
    2fa8:	ff 93       	push	r31
    2faa:	85 e0       	ldi	r24, 0x05	; 5
    2fac:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    2fb0:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL9global_ms>
    2fb4:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL9global_ms+0x1>
    2fb8:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <_ZL9global_ms+0x2>
    2fbc:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <_ZL9global_ms+0x3>
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	a1 1d       	adc	r26, r1
    2fc4:	b1 1d       	adc	r27, r1
    2fc6:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZL9global_ms>
    2fca:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <_ZL9global_ms+0x1>
    2fce:	a0 93 87 03 	sts	0x0387, r26	; 0x800387 <_ZL9global_ms+0x2>
    2fd2:	b0 93 88 03 	sts	0x0388, r27	; 0x800388 <_ZL9global_ms+0x3>
    2fd6:	cf e9       	ldi	r28, 0x9F	; 159
    2fd8:	d3 e0       	ldi	r29, 0x03	; 3
    2fda:	09 e8       	ldi	r16, 0x89	; 137
    2fdc:	13 e0       	ldi	r17, 0x03	; 3
    2fde:	e1 2c       	mov	r14, r1
    2fe0:	f1 2c       	mov	r15, r1
    2fe2:	8d e0       	ldi	r24, 0x0D	; 13
    2fe4:	d8 2e       	mov	r13, r24
    2fe6:	cc 24       	eor	r12, r12
    2fe8:	c3 94       	inc	r12
    2fea:	88 81       	ld	r24, Y
    2fec:	8f 3f       	cpi	r24, 0xFF	; 255
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <__vector_15+0x7e>
    2ff0:	5b c0       	rjmp	.+182    	; 0x30a8 <__vector_15+0x134>
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	88 23       	and	r24, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <__vector_15+0x86>
    2ff8:	50 c0       	rjmp	.+160    	; 0x309a <__vector_15+0x126>
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	a2 81       	ldd	r26, Z+2	; 0x02
    3002:	b3 81       	ldd	r27, Z+3	; 0x03
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	a1 1d       	adc	r26, r1
    3008:	b1 1d       	adc	r27, r1
    300a:	80 83       	st	Z, r24
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	a2 83       	std	Z+2, r26	; 0x02
    3010:	b3 83       	std	Z+3, r27	; 0x03
    3012:	4b 81       	ldd	r20, Y+3	; 0x03
    3014:	5c 81       	ldd	r21, Y+4	; 0x04
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	84 17       	cp	r24, r20
    301c:	95 07       	cpc	r25, r21
    301e:	a6 07       	cpc	r26, r22
    3020:	b7 07       	cpc	r27, r23
    3022:	d9 f5       	brne	.+118    	; 0x309a <__vector_15+0x126>
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	10 82       	st	Z, r1
    302a:	11 82       	std	Z+1, r1	; 0x01
    302c:	12 82       	std	Z+2, r1	; 0x02
    302e:	13 82       	std	Z+3, r1	; 0x03
    3030:	8e 81       	ldd	r24, Y+6	; 0x06
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	29 f1       	breq	.+74     	; 0x3080 <__vector_15+0x10c>
    3036:	d8 f0       	brcs	.+54     	; 0x306e <__vector_15+0xfa>
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	99 f0       	breq	.+38     	; 0x3062 <__vector_15+0xee>
    303c:	83 30       	cpi	r24, 0x03	; 3
    303e:	69 f5       	brne	.+90     	; 0x309a <__vector_15+0x126>
    3040:	de 9c       	mul	r13, r14
    3042:	f0 01       	movw	r30, r0
    3044:	df 9c       	mul	r13, r15
    3046:	f0 0d       	add	r31, r0
    3048:	11 24       	eor	r1, r1
    304a:	e1 56       	subi	r30, 0x61	; 97
    304c:	fc 4f       	sbci	r31, 0xFC	; 252
    304e:	81 85       	ldd	r24, Z+9	; 0x09
    3050:	92 85       	ldd	r25, Z+10	; 0x0a
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	0e 94 23 05 	call	0xa46	; 0xa46 <_Z8setEventjPVj>
    305a:	ef 81       	ldd	r30, Y+7	; 0x07
    305c:	f8 85       	ldd	r31, Y+8	; 0x08
    305e:	19 95       	eicall
    3060:	1c c0       	rjmp	.+56     	; 0x309a <__vector_15+0x126>
    3062:	f8 94       	cli
    3064:	ef 81       	ldd	r30, Y+7	; 0x07
    3066:	f8 85       	ldd	r31, Y+8	; 0x08
    3068:	19 95       	eicall
    306a:	78 94       	sei
    306c:	16 c0       	rjmp	.+44     	; 0x309a <__vector_15+0x126>
    306e:	de 9c       	mul	r13, r14
    3070:	f0 01       	movw	r30, r0
    3072:	df 9c       	mul	r13, r15
    3074:	f0 0d       	add	r31, r0
    3076:	11 24       	eor	r1, r1
    3078:	e1 56       	subi	r30, 0x61	; 97
    307a:	fc 4f       	sbci	r31, 0xFC	; 252
    307c:	c2 82       	std	Z+2, r12	; 0x02
    307e:	0d c0       	rjmp	.+26     	; 0x309a <__vector_15+0x126>
    3080:	de 9c       	mul	r13, r14
    3082:	f0 01       	movw	r30, r0
    3084:	df 9c       	mul	r13, r15
    3086:	f0 0d       	add	r31, r0
    3088:	11 24       	eor	r1, r1
    308a:	e1 56       	subi	r30, 0x61	; 97
    308c:	fc 4f       	sbci	r31, 0xFC	; 252
    308e:	81 85       	ldd	r24, Z+9	; 0x09
    3090:	92 85       	ldd	r25, Z+10	; 0x0a
    3092:	6b 85       	ldd	r22, Y+11	; 0x0b
    3094:	7c 85       	ldd	r23, Y+12	; 0x0c
    3096:	0e 94 23 05 	call	0xa46	; 0xa46 <_Z8setEventjPVj>
    309a:	ff ef       	ldi	r31, 0xFF	; 255
    309c:	ef 1a       	sub	r14, r31
    309e:	ff 0a       	sbc	r15, r31
    30a0:	2d 96       	adiw	r28, 0x0d	; 13
    30a2:	0c 5f       	subi	r16, 0xFC	; 252
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	a1 cf       	rjmp	.-190    	; 0x2fea <__vector_15+0x76>
    30a8:	ff 91       	pop	r31
    30aa:	ef 91       	pop	r30
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	bf 91       	pop	r27
    30b2:	af 91       	pop	r26
    30b4:	9f 91       	pop	r25
    30b6:	8f 91       	pop	r24
    30b8:	7f 91       	pop	r23
    30ba:	6f 91       	pop	r22
    30bc:	5f 91       	pop	r21
    30be:	4f 91       	pop	r20
    30c0:	3f 91       	pop	r19
    30c2:	2f 91       	pop	r18
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	ff 90       	pop	r15
    30ca:	ef 90       	pop	r14
    30cc:	df 90       	pop	r13
    30ce:	cf 90       	pop	r12
    30d0:	0f 90       	pop	r0
    30d2:	0b be       	out	0x3b, r0	; 59
    30d4:	0f 90       	pop	r0
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	0f 90       	pop	r0
    30da:	1f 90       	pop	r1
    30dc:	18 95       	reti

000030de <_Z12declareTimerjh9timerModePFvvEjPVj>:
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	1f 92       	push	r1
    30ec:	1f 92       	push	r1
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	dc 01       	movw	r26, r24
    30f4:	1a 83       	std	Y+2, r17	; 0x02
    30f6:	09 83       	std	Y+1, r16	; 0x01
    30f8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <timerStructInitialized>
    30fc:	81 11       	cpse	r24, r1
    30fe:	0d c0       	rjmp	.+26     	; 0x311a <_Z12declareTimerjh9timerModePFvvEjPVj+0x3c>
    3100:	ef e9       	ldi	r30, 0x9F	; 159
    3102:	f3 e0       	ldi	r31, 0x03	; 3
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	80 83       	st	Z, r24
    3108:	11 82       	std	Z+1, r1	; 0x01
    310a:	3d 96       	adiw	r30, 0x0d	; 13
    310c:	93 e0       	ldi	r25, 0x03	; 3
    310e:	e0 3e       	cpi	r30, 0xE0	; 224
    3110:	f9 07       	cpc	r31, r25
    3112:	c9 f7       	brne	.-14     	; 0x3106 <_Z12declareTimerjh9timerModePFvvEjPVj+0x28>
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <timerStructInitialized>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	9d e0       	ldi	r25, 0x0D	; 13
    311e:	98 9f       	mul	r25, r24
    3120:	f0 01       	movw	r30, r0
    3122:	11 24       	eor	r1, r1
    3124:	e1 56       	subi	r30, 0x61	; 97
    3126:	fc 4f       	sbci	r31, 0xFC	; 252
    3128:	50 81       	ld	r21, Z
    312a:	5f 3f       	cpi	r21, 0xFF	; 255
    312c:	11 f0       	breq	.+4      	; 0x3132 <_Z12declareTimerjh9timerModePFvvEjPVj+0x54>
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	f6 cf       	rjmp	.-20     	; 0x311e <_Z12declareTimerjh9timerModePFvvEjPVj+0x40>
    3132:	80 83       	st	Z, r24
    3134:	12 82       	std	Z+2, r1	; 0x02
    3136:	30 87       	std	Z+8, r19	; 0x08
    3138:	27 83       	std	Z+7, r18	; 0x07
    313a:	29 81       	ldd	r18, Y+1	; 0x01
    313c:	3a 81       	ldd	r19, Y+2	; 0x02
    313e:	32 87       	std	Z+10, r19	; 0x0a
    3140:	21 87       	std	Z+9, r18	; 0x09
    3142:	f4 86       	std	Z+12, r15	; 0x0c
    3144:	e3 86       	std	Z+11, r14	; 0x0b
    3146:	46 83       	std	Z+6, r20	; 0x06
    3148:	b4 83       	std	Z+4, r27	; 0x04
    314a:	a3 83       	std	Z+3, r26	; 0x03
    314c:	65 83       	std	Z+5, r22	; 0x05
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	ff 90       	pop	r15
    315c:	ef 90       	pop	r14
    315e:	08 95       	ret

00003160 <_Z10startTimerh>:
    3160:	cf 93       	push	r28
    3162:	c8 2f       	mov	r28, r24
    3164:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <timerInitialized>
    3168:	81 11       	cpse	r24, r1
    316a:	0c c0       	rjmp	.+24     	; 0x3184 <_Z10startTimerh+0x24>
    316c:	f1 de       	rcall	.-542    	; 0x2f50 <_Z12initMilliISRv>
    316e:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <_ZL9global_ms>
    3172:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <_ZL9global_ms+0x1>
    3176:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <_ZL9global_ms+0x2>
    317a:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZL9global_ms+0x3>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <timerInitialized>
    3184:	8d e0       	ldi	r24, 0x0D	; 13
    3186:	c8 9f       	mul	r28, r24
    3188:	f0 01       	movw	r30, r0
    318a:	11 24       	eor	r1, r1
    318c:	e1 56       	subi	r30, 0x61	; 97
    318e:	fc 4f       	sbci	r31, 0xFC	; 252
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	81 83       	std	Z+1, r24	; 0x01
    3194:	cf 91       	pop	r28
    3196:	08 95       	ret

00003198 <_Z12timerElapsedh>:
    3198:	2d e0       	ldi	r18, 0x0D	; 13
    319a:	82 9f       	mul	r24, r18
    319c:	c0 01       	movw	r24, r0
    319e:	11 24       	eor	r1, r1
    31a0:	fc 01       	movw	r30, r24
    31a2:	e1 56       	subi	r30, 0x61	; 97
    31a4:	fc 4f       	sbci	r31, 0xFC	; 252
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	08 95       	ret

000031aa <_Z17clearTimerElapsedh>:
    31aa:	2d e0       	ldi	r18, 0x0D	; 13
    31ac:	82 9f       	mul	r24, r18
    31ae:	c0 01       	movw	r24, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	fc 01       	movw	r30, r24
    31b4:	e1 56       	subi	r30, 0x61	; 97
    31b6:	fc 4f       	sbci	r31, 0xFC	; 252
    31b8:	12 82       	std	Z+2, r1	; 0x02
    31ba:	08 95       	ret

000031bc <_Z13getGolabal_msv>:
 }
 
uint32_t getGolabal_ms()
 {
	 cli();
    31bc:	f8 94       	cli
	 return global_ms;
    31be:	60 91 85 03 	lds	r22, 0x0385	; 0x800385 <_ZL9global_ms>
    31c2:	70 91 86 03 	lds	r23, 0x0386	; 0x800386 <_ZL9global_ms+0x1>
    31c6:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_ZL9global_ms+0x2>
    31ca:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <_ZL9global_ms+0x3>
	 sei();
    31ce:	08 95       	ret

000031d0 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>:
	
	(*EICRx) |= (1<<ISCn0);
	EIMSK |= (1<<INTx0);	
	
	TCCR1B |= (1<<CS12);
}
    31d0:	fc 01       	movw	r30, r24
    31d2:	63 30       	cpi	r22, 0x03	; 3
    31d4:	59 f1       	breq	.+86     	; 0x322c <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0x5c>
    31d6:	65 30       	cpi	r22, 0x05	; 5
    31d8:	09 f4       	brne	.+2      	; 0x31dc <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xc>
    31da:	4c c0       	rjmp	.+152    	; 0x3274 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xa4>
    31dc:	62 30       	cpi	r22, 0x02	; 2
    31de:	09 f0       	breq	.+2      	; 0x31e2 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0x12>
    31e0:	71 c0       	rjmp	.+226    	; 0x32c4 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xf4>
    31e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    31e6:	82 60       	ori	r24, 0x02	; 2
    31e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    31ec:	52 98       	cbi	0x0a, 2	; 10
    31ee:	8b e0       	ldi	r24, 0x0B	; 11
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	97 83       	std	Z+7, r25	; 0x07
    31f4:	86 83       	std	Z+6, r24	; 0x06
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	80 87       	std	Z+8, r24	; 0x08
    31fa:	8c ef       	ldi	r24, 0xFC	; 252
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
    3202:	8f ef       	ldi	r24, 0xFF	; 255
    3204:	9f ef       	ldi	r25, 0xFF	; 255
    3206:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <CurrentDistance_INT_2+0x1>
    320a:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <CurrentDistance_INT_2>
    320e:	84 ef       	ldi	r24, 0xF4	; 244
    3210:	93 e0       	ldi	r25, 0x03	; 3
    3212:	93 83       	std	Z+3, r25	; 0x03
    3214:	82 83       	std	Z+2, r24	; 0x02
    3216:	88 ee       	ldi	r24, 0xE8	; 232
    3218:	93 e0       	ldi	r25, 0x03	; 3
    321a:	95 83       	std	Z+5, r25	; 0x05
    321c:	84 83       	std	Z+4, r24	; 0x04
    321e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3222:	80 61       	ori	r24, 0x10	; 16
    3224:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3228:	ea 9a       	sbi	0x1d, 2	; 29
    322a:	47 c0       	rjmp	.+142    	; 0x32ba <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xea>
    322c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3230:	88 60       	ori	r24, 0x08	; 8
    3232:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3236:	53 98       	cbi	0x0a, 3	; 10
    3238:	8b e0       	ldi	r24, 0x0B	; 11
    323a:	91 e0       	ldi	r25, 0x01	; 1
    323c:	97 83       	std	Z+7, r25	; 0x07
    323e:	86 83       	std	Z+6, r24	; 0x06
    3240:	60 87       	std	Z+8, r22	; 0x08
    3242:	8a ef       	ldi	r24, 0xFA	; 250
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
    324a:	8f ef       	ldi	r24, 0xFF	; 255
    324c:	9f ef       	ldi	r25, 0xFF	; 255
    324e:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <CurrentDistance_INT_3+0x1>
    3252:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <CurrentDistance_INT_3>
    3256:	80 ef       	ldi	r24, 0xF0	; 240
    3258:	93 e0       	ldi	r25, 0x03	; 3
    325a:	93 83       	std	Z+3, r25	; 0x03
    325c:	82 83       	std	Z+2, r24	; 0x02
    325e:	84 ee       	ldi	r24, 0xE4	; 228
    3260:	93 e0       	ldi	r25, 0x03	; 3
    3262:	95 83       	std	Z+5, r25	; 0x05
    3264:	84 83       	std	Z+4, r24	; 0x04
    3266:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    326a:	80 64       	ori	r24, 0x40	; 64
    326c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3270:	eb 9a       	sbi	0x1d, 3	; 29
    3272:	23 c0       	rjmp	.+70     	; 0x32ba <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xea>
    3274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3278:	80 62       	ori	r24, 0x20	; 32
    327a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    327e:	6d 98       	cbi	0x0d, 5	; 13
    3280:	8b e0       	ldi	r24, 0x0B	; 11
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	97 83       	std	Z+7, r25	; 0x07
    3286:	86 83       	std	Z+6, r24	; 0x06
    3288:	60 87       	std	Z+8, r22	; 0x08
    328a:	88 ef       	ldi	r24, 0xF8	; 248
    328c:	93 e0       	ldi	r25, 0x03	; 3
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	8f ef       	ldi	r24, 0xFF	; 255
    3294:	9f ef       	ldi	r25, 0xFF	; 255
    3296:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <CurrentDistance_INT_5+0x1>
    329a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <CurrentDistance_INT_5>
    329e:	8c ee       	ldi	r24, 0xEC	; 236
    32a0:	93 e0       	ldi	r25, 0x03	; 3
    32a2:	93 83       	std	Z+3, r25	; 0x03
    32a4:	82 83       	std	Z+2, r24	; 0x02
    32a6:	80 ee       	ldi	r24, 0xE0	; 224
    32a8:	93 e0       	ldi	r25, 0x03	; 3
    32aa:	95 83       	std	Z+5, r25	; 0x05
    32ac:	84 83       	std	Z+4, r24	; 0x04
    32ae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    32b2:	84 60       	ori	r24, 0x04	; 4
    32b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    32b8:	ed 9a       	sbi	0x1d, 5	; 29
    32ba:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    32be:	84 60       	ori	r24, 0x04	; 4
    32c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    32c4:	08 95       	ret

000032c6 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>:

void Ultra_Sonic_Range_Finder_Driver::pullTrigger()
{
    32c6:	dc 01       	movw	r26, r24
	*(this->PORTx_Trigger) |= (1<<this->PORTxN_Trigger);
    32c8:	16 96       	adiw	r26, 0x06	; 6
    32ca:	ed 91       	ld	r30, X+
    32cc:	fc 91       	ld	r31, X
    32ce:	17 97       	sbiw	r26, 0x07	; 7
    32d0:	40 81       	ld	r20, Z
    32d2:	21 e0       	ldi	r18, 0x01	; 1
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	c9 01       	movw	r24, r18
    32d8:	18 96       	adiw	r26, 0x08	; 8
    32da:	0c 90       	ld	r0, X
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv+0x1c>
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	0a 94       	dec	r0
    32e4:	e2 f7       	brpl	.-8      	; 0x32de <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv+0x18>
    32e6:	84 2b       	or	r24, r20
    32e8:	80 83       	st	Z, r24
    32ea:	08 95       	ret

000032ec <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>:
}

void Ultra_Sonic_Range_Finder_Driver::stopTriggering()
{
	*(this->PORTx_Trigger) &= ~(1<<this->PORTxN_Trigger);
    32ec:	dc 01       	movw	r26, r24
    32ee:	16 96       	adiw	r26, 0x06	; 6
    32f0:	ed 91       	ld	r30, X+
    32f2:	fc 91       	ld	r31, X
    32f4:	17 97       	sbiw	r26, 0x07	; 7
    32f6:	40 81       	ld	r20, Z
    32f8:	21 e0       	ldi	r18, 0x01	; 1
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	b9 01       	movw	r22, r18
    32fe:	18 96       	adiw	r26, 0x08	; 8
    3300:	0c 90       	ld	r0, X
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv+0x1c>
    3304:	66 0f       	add	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	0a 94       	dec	r0
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv+0x18>
    330c:	cb 01       	movw	r24, r22
    330e:	80 95       	com	r24
    3310:	84 23       	and	r24, r20
    3312:	80 83       	st	Z, r24
    3314:	08 95       	ret

00003316 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>:
}

int16_t Ultra_Sonic_Range_Finder_Driver::getDistance()
{
	cli();
    3316:	f8 94       	cli
	int16_t dist = *(this->CurrentDistance);
    3318:	dc 01       	movw	r26, r24
    331a:	ed 91       	ld	r30, X+
    331c:	fc 91       	ld	r31, X
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
	sei();
    3322:	78 94       	sei
	return dist;
}
    3324:	08 95       	ret

00003326 <_Z12Echo_INT_ISRPVhhPViPVmS4_>:

void Echo_INT_ISR(volatile uint8_t* PINx_Echo, uint8_t PINxN_Echo, volatile int16_t* _CurrentDistance, volatile uint32_t* _BurstSent_TimerTimestamp, volatile uint32_t* _BurstSent_MsTimestamp)
{
    3326:	4f 92       	push	r4
    3328:	5f 92       	push	r5
    332a:	6f 92       	push	r6
    332c:	7f 92       	push	r7
    332e:	8f 92       	push	r8
    3330:	9f 92       	push	r9
    3332:	af 92       	push	r10
    3334:	bf 92       	push	r11
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	6c 01       	movw	r12, r24
    3348:	76 2e       	mov	r7, r22
    334a:	7a 01       	movw	r14, r20
    334c:	e9 01       	movw	r28, r18
	uint32_t TimerTimestamp = TCNT1;
    334e:	80 90 84 00 	lds	r8, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    3352:	90 90 85 00 	lds	r9, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    3356:	a1 2c       	mov	r10, r1
    3358:	b1 2c       	mov	r11, r1
	uint32_t msTimestamp = getGolabal_ms();
    335a:	30 df       	rcall	.-416    	; 0x31bc <_Z13getGolabal_msv>
	
	if ((*PINx_Echo) & (1<<PINxN_Echo))
    335c:	f6 01       	movw	r30, r12
    335e:	20 81       	ld	r18, Z
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x42>
    3364:	35 95       	asr	r19
    3366:	27 95       	ror	r18
    3368:	7a 94       	dec	r7
    336a:	e2 f7       	brpl	.-8      	; 0x3364 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x3e>
    336c:	20 ff       	sbrs	r18, 0
    336e:	0a c0       	rjmp	.+20     	; 0x3384 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x5e>
	{
		*_BurstSent_TimerTimestamp = TimerTimestamp;
    3370:	88 82       	st	Y, r8
    3372:	99 82       	std	Y+1, r9	; 0x01
    3374:	aa 82       	std	Y+2, r10	; 0x02
    3376:	bb 82       	std	Y+3, r11	; 0x03
		*_BurstSent_MsTimestamp = msTimestamp;
    3378:	f8 01       	movw	r30, r16
    337a:	60 83       	st	Z, r22
    337c:	71 83       	std	Z+1, r23	; 0x01
    337e:	82 83       	std	Z+2, r24	; 0x02
    3380:	93 83       	std	Z+3, r25	; 0x03
    3382:	3a c0       	rjmp	.+116    	; 0x33f8 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xd2>
	}
	else
	{
		if(TimerTimestamp < (*_BurstSent_TimerTimestamp))
    3384:	48 80       	ld	r4, Y
    3386:	59 80       	ldd	r5, Y+1	; 0x01
    3388:	6a 80       	ldd	r6, Y+2	; 0x02
    338a:	7b 80       	ldd	r7, Y+3	; 0x03
    338c:	84 14       	cp	r8, r4
    338e:	95 04       	cpc	r9, r5
    3390:	a6 04       	cpc	r10, r6
    3392:	b7 04       	cpc	r11, r7
    3394:	30 f4       	brcc	.+12     	; 0x33a2 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x7c>
		{
			TimerTimestamp = TIMER_1_TOP + TimerTimestamp + 1;
    3396:	fa e9       	ldi	r31, 0x9A	; 154
    3398:	8f 0e       	add	r8, r31
    339a:	f9 e1       	ldi	r31, 0x19	; 25
    339c:	9f 1e       	adc	r9, r31
    339e:	a1 1c       	adc	r10, r1
    33a0:	b1 1c       	adc	r11, r1
		}
		
		uint32_t TravelTime_us = (TimerTimestamp - (*_BurstSent_TimerTimestamp))*16; // 1 timer tick = 16us
    33a2:	48 80       	ld	r4, Y
    33a4:	59 80       	ldd	r5, Y+1	; 0x01
    33a6:	6a 80       	ldd	r6, Y+2	; 0x02
    33a8:	7b 80       	ldd	r7, Y+3	; 0x03
		uint32_t TravelTime_ms = msTimestamp - (*_BurstSent_MsTimestamp);
    33aa:	f8 01       	movw	r30, r16
    33ac:	00 81       	ld	r16, Z
    33ae:	11 81       	ldd	r17, Z+1	; 0x01
    33b0:	22 81       	ldd	r18, Z+2	; 0x02
    33b2:	33 81       	ldd	r19, Z+3	; 0x03
		if(TravelTime_ms > 8)
    33b4:	ab 01       	movw	r20, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	40 1b       	sub	r20, r16
    33ba:	51 0b       	sbc	r21, r17
    33bc:	62 0b       	sbc	r22, r18
    33be:	73 0b       	sbc	r23, r19
    33c0:	49 30       	cpi	r20, 0x09	; 9
    33c2:	51 05       	cpc	r21, r1
    33c4:	61 05       	cpc	r22, r1
    33c6:	71 05       	cpc	r23, r1
    33c8:	30 f0       	brcs	.+12     	; 0x33d6 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xb0>
		{
			(*_CurrentDistance) = -1;
    33ca:	8f ef       	ldi	r24, 0xFF	; 255
    33cc:	9f ef       	ldi	r25, 0xFF	; 255
    33ce:	f7 01       	movw	r30, r14
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	11 c0       	rjmp	.+34     	; 0x33f8 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xd2>
		}
		else
		{
			(*_CurrentDistance) = ((TravelTime_us*10)/58)/10;
    33d6:	a5 01       	movw	r20, r10
    33d8:	94 01       	movw	r18, r8
    33da:	24 19       	sub	r18, r4
    33dc:	35 09       	sbc	r19, r5
    33de:	46 09       	sbc	r20, r6
    33e0:	57 09       	sbc	r21, r7
    33e2:	a0 ea       	ldi	r26, 0xA0	; 160
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	65 d5       	rcall	.+2762   	; 0x3eb2 <__muluhisi3>
    33e8:	24 e4       	ldi	r18, 0x44	; 68
    33ea:	32 e0       	ldi	r19, 0x02	; 2
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	13 d5       	rcall	.+2598   	; 0x3e18 <__udivmodsi4>
    33f2:	f7 01       	movw	r30, r14
    33f4:	31 83       	std	Z+1, r19	; 0x01
    33f6:	20 83       	st	Z, r18
			
	}	
	//(*_CurrentDistance) = ((TravelTime*10)/58)/10;
	
	//(*_CurrentDistance) = (TravelTime * 625) / 58000;
}
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	bf 90       	pop	r11
    340a:	af 90       	pop	r10
    340c:	9f 90       	pop	r9
    340e:	8f 90       	pop	r8
    3410:	7f 90       	pop	r7
    3412:	6f 90       	pop	r6
    3414:	5f 90       	pop	r5
    3416:	4f 90       	pop	r4
    3418:	08 95       	ret

0000341a <__vector_3>:


ISR(INT2_vect)
{
    341a:	1f 92       	push	r1
    341c:	0f 92       	push	r0
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	0f 92       	push	r0
    3422:	11 24       	eor	r1, r1
    3424:	0b b6       	in	r0, 0x3b	; 59
    3426:	0f 92       	push	r0
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	4f 93       	push	r20
    3432:	5f 93       	push	r21
    3434:	6f 93       	push	r22
    3436:	7f 93       	push	r23
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    3440:	ef 93       	push	r30
    3442:	ff 93       	push	r31
	Echo_INT_ISR(&PIND, PIND2, &CurrentDistance_INT_2, &BurstSent_Timestamp_INT_2, &BurstSent_Timestamp_Ms_INT_2);
    3444:	08 ee       	ldi	r16, 0xE8	; 232
    3446:	13 e0       	ldi	r17, 0x03	; 3
    3448:	24 ef       	ldi	r18, 0xF4	; 244
    344a:	33 e0       	ldi	r19, 0x03	; 3
    344c:	4c ef       	ldi	r20, 0xFC	; 252
    344e:	53 e0       	ldi	r21, 0x03	; 3
    3450:	62 e0       	ldi	r22, 0x02	; 2
    3452:	89 e2       	ldi	r24, 0x29	; 41
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	67 df       	rcall	.-306    	; 0x3326 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
}
    3458:	ff 91       	pop	r31
    345a:	ef 91       	pop	r30
    345c:	bf 91       	pop	r27
    345e:	af 91       	pop	r26
    3460:	9f 91       	pop	r25
    3462:	8f 91       	pop	r24
    3464:	7f 91       	pop	r23
    3466:	6f 91       	pop	r22
    3468:	5f 91       	pop	r21
    346a:	4f 91       	pop	r20
    346c:	3f 91       	pop	r19
    346e:	2f 91       	pop	r18
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	0f 90       	pop	r0
    3476:	0b be       	out	0x3b, r0	; 59
    3478:	0f 90       	pop	r0
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	0f 90       	pop	r0
    347e:	1f 90       	pop	r1
    3480:	18 95       	reti

00003482 <__vector_4>:

ISR(INT3_vect)
{
    3482:	1f 92       	push	r1
    3484:	0f 92       	push	r0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	0f 92       	push	r0
    348a:	11 24       	eor	r1, r1
    348c:	0b b6       	in	r0, 0x3b	; 59
    348e:	0f 92       	push	r0
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	2f 93       	push	r18
    3496:	3f 93       	push	r19
    3498:	4f 93       	push	r20
    349a:	5f 93       	push	r21
    349c:	6f 93       	push	r22
    349e:	7f 93       	push	r23
    34a0:	8f 93       	push	r24
    34a2:	9f 93       	push	r25
    34a4:	af 93       	push	r26
    34a6:	bf 93       	push	r27
    34a8:	ef 93       	push	r30
    34aa:	ff 93       	push	r31
	Echo_INT_ISR(&PIND, PIND3, &CurrentDistance_INT_3, &BurstSent_Timestamp_INT_3, &BurstSent_Timestamp_Ms_INT_3);
    34ac:	04 ee       	ldi	r16, 0xE4	; 228
    34ae:	13 e0       	ldi	r17, 0x03	; 3
    34b0:	20 ef       	ldi	r18, 0xF0	; 240
    34b2:	33 e0       	ldi	r19, 0x03	; 3
    34b4:	4a ef       	ldi	r20, 0xFA	; 250
    34b6:	53 e0       	ldi	r21, 0x03	; 3
    34b8:	63 e0       	ldi	r22, 0x03	; 3
    34ba:	89 e2       	ldi	r24, 0x29	; 41
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	33 df       	rcall	.-410    	; 0x3326 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
}
    34c0:	ff 91       	pop	r31
    34c2:	ef 91       	pop	r30
    34c4:	bf 91       	pop	r27
    34c6:	af 91       	pop	r26
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	7f 91       	pop	r23
    34ce:	6f 91       	pop	r22
    34d0:	5f 91       	pop	r21
    34d2:	4f 91       	pop	r20
    34d4:	3f 91       	pop	r19
    34d6:	2f 91       	pop	r18
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	0f 90       	pop	r0
    34de:	0b be       	out	0x3b, r0	; 59
    34e0:	0f 90       	pop	r0
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	0f 90       	pop	r0
    34e6:	1f 90       	pop	r1
    34e8:	18 95       	reti

000034ea <__vector_6>:

ISR(INT5_vect)
{
    34ea:	1f 92       	push	r1
    34ec:	0f 92       	push	r0
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	0f 92       	push	r0
    34f2:	11 24       	eor	r1, r1
    34f4:	0b b6       	in	r0, 0x3b	; 59
    34f6:	0f 92       	push	r0
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	2f 93       	push	r18
    34fe:	3f 93       	push	r19
    3500:	4f 93       	push	r20
    3502:	5f 93       	push	r21
    3504:	6f 93       	push	r22
    3506:	7f 93       	push	r23
    3508:	8f 93       	push	r24
    350a:	9f 93       	push	r25
    350c:	af 93       	push	r26
    350e:	bf 93       	push	r27
    3510:	ef 93       	push	r30
    3512:	ff 93       	push	r31
	Echo_INT_ISR(&PINE, PINE5, &CurrentDistance_INT_5, &BurstSent_Timestamp_INT_5, &BurstSent_Timestamp_Ms_INT_5);
    3514:	00 ee       	ldi	r16, 0xE0	; 224
    3516:	13 e0       	ldi	r17, 0x03	; 3
    3518:	2c ee       	ldi	r18, 0xEC	; 236
    351a:	33 e0       	ldi	r19, 0x03	; 3
    351c:	48 ef       	ldi	r20, 0xF8	; 248
    351e:	53 e0       	ldi	r21, 0x03	; 3
    3520:	65 e0       	ldi	r22, 0x05	; 5
    3522:	8c e2       	ldi	r24, 0x2C	; 44
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	ff de       	rcall	.-514    	; 0x3326 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
    3528:	ff 91       	pop	r31
    352a:	ef 91       	pop	r30
    352c:	bf 91       	pop	r27
    352e:	af 91       	pop	r26
    3530:	9f 91       	pop	r25
    3532:	8f 91       	pop	r24
    3534:	7f 91       	pop	r23
    3536:	6f 91       	pop	r22
    3538:	5f 91       	pop	r21
    353a:	4f 91       	pop	r20
    353c:	3f 91       	pop	r19
    353e:	2f 91       	pop	r18
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	0f 90       	pop	r0
    3546:	0b be       	out	0x3b, r0	; 59
    3548:	0f 90       	pop	r0
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	0f 90       	pop	r0
    354e:	1f 90       	pop	r1
    3550:	18 95       	reti

00003552 <__subsf3>:
    3552:	50 58       	subi	r21, 0x80	; 128

00003554 <__addsf3>:
    3554:	bb 27       	eor	r27, r27
    3556:	aa 27       	eor	r26, r26
    3558:	0e d0       	rcall	.+28     	; 0x3576 <__addsf3x>
    355a:	4d c1       	rjmp	.+666    	; 0x37f6 <__fp_round>
    355c:	3e d1       	rcall	.+636    	; 0x37da <__fp_pscA>
    355e:	30 f0       	brcs	.+12     	; 0x356c <__addsf3+0x18>
    3560:	43 d1       	rcall	.+646    	; 0x37e8 <__fp_pscB>
    3562:	20 f0       	brcs	.+8      	; 0x356c <__addsf3+0x18>
    3564:	31 f4       	brne	.+12     	; 0x3572 <__addsf3+0x1e>
    3566:	9f 3f       	cpi	r25, 0xFF	; 255
    3568:	11 f4       	brne	.+4      	; 0x356e <__addsf3+0x1a>
    356a:	1e f4       	brtc	.+6      	; 0x3572 <__addsf3+0x1e>
    356c:	33 c1       	rjmp	.+614    	; 0x37d4 <__fp_nan>
    356e:	0e f4       	brtc	.+2      	; 0x3572 <__addsf3+0x1e>
    3570:	e0 95       	com	r30
    3572:	e7 fb       	bst	r30, 7
    3574:	29 c1       	rjmp	.+594    	; 0x37c8 <__fp_inf>

00003576 <__addsf3x>:
    3576:	e9 2f       	mov	r30, r25
    3578:	4f d1       	rcall	.+670    	; 0x3818 <__fp_split3>
    357a:	80 f3       	brcs	.-32     	; 0x355c <__addsf3+0x8>
    357c:	ba 17       	cp	r27, r26
    357e:	62 07       	cpc	r22, r18
    3580:	73 07       	cpc	r23, r19
    3582:	84 07       	cpc	r24, r20
    3584:	95 07       	cpc	r25, r21
    3586:	18 f0       	brcs	.+6      	; 0x358e <__addsf3x+0x18>
    3588:	71 f4       	brne	.+28     	; 0x35a6 <__addsf3x+0x30>
    358a:	9e f5       	brtc	.+102    	; 0x35f2 <__addsf3x+0x7c>
    358c:	67 c1       	rjmp	.+718    	; 0x385c <__fp_zero>
    358e:	0e f4       	brtc	.+2      	; 0x3592 <__addsf3x+0x1c>
    3590:	e0 95       	com	r30
    3592:	0b 2e       	mov	r0, r27
    3594:	ba 2f       	mov	r27, r26
    3596:	a0 2d       	mov	r26, r0
    3598:	0b 01       	movw	r0, r22
    359a:	b9 01       	movw	r22, r18
    359c:	90 01       	movw	r18, r0
    359e:	0c 01       	movw	r0, r24
    35a0:	ca 01       	movw	r24, r20
    35a2:	a0 01       	movw	r20, r0
    35a4:	11 24       	eor	r1, r1
    35a6:	ff 27       	eor	r31, r31
    35a8:	59 1b       	sub	r21, r25
    35aa:	99 f0       	breq	.+38     	; 0x35d2 <__addsf3x+0x5c>
    35ac:	59 3f       	cpi	r21, 0xF9	; 249
    35ae:	50 f4       	brcc	.+20     	; 0x35c4 <__addsf3x+0x4e>
    35b0:	50 3e       	cpi	r21, 0xE0	; 224
    35b2:	68 f1       	brcs	.+90     	; 0x360e <__addsf3x+0x98>
    35b4:	1a 16       	cp	r1, r26
    35b6:	f0 40       	sbci	r31, 0x00	; 0
    35b8:	a2 2f       	mov	r26, r18
    35ba:	23 2f       	mov	r18, r19
    35bc:	34 2f       	mov	r19, r20
    35be:	44 27       	eor	r20, r20
    35c0:	58 5f       	subi	r21, 0xF8	; 248
    35c2:	f3 cf       	rjmp	.-26     	; 0x35aa <__addsf3x+0x34>
    35c4:	46 95       	lsr	r20
    35c6:	37 95       	ror	r19
    35c8:	27 95       	ror	r18
    35ca:	a7 95       	ror	r26
    35cc:	f0 40       	sbci	r31, 0x00	; 0
    35ce:	53 95       	inc	r21
    35d0:	c9 f7       	brne	.-14     	; 0x35c4 <__addsf3x+0x4e>
    35d2:	7e f4       	brtc	.+30     	; 0x35f2 <__addsf3x+0x7c>
    35d4:	1f 16       	cp	r1, r31
    35d6:	ba 0b       	sbc	r27, r26
    35d8:	62 0b       	sbc	r22, r18
    35da:	73 0b       	sbc	r23, r19
    35dc:	84 0b       	sbc	r24, r20
    35de:	ba f0       	brmi	.+46     	; 0x360e <__addsf3x+0x98>
    35e0:	91 50       	subi	r25, 0x01	; 1
    35e2:	a1 f0       	breq	.+40     	; 0x360c <__addsf3x+0x96>
    35e4:	ff 0f       	add	r31, r31
    35e6:	bb 1f       	adc	r27, r27
    35e8:	66 1f       	adc	r22, r22
    35ea:	77 1f       	adc	r23, r23
    35ec:	88 1f       	adc	r24, r24
    35ee:	c2 f7       	brpl	.-16     	; 0x35e0 <__addsf3x+0x6a>
    35f0:	0e c0       	rjmp	.+28     	; 0x360e <__addsf3x+0x98>
    35f2:	ba 0f       	add	r27, r26
    35f4:	62 1f       	adc	r22, r18
    35f6:	73 1f       	adc	r23, r19
    35f8:	84 1f       	adc	r24, r20
    35fa:	48 f4       	brcc	.+18     	; 0x360e <__addsf3x+0x98>
    35fc:	87 95       	ror	r24
    35fe:	77 95       	ror	r23
    3600:	67 95       	ror	r22
    3602:	b7 95       	ror	r27
    3604:	f7 95       	ror	r31
    3606:	9e 3f       	cpi	r25, 0xFE	; 254
    3608:	08 f0       	brcs	.+2      	; 0x360c <__addsf3x+0x96>
    360a:	b3 cf       	rjmp	.-154    	; 0x3572 <__addsf3+0x1e>
    360c:	93 95       	inc	r25
    360e:	88 0f       	add	r24, r24
    3610:	08 f0       	brcs	.+2      	; 0x3614 <__addsf3x+0x9e>
    3612:	99 27       	eor	r25, r25
    3614:	ee 0f       	add	r30, r30
    3616:	97 95       	ror	r25
    3618:	87 95       	ror	r24
    361a:	08 95       	ret

0000361c <__divsf3>:
    361c:	0c d0       	rcall	.+24     	; 0x3636 <__divsf3x>
    361e:	eb c0       	rjmp	.+470    	; 0x37f6 <__fp_round>
    3620:	e3 d0       	rcall	.+454    	; 0x37e8 <__fp_pscB>
    3622:	40 f0       	brcs	.+16     	; 0x3634 <__divsf3+0x18>
    3624:	da d0       	rcall	.+436    	; 0x37da <__fp_pscA>
    3626:	30 f0       	brcs	.+12     	; 0x3634 <__divsf3+0x18>
    3628:	21 f4       	brne	.+8      	; 0x3632 <__divsf3+0x16>
    362a:	5f 3f       	cpi	r21, 0xFF	; 255
    362c:	19 f0       	breq	.+6      	; 0x3634 <__divsf3+0x18>
    362e:	cc c0       	rjmp	.+408    	; 0x37c8 <__fp_inf>
    3630:	51 11       	cpse	r21, r1
    3632:	15 c1       	rjmp	.+554    	; 0x385e <__fp_szero>
    3634:	cf c0       	rjmp	.+414    	; 0x37d4 <__fp_nan>

00003636 <__divsf3x>:
    3636:	f0 d0       	rcall	.+480    	; 0x3818 <__fp_split3>
    3638:	98 f3       	brcs	.-26     	; 0x3620 <__divsf3+0x4>

0000363a <__divsf3_pse>:
    363a:	99 23       	and	r25, r25
    363c:	c9 f3       	breq	.-14     	; 0x3630 <__divsf3+0x14>
    363e:	55 23       	and	r21, r21
    3640:	b1 f3       	breq	.-20     	; 0x362e <__divsf3+0x12>
    3642:	95 1b       	sub	r25, r21
    3644:	55 0b       	sbc	r21, r21
    3646:	bb 27       	eor	r27, r27
    3648:	aa 27       	eor	r26, r26
    364a:	62 17       	cp	r22, r18
    364c:	73 07       	cpc	r23, r19
    364e:	84 07       	cpc	r24, r20
    3650:	38 f0       	brcs	.+14     	; 0x3660 <__divsf3_pse+0x26>
    3652:	9f 5f       	subi	r25, 0xFF	; 255
    3654:	5f 4f       	sbci	r21, 0xFF	; 255
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	44 1f       	adc	r20, r20
    365c:	aa 1f       	adc	r26, r26
    365e:	a9 f3       	breq	.-22     	; 0x364a <__divsf3_pse+0x10>
    3660:	33 d0       	rcall	.+102    	; 0x36c8 <__divsf3_pse+0x8e>
    3662:	0e 2e       	mov	r0, r30
    3664:	3a f0       	brmi	.+14     	; 0x3674 <__divsf3_pse+0x3a>
    3666:	e0 e8       	ldi	r30, 0x80	; 128
    3668:	30 d0       	rcall	.+96     	; 0x36ca <__divsf3_pse+0x90>
    366a:	91 50       	subi	r25, 0x01	; 1
    366c:	50 40       	sbci	r21, 0x00	; 0
    366e:	e6 95       	lsr	r30
    3670:	00 1c       	adc	r0, r0
    3672:	ca f7       	brpl	.-14     	; 0x3666 <__divsf3_pse+0x2c>
    3674:	29 d0       	rcall	.+82     	; 0x36c8 <__divsf3_pse+0x8e>
    3676:	fe 2f       	mov	r31, r30
    3678:	27 d0       	rcall	.+78     	; 0x36c8 <__divsf3_pse+0x8e>
    367a:	66 0f       	add	r22, r22
    367c:	77 1f       	adc	r23, r23
    367e:	88 1f       	adc	r24, r24
    3680:	bb 1f       	adc	r27, r27
    3682:	26 17       	cp	r18, r22
    3684:	37 07       	cpc	r19, r23
    3686:	48 07       	cpc	r20, r24
    3688:	ab 07       	cpc	r26, r27
    368a:	b0 e8       	ldi	r27, 0x80	; 128
    368c:	09 f0       	breq	.+2      	; 0x3690 <__divsf3_pse+0x56>
    368e:	bb 0b       	sbc	r27, r27
    3690:	80 2d       	mov	r24, r0
    3692:	bf 01       	movw	r22, r30
    3694:	ff 27       	eor	r31, r31
    3696:	93 58       	subi	r25, 0x83	; 131
    3698:	5f 4f       	sbci	r21, 0xFF	; 255
    369a:	2a f0       	brmi	.+10     	; 0x36a6 <__divsf3_pse+0x6c>
    369c:	9e 3f       	cpi	r25, 0xFE	; 254
    369e:	51 05       	cpc	r21, r1
    36a0:	68 f0       	brcs	.+26     	; 0x36bc <__divsf3_pse+0x82>
    36a2:	92 c0       	rjmp	.+292    	; 0x37c8 <__fp_inf>
    36a4:	dc c0       	rjmp	.+440    	; 0x385e <__fp_szero>
    36a6:	5f 3f       	cpi	r21, 0xFF	; 255
    36a8:	ec f3       	brlt	.-6      	; 0x36a4 <__divsf3_pse+0x6a>
    36aa:	98 3e       	cpi	r25, 0xE8	; 232
    36ac:	dc f3       	brlt	.-10     	; 0x36a4 <__divsf3_pse+0x6a>
    36ae:	86 95       	lsr	r24
    36b0:	77 95       	ror	r23
    36b2:	67 95       	ror	r22
    36b4:	b7 95       	ror	r27
    36b6:	f7 95       	ror	r31
    36b8:	9f 5f       	subi	r25, 0xFF	; 255
    36ba:	c9 f7       	brne	.-14     	; 0x36ae <__divsf3_pse+0x74>
    36bc:	88 0f       	add	r24, r24
    36be:	91 1d       	adc	r25, r1
    36c0:	96 95       	lsr	r25
    36c2:	87 95       	ror	r24
    36c4:	97 f9       	bld	r25, 7
    36c6:	08 95       	ret
    36c8:	e1 e0       	ldi	r30, 0x01	; 1
    36ca:	66 0f       	add	r22, r22
    36cc:	77 1f       	adc	r23, r23
    36ce:	88 1f       	adc	r24, r24
    36d0:	bb 1f       	adc	r27, r27
    36d2:	62 17       	cp	r22, r18
    36d4:	73 07       	cpc	r23, r19
    36d6:	84 07       	cpc	r24, r20
    36d8:	ba 07       	cpc	r27, r26
    36da:	20 f0       	brcs	.+8      	; 0x36e4 <__divsf3_pse+0xaa>
    36dc:	62 1b       	sub	r22, r18
    36de:	73 0b       	sbc	r23, r19
    36e0:	84 0b       	sbc	r24, r20
    36e2:	ba 0b       	sbc	r27, r26
    36e4:	ee 1f       	adc	r30, r30
    36e6:	88 f7       	brcc	.-30     	; 0x36ca <__divsf3_pse+0x90>
    36e8:	e0 95       	com	r30
    36ea:	08 95       	ret

000036ec <__fixsfsi>:
    36ec:	04 d0       	rcall	.+8      	; 0x36f6 <__fixunssfsi>
    36ee:	68 94       	set
    36f0:	b1 11       	cpse	r27, r1
    36f2:	b5 c0       	rjmp	.+362    	; 0x385e <__fp_szero>
    36f4:	08 95       	ret

000036f6 <__fixunssfsi>:
    36f6:	98 d0       	rcall	.+304    	; 0x3828 <__fp_splitA>
    36f8:	88 f0       	brcs	.+34     	; 0x371c <__fixunssfsi+0x26>
    36fa:	9f 57       	subi	r25, 0x7F	; 127
    36fc:	90 f0       	brcs	.+36     	; 0x3722 <__fixunssfsi+0x2c>
    36fe:	b9 2f       	mov	r27, r25
    3700:	99 27       	eor	r25, r25
    3702:	b7 51       	subi	r27, 0x17	; 23
    3704:	a0 f0       	brcs	.+40     	; 0x372e <__fixunssfsi+0x38>
    3706:	d1 f0       	breq	.+52     	; 0x373c <__fixunssfsi+0x46>
    3708:	66 0f       	add	r22, r22
    370a:	77 1f       	adc	r23, r23
    370c:	88 1f       	adc	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	1a f0       	brmi	.+6      	; 0x3718 <__fixunssfsi+0x22>
    3712:	ba 95       	dec	r27
    3714:	c9 f7       	brne	.-14     	; 0x3708 <__fixunssfsi+0x12>
    3716:	12 c0       	rjmp	.+36     	; 0x373c <__fixunssfsi+0x46>
    3718:	b1 30       	cpi	r27, 0x01	; 1
    371a:	81 f0       	breq	.+32     	; 0x373c <__fixunssfsi+0x46>
    371c:	9f d0       	rcall	.+318    	; 0x385c <__fp_zero>
    371e:	b1 e0       	ldi	r27, 0x01	; 1
    3720:	08 95       	ret
    3722:	9c c0       	rjmp	.+312    	; 0x385c <__fp_zero>
    3724:	67 2f       	mov	r22, r23
    3726:	78 2f       	mov	r23, r24
    3728:	88 27       	eor	r24, r24
    372a:	b8 5f       	subi	r27, 0xF8	; 248
    372c:	39 f0       	breq	.+14     	; 0x373c <__fixunssfsi+0x46>
    372e:	b9 3f       	cpi	r27, 0xF9	; 249
    3730:	cc f3       	brlt	.-14     	; 0x3724 <__fixunssfsi+0x2e>
    3732:	86 95       	lsr	r24
    3734:	77 95       	ror	r23
    3736:	67 95       	ror	r22
    3738:	b3 95       	inc	r27
    373a:	d9 f7       	brne	.-10     	; 0x3732 <__fixunssfsi+0x3c>
    373c:	3e f4       	brtc	.+14     	; 0x374c <__fixunssfsi+0x56>
    373e:	90 95       	com	r25
    3740:	80 95       	com	r24
    3742:	70 95       	com	r23
    3744:	61 95       	neg	r22
    3746:	7f 4f       	sbci	r23, 0xFF	; 255
    3748:	8f 4f       	sbci	r24, 0xFF	; 255
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	08 95       	ret

0000374e <__floatunsisf>:
    374e:	e8 94       	clt
    3750:	09 c0       	rjmp	.+18     	; 0x3764 <__floatsisf+0x12>

00003752 <__floatsisf>:
    3752:	97 fb       	bst	r25, 7
    3754:	3e f4       	brtc	.+14     	; 0x3764 <__floatsisf+0x12>
    3756:	90 95       	com	r25
    3758:	80 95       	com	r24
    375a:	70 95       	com	r23
    375c:	61 95       	neg	r22
    375e:	7f 4f       	sbci	r23, 0xFF	; 255
    3760:	8f 4f       	sbci	r24, 0xFF	; 255
    3762:	9f 4f       	sbci	r25, 0xFF	; 255
    3764:	99 23       	and	r25, r25
    3766:	a9 f0       	breq	.+42     	; 0x3792 <__floatsisf+0x40>
    3768:	f9 2f       	mov	r31, r25
    376a:	96 e9       	ldi	r25, 0x96	; 150
    376c:	bb 27       	eor	r27, r27
    376e:	93 95       	inc	r25
    3770:	f6 95       	lsr	r31
    3772:	87 95       	ror	r24
    3774:	77 95       	ror	r23
    3776:	67 95       	ror	r22
    3778:	b7 95       	ror	r27
    377a:	f1 11       	cpse	r31, r1
    377c:	f8 cf       	rjmp	.-16     	; 0x376e <__floatsisf+0x1c>
    377e:	fa f4       	brpl	.+62     	; 0x37be <__floatsisf+0x6c>
    3780:	bb 0f       	add	r27, r27
    3782:	11 f4       	brne	.+4      	; 0x3788 <__floatsisf+0x36>
    3784:	60 ff       	sbrs	r22, 0
    3786:	1b c0       	rjmp	.+54     	; 0x37be <__floatsisf+0x6c>
    3788:	6f 5f       	subi	r22, 0xFF	; 255
    378a:	7f 4f       	sbci	r23, 0xFF	; 255
    378c:	8f 4f       	sbci	r24, 0xFF	; 255
    378e:	9f 4f       	sbci	r25, 0xFF	; 255
    3790:	16 c0       	rjmp	.+44     	; 0x37be <__floatsisf+0x6c>
    3792:	88 23       	and	r24, r24
    3794:	11 f0       	breq	.+4      	; 0x379a <__floatsisf+0x48>
    3796:	96 e9       	ldi	r25, 0x96	; 150
    3798:	11 c0       	rjmp	.+34     	; 0x37bc <__floatsisf+0x6a>
    379a:	77 23       	and	r23, r23
    379c:	21 f0       	breq	.+8      	; 0x37a6 <__floatsisf+0x54>
    379e:	9e e8       	ldi	r25, 0x8E	; 142
    37a0:	87 2f       	mov	r24, r23
    37a2:	76 2f       	mov	r23, r22
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <__floatsisf+0x5e>
    37a6:	66 23       	and	r22, r22
    37a8:	71 f0       	breq	.+28     	; 0x37c6 <__floatsisf+0x74>
    37aa:	96 e8       	ldi	r25, 0x86	; 134
    37ac:	86 2f       	mov	r24, r22
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	2a f0       	brmi	.+10     	; 0x37be <__floatsisf+0x6c>
    37b4:	9a 95       	dec	r25
    37b6:	66 0f       	add	r22, r22
    37b8:	77 1f       	adc	r23, r23
    37ba:	88 1f       	adc	r24, r24
    37bc:	da f7       	brpl	.-10     	; 0x37b4 <__floatsisf+0x62>
    37be:	88 0f       	add	r24, r24
    37c0:	96 95       	lsr	r25
    37c2:	87 95       	ror	r24
    37c4:	97 f9       	bld	r25, 7
    37c6:	08 95       	ret

000037c8 <__fp_inf>:
    37c8:	97 f9       	bld	r25, 7
    37ca:	9f 67       	ori	r25, 0x7F	; 127
    37cc:	80 e8       	ldi	r24, 0x80	; 128
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	08 95       	ret

000037d4 <__fp_nan>:
    37d4:	9f ef       	ldi	r25, 0xFF	; 255
    37d6:	80 ec       	ldi	r24, 0xC0	; 192
    37d8:	08 95       	ret

000037da <__fp_pscA>:
    37da:	00 24       	eor	r0, r0
    37dc:	0a 94       	dec	r0
    37de:	16 16       	cp	r1, r22
    37e0:	17 06       	cpc	r1, r23
    37e2:	18 06       	cpc	r1, r24
    37e4:	09 06       	cpc	r0, r25
    37e6:	08 95       	ret

000037e8 <__fp_pscB>:
    37e8:	00 24       	eor	r0, r0
    37ea:	0a 94       	dec	r0
    37ec:	12 16       	cp	r1, r18
    37ee:	13 06       	cpc	r1, r19
    37f0:	14 06       	cpc	r1, r20
    37f2:	05 06       	cpc	r0, r21
    37f4:	08 95       	ret

000037f6 <__fp_round>:
    37f6:	09 2e       	mov	r0, r25
    37f8:	03 94       	inc	r0
    37fa:	00 0c       	add	r0, r0
    37fc:	11 f4       	brne	.+4      	; 0x3802 <__fp_round+0xc>
    37fe:	88 23       	and	r24, r24
    3800:	52 f0       	brmi	.+20     	; 0x3816 <__fp_round+0x20>
    3802:	bb 0f       	add	r27, r27
    3804:	40 f4       	brcc	.+16     	; 0x3816 <__fp_round+0x20>
    3806:	bf 2b       	or	r27, r31
    3808:	11 f4       	brne	.+4      	; 0x380e <__fp_round+0x18>
    380a:	60 ff       	sbrs	r22, 0
    380c:	04 c0       	rjmp	.+8      	; 0x3816 <__fp_round+0x20>
    380e:	6f 5f       	subi	r22, 0xFF	; 255
    3810:	7f 4f       	sbci	r23, 0xFF	; 255
    3812:	8f 4f       	sbci	r24, 0xFF	; 255
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	08 95       	ret

00003818 <__fp_split3>:
    3818:	57 fd       	sbrc	r21, 7
    381a:	90 58       	subi	r25, 0x80	; 128
    381c:	44 0f       	add	r20, r20
    381e:	55 1f       	adc	r21, r21
    3820:	59 f0       	breq	.+22     	; 0x3838 <__fp_splitA+0x10>
    3822:	5f 3f       	cpi	r21, 0xFF	; 255
    3824:	71 f0       	breq	.+28     	; 0x3842 <__fp_splitA+0x1a>
    3826:	47 95       	ror	r20

00003828 <__fp_splitA>:
    3828:	88 0f       	add	r24, r24
    382a:	97 fb       	bst	r25, 7
    382c:	99 1f       	adc	r25, r25
    382e:	61 f0       	breq	.+24     	; 0x3848 <__fp_splitA+0x20>
    3830:	9f 3f       	cpi	r25, 0xFF	; 255
    3832:	79 f0       	breq	.+30     	; 0x3852 <__fp_splitA+0x2a>
    3834:	87 95       	ror	r24
    3836:	08 95       	ret
    3838:	12 16       	cp	r1, r18
    383a:	13 06       	cpc	r1, r19
    383c:	14 06       	cpc	r1, r20
    383e:	55 1f       	adc	r21, r21
    3840:	f2 cf       	rjmp	.-28     	; 0x3826 <__fp_split3+0xe>
    3842:	46 95       	lsr	r20
    3844:	f1 df       	rcall	.-30     	; 0x3828 <__fp_splitA>
    3846:	08 c0       	rjmp	.+16     	; 0x3858 <__fp_splitA+0x30>
    3848:	16 16       	cp	r1, r22
    384a:	17 06       	cpc	r1, r23
    384c:	18 06       	cpc	r1, r24
    384e:	99 1f       	adc	r25, r25
    3850:	f1 cf       	rjmp	.-30     	; 0x3834 <__fp_splitA+0xc>
    3852:	86 95       	lsr	r24
    3854:	71 05       	cpc	r23, r1
    3856:	61 05       	cpc	r22, r1
    3858:	08 94       	sec
    385a:	08 95       	ret

0000385c <__fp_zero>:
    385c:	e8 94       	clt

0000385e <__fp_szero>:
    385e:	bb 27       	eor	r27, r27
    3860:	66 27       	eor	r22, r22
    3862:	77 27       	eor	r23, r23
    3864:	cb 01       	movw	r24, r22
    3866:	97 f9       	bld	r25, 7
    3868:	08 95       	ret

0000386a <__mulsf3>:
    386a:	0b d0       	rcall	.+22     	; 0x3882 <__mulsf3x>
    386c:	c4 cf       	rjmp	.-120    	; 0x37f6 <__fp_round>
    386e:	b5 df       	rcall	.-150    	; 0x37da <__fp_pscA>
    3870:	28 f0       	brcs	.+10     	; 0x387c <__mulsf3+0x12>
    3872:	ba df       	rcall	.-140    	; 0x37e8 <__fp_pscB>
    3874:	18 f0       	brcs	.+6      	; 0x387c <__mulsf3+0x12>
    3876:	95 23       	and	r25, r21
    3878:	09 f0       	breq	.+2      	; 0x387c <__mulsf3+0x12>
    387a:	a6 cf       	rjmp	.-180    	; 0x37c8 <__fp_inf>
    387c:	ab cf       	rjmp	.-170    	; 0x37d4 <__fp_nan>
    387e:	11 24       	eor	r1, r1
    3880:	ee cf       	rjmp	.-36     	; 0x385e <__fp_szero>

00003882 <__mulsf3x>:
    3882:	ca df       	rcall	.-108    	; 0x3818 <__fp_split3>
    3884:	a0 f3       	brcs	.-24     	; 0x386e <__mulsf3+0x4>

00003886 <__mulsf3_pse>:
    3886:	95 9f       	mul	r25, r21
    3888:	d1 f3       	breq	.-12     	; 0x387e <__mulsf3+0x14>
    388a:	95 0f       	add	r25, r21
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	55 1f       	adc	r21, r21
    3890:	62 9f       	mul	r22, r18
    3892:	f0 01       	movw	r30, r0
    3894:	72 9f       	mul	r23, r18
    3896:	bb 27       	eor	r27, r27
    3898:	f0 0d       	add	r31, r0
    389a:	b1 1d       	adc	r27, r1
    389c:	63 9f       	mul	r22, r19
    389e:	aa 27       	eor	r26, r26
    38a0:	f0 0d       	add	r31, r0
    38a2:	b1 1d       	adc	r27, r1
    38a4:	aa 1f       	adc	r26, r26
    38a6:	64 9f       	mul	r22, r20
    38a8:	66 27       	eor	r22, r22
    38aa:	b0 0d       	add	r27, r0
    38ac:	a1 1d       	adc	r26, r1
    38ae:	66 1f       	adc	r22, r22
    38b0:	82 9f       	mul	r24, r18
    38b2:	22 27       	eor	r18, r18
    38b4:	b0 0d       	add	r27, r0
    38b6:	a1 1d       	adc	r26, r1
    38b8:	62 1f       	adc	r22, r18
    38ba:	73 9f       	mul	r23, r19
    38bc:	b0 0d       	add	r27, r0
    38be:	a1 1d       	adc	r26, r1
    38c0:	62 1f       	adc	r22, r18
    38c2:	83 9f       	mul	r24, r19
    38c4:	a0 0d       	add	r26, r0
    38c6:	61 1d       	adc	r22, r1
    38c8:	22 1f       	adc	r18, r18
    38ca:	74 9f       	mul	r23, r20
    38cc:	33 27       	eor	r19, r19
    38ce:	a0 0d       	add	r26, r0
    38d0:	61 1d       	adc	r22, r1
    38d2:	23 1f       	adc	r18, r19
    38d4:	84 9f       	mul	r24, r20
    38d6:	60 0d       	add	r22, r0
    38d8:	21 1d       	adc	r18, r1
    38da:	82 2f       	mov	r24, r18
    38dc:	76 2f       	mov	r23, r22
    38de:	6a 2f       	mov	r22, r26
    38e0:	11 24       	eor	r1, r1
    38e2:	9f 57       	subi	r25, 0x7F	; 127
    38e4:	50 40       	sbci	r21, 0x00	; 0
    38e6:	8a f0       	brmi	.+34     	; 0x390a <__mulsf3_pse+0x84>
    38e8:	e1 f0       	breq	.+56     	; 0x3922 <__mulsf3_pse+0x9c>
    38ea:	88 23       	and	r24, r24
    38ec:	4a f0       	brmi	.+18     	; 0x3900 <__mulsf3_pse+0x7a>
    38ee:	ee 0f       	add	r30, r30
    38f0:	ff 1f       	adc	r31, r31
    38f2:	bb 1f       	adc	r27, r27
    38f4:	66 1f       	adc	r22, r22
    38f6:	77 1f       	adc	r23, r23
    38f8:	88 1f       	adc	r24, r24
    38fa:	91 50       	subi	r25, 0x01	; 1
    38fc:	50 40       	sbci	r21, 0x00	; 0
    38fe:	a9 f7       	brne	.-22     	; 0x38ea <__mulsf3_pse+0x64>
    3900:	9e 3f       	cpi	r25, 0xFE	; 254
    3902:	51 05       	cpc	r21, r1
    3904:	70 f0       	brcs	.+28     	; 0x3922 <__mulsf3_pse+0x9c>
    3906:	60 cf       	rjmp	.-320    	; 0x37c8 <__fp_inf>
    3908:	aa cf       	rjmp	.-172    	; 0x385e <__fp_szero>
    390a:	5f 3f       	cpi	r21, 0xFF	; 255
    390c:	ec f3       	brlt	.-6      	; 0x3908 <__mulsf3_pse+0x82>
    390e:	98 3e       	cpi	r25, 0xE8	; 232
    3910:	dc f3       	brlt	.-10     	; 0x3908 <__mulsf3_pse+0x82>
    3912:	86 95       	lsr	r24
    3914:	77 95       	ror	r23
    3916:	67 95       	ror	r22
    3918:	b7 95       	ror	r27
    391a:	f7 95       	ror	r31
    391c:	e7 95       	ror	r30
    391e:	9f 5f       	subi	r25, 0xFF	; 255
    3920:	c1 f7       	brne	.-16     	; 0x3912 <__mulsf3_pse+0x8c>
    3922:	fe 2b       	or	r31, r30
    3924:	88 0f       	add	r24, r24
    3926:	91 1d       	adc	r25, r1
    3928:	96 95       	lsr	r25
    392a:	87 95       	ror	r24
    392c:	97 f9       	bld	r25, 7
    392e:	08 95       	ret

00003930 <_ZN14HardwareSerial9availableEv>:
    3930:	fc 01       	movw	r30, r24
    3932:	91 8d       	ldd	r25, Z+25	; 0x19
    3934:	22 8d       	ldd	r18, Z+26	; 0x1a
    3936:	89 2f       	mov	r24, r25
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	80 5c       	subi	r24, 0xC0	; 192
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	82 1b       	sub	r24, r18
    3940:	91 09       	sbc	r25, r1
    3942:	8f 73       	andi	r24, 0x3F	; 63
    3944:	99 27       	eor	r25, r25
    3946:	08 95       	ret

00003948 <_ZN14HardwareSerial4peekEv>:
    3948:	fc 01       	movw	r30, r24
    394a:	91 8d       	ldd	r25, Z+25	; 0x19
    394c:	82 8d       	ldd	r24, Z+26	; 0x1a
    394e:	98 17       	cp	r25, r24
    3950:	31 f0       	breq	.+12     	; 0x395e <_ZN14HardwareSerial4peekEv+0x16>
    3952:	82 8d       	ldd	r24, Z+26	; 0x1a
    3954:	e8 0f       	add	r30, r24
    3956:	f1 1d       	adc	r31, r1
    3958:	85 8d       	ldd	r24, Z+29	; 0x1d
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	08 95       	ret
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	9f ef       	ldi	r25, 0xFF	; 255
    3962:	08 95       	ret

00003964 <_ZN14HardwareSerial4readEv>:
    3964:	fc 01       	movw	r30, r24
    3966:	91 8d       	ldd	r25, Z+25	; 0x19
    3968:	82 8d       	ldd	r24, Z+26	; 0x1a
    396a:	98 17       	cp	r25, r24
    396c:	61 f0       	breq	.+24     	; 0x3986 <_ZN14HardwareSerial4readEv+0x22>
    396e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3970:	df 01       	movw	r26, r30
    3972:	a8 0f       	add	r26, r24
    3974:	b1 1d       	adc	r27, r1
    3976:	5d 96       	adiw	r26, 0x1d	; 29
    3978:	8c 91       	ld	r24, X
    397a:	92 8d       	ldd	r25, Z+26	; 0x1a
    397c:	9f 5f       	subi	r25, 0xFF	; 255
    397e:	9f 73       	andi	r25, 0x3F	; 63
    3980:	92 8f       	std	Z+26, r25	; 0x1a
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	08 95       	ret
    3986:	8f ef       	ldi	r24, 0xFF	; 255
    3988:	9f ef       	ldi	r25, 0xFF	; 255
    398a:	08 95       	ret

0000398c <_ZN14HardwareSerial17availableForWriteEv>:
    398c:	fc 01       	movw	r30, r24
    398e:	53 8d       	ldd	r21, Z+27	; 0x1b
    3990:	44 8d       	ldd	r20, Z+28	; 0x1c
    3992:	25 2f       	mov	r18, r21
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	84 2f       	mov	r24, r20
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	82 1b       	sub	r24, r18
    399c:	93 0b       	sbc	r25, r19
    399e:	54 17       	cp	r21, r20
    39a0:	10 f0       	brcs	.+4      	; 0x39a6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    39a2:	cf 96       	adiw	r24, 0x3f	; 63
    39a4:	08 95       	ret
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	08 95       	ret

000039aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    39aa:	fc 01       	movw	r30, r24
    39ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    39ae:	df 01       	movw	r26, r30
    39b0:	a8 0f       	add	r26, r24
    39b2:	b1 1d       	adc	r27, r1
    39b4:	a3 5a       	subi	r26, 0xA3	; 163
    39b6:	bf 4f       	sbci	r27, 0xFF	; 255
    39b8:	2c 91       	ld	r18, X
    39ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	01 96       	adiw	r24, 0x01	; 1
    39c0:	8f 73       	andi	r24, 0x3F	; 63
    39c2:	99 27       	eor	r25, r25
    39c4:	84 8f       	std	Z+28, r24	; 0x1c
    39c6:	a6 89       	ldd	r26, Z+22	; 0x16
    39c8:	b7 89       	ldd	r27, Z+23	; 0x17
    39ca:	2c 93       	st	X, r18
    39cc:	a0 89       	ldd	r26, Z+16	; 0x10
    39ce:	b1 89       	ldd	r27, Z+17	; 0x11
    39d0:	8c 91       	ld	r24, X
    39d2:	83 70       	andi	r24, 0x03	; 3
    39d4:	80 64       	ori	r24, 0x40	; 64
    39d6:	8c 93       	st	X, r24
    39d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    39da:	84 8d       	ldd	r24, Z+28	; 0x1c
    39dc:	98 13       	cpse	r25, r24
    39de:	06 c0       	rjmp	.+12     	; 0x39ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    39e0:	02 88       	ldd	r0, Z+18	; 0x12
    39e2:	f3 89       	ldd	r31, Z+19	; 0x13
    39e4:	e0 2d       	mov	r30, r0
    39e6:	80 81       	ld	r24, Z
    39e8:	8f 7d       	andi	r24, 0xDF	; 223
    39ea:	80 83       	st	Z, r24
    39ec:	08 95       	ret

000039ee <_ZN14HardwareSerial5writeEh>:
    39ee:	ef 92       	push	r14
    39f0:	ff 92       	push	r15
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	ec 01       	movw	r28, r24
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	88 8f       	std	Y+24, r24	; 0x18
    3a00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a04:	98 13       	cpse	r25, r24
    3a06:	05 c0       	rjmp	.+10     	; 0x3a12 <_ZN14HardwareSerial5writeEh+0x24>
    3a08:	e8 89       	ldd	r30, Y+16	; 0x10
    3a0a:	f9 89       	ldd	r31, Y+17	; 0x11
    3a0c:	80 81       	ld	r24, Z
    3a0e:	85 fd       	sbrc	r24, 5
    3a10:	25 c0       	rjmp	.+74     	; 0x3a5c <_ZN14HardwareSerial5writeEh+0x6e>
    3a12:	f6 2e       	mov	r15, r22
    3a14:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	0f 5f       	subi	r16, 0xFF	; 255
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	0f 73       	andi	r16, 0x3F	; 63
    3a1e:	11 27       	eor	r17, r17
    3a20:	e0 2e       	mov	r14, r16
    3a22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a24:	e8 12       	cpse	r14, r24
    3a26:	0b c0       	rjmp	.+22     	; 0x3a3e <_ZN14HardwareSerial5writeEh+0x50>
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	07 fc       	sbrc	r0, 7
    3a2c:	fa cf       	rjmp	.-12     	; 0x3a22 <_ZN14HardwareSerial5writeEh+0x34>
    3a2e:	e8 89       	ldd	r30, Y+16	; 0x10
    3a30:	f9 89       	ldd	r31, Y+17	; 0x11
    3a32:	80 81       	ld	r24, Z
    3a34:	85 ff       	sbrs	r24, 5
    3a36:	f5 cf       	rjmp	.-22     	; 0x3a22 <_ZN14HardwareSerial5writeEh+0x34>
    3a38:	ce 01       	movw	r24, r28
    3a3a:	b7 df       	rcall	.-146    	; 0x39aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3a3c:	f2 cf       	rjmp	.-28     	; 0x3a22 <_ZN14HardwareSerial5writeEh+0x34>
    3a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a40:	fe 01       	movw	r30, r28
    3a42:	e8 0f       	add	r30, r24
    3a44:	f1 1d       	adc	r31, r1
    3a46:	e3 5a       	subi	r30, 0xA3	; 163
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	f0 82       	st	Z, r15
    3a4c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a4e:	f8 94       	cli
    3a50:	0b 8f       	std	Y+27, r16	; 0x1b
    3a52:	ea 89       	ldd	r30, Y+18	; 0x12
    3a54:	fb 89       	ldd	r31, Y+19	; 0x13
    3a56:	80 81       	ld	r24, Z
    3a58:	80 62       	ori	r24, 0x20	; 32
    3a5a:	0a c0       	rjmp	.+20     	; 0x3a70 <_ZN14HardwareSerial5writeEh+0x82>
    3a5c:	9f b7       	in	r25, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	ee 89       	ldd	r30, Y+22	; 0x16
    3a62:	ff 89       	ldd	r31, Y+23	; 0x17
    3a64:	60 83       	st	Z, r22
    3a66:	e8 89       	ldd	r30, Y+16	; 0x10
    3a68:	f9 89       	ldd	r31, Y+17	; 0x11
    3a6a:	80 81       	ld	r24, Z
    3a6c:	83 70       	andi	r24, 0x03	; 3
    3a6e:	80 64       	ori	r24, 0x40	; 64
    3a70:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a72:	9f bf       	out	0x3f, r25	; 63
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	df 91       	pop	r29
    3a7a:	cf 91       	pop	r28
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	ff 90       	pop	r15
    3a82:	ef 90       	pop	r14
    3a84:	08 95       	ret

00003a86 <_ZN14HardwareSerial5flushEv>:
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	88 8d       	ldd	r24, Y+24	; 0x18
    3a8e:	88 23       	and	r24, r24
    3a90:	c1 f0       	breq	.+48     	; 0x3ac2 <_ZN14HardwareSerial5flushEv+0x3c>
    3a92:	ea 89       	ldd	r30, Y+18	; 0x12
    3a94:	fb 89       	ldd	r31, Y+19	; 0x13
    3a96:	80 81       	ld	r24, Z
    3a98:	85 fd       	sbrc	r24, 5
    3a9a:	05 c0       	rjmp	.+10     	; 0x3aa6 <_ZN14HardwareSerial5flushEv+0x20>
    3a9c:	a8 89       	ldd	r26, Y+16	; 0x10
    3a9e:	b9 89       	ldd	r27, Y+17	; 0x11
    3aa0:	8c 91       	ld	r24, X
    3aa2:	86 fd       	sbrc	r24, 6
    3aa4:	0e c0       	rjmp	.+28     	; 0x3ac2 <_ZN14HardwareSerial5flushEv+0x3c>
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	07 fc       	sbrc	r0, 7
    3aaa:	f5 cf       	rjmp	.-22     	; 0x3a96 <_ZN14HardwareSerial5flushEv+0x10>
    3aac:	80 81       	ld	r24, Z
    3aae:	85 ff       	sbrs	r24, 5
    3ab0:	f2 cf       	rjmp	.-28     	; 0x3a96 <_ZN14HardwareSerial5flushEv+0x10>
    3ab2:	a8 89       	ldd	r26, Y+16	; 0x10
    3ab4:	b9 89       	ldd	r27, Y+17	; 0x11
    3ab6:	8c 91       	ld	r24, X
    3ab8:	85 ff       	sbrs	r24, 5
    3aba:	ed cf       	rjmp	.-38     	; 0x3a96 <_ZN14HardwareSerial5flushEv+0x10>
    3abc:	ce 01       	movw	r24, r28
    3abe:	75 df       	rcall	.-278    	; 0x39aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ac0:	e8 cf       	rjmp	.-48     	; 0x3a92 <_ZN14HardwareSerial5flushEv+0xc>
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

00003ac8 <_ZN14HardwareSerial5beginEmh>:
    3ac8:	cf 92       	push	r12
    3aca:	df 92       	push	r13
    3acc:	ef 92       	push	r14
    3ace:	ff 92       	push	r15
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	ec 01       	movw	r28, r24
    3ad8:	6a 01       	movw	r12, r20
    3ada:	7b 01       	movw	r14, r22
    3adc:	12 2f       	mov	r17, r18
    3ade:	e8 89       	ldd	r30, Y+16	; 0x10
    3ae0:	f9 89       	ldd	r31, Y+17	; 0x11
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	80 83       	st	Z, r24
    3ae6:	41 15       	cp	r20, r1
    3ae8:	51 4e       	sbci	r21, 0xE1	; 225
    3aea:	61 05       	cpc	r22, r1
    3aec:	71 05       	cpc	r23, r1
    3aee:	a9 f0       	breq	.+42     	; 0x3b1a <_ZN14HardwareSerial5beginEmh+0x52>
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	79 e0       	ldi	r23, 0x09	; 9
    3af4:	8d e3       	ldi	r24, 0x3D	; 61
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a7 01       	movw	r20, r14
    3afa:	96 01       	movw	r18, r12
    3afc:	8d d1       	rcall	.+794    	; 0x3e18 <__udivmodsi4>
    3afe:	da 01       	movw	r26, r20
    3b00:	c9 01       	movw	r24, r18
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	a1 09       	sbc	r26, r1
    3b06:	b1 09       	sbc	r27, r1
    3b08:	b6 95       	lsr	r27
    3b0a:	a7 95       	ror	r26
    3b0c:	97 95       	ror	r25
    3b0e:	87 95       	ror	r24
    3b10:	9c 01       	movw	r18, r24
    3b12:	21 15       	cp	r18, r1
    3b14:	80 e1       	ldi	r24, 0x10	; 16
    3b16:	38 07       	cpc	r19, r24
    3b18:	a0 f0       	brcs	.+40     	; 0x3b42 <_ZN14HardwareSerial5beginEmh+0x7a>
    3b1a:	e8 89       	ldd	r30, Y+16	; 0x10
    3b1c:	f9 89       	ldd	r31, Y+17	; 0x11
    3b1e:	10 82       	st	Z, r1
    3b20:	60 e8       	ldi	r22, 0x80	; 128
    3b22:	74 e8       	ldi	r23, 0x84	; 132
    3b24:	8e e1       	ldi	r24, 0x1E	; 30
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	a7 01       	movw	r20, r14
    3b2a:	96 01       	movw	r18, r12
    3b2c:	75 d1       	rcall	.+746    	; 0x3e18 <__udivmodsi4>
    3b2e:	da 01       	movw	r26, r20
    3b30:	c9 01       	movw	r24, r18
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	a1 09       	sbc	r26, r1
    3b36:	b1 09       	sbc	r27, r1
    3b38:	b6 95       	lsr	r27
    3b3a:	a7 95       	ror	r26
    3b3c:	97 95       	ror	r25
    3b3e:	87 95       	ror	r24
    3b40:	9c 01       	movw	r18, r24
    3b42:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b44:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b46:	30 83       	st	Z, r19
    3b48:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b4a:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b4c:	20 83       	st	Z, r18
    3b4e:	18 8e       	std	Y+24, r1	; 0x18
    3b50:	ec 89       	ldd	r30, Y+20	; 0x14
    3b52:	fd 89       	ldd	r31, Y+21	; 0x15
    3b54:	10 83       	st	Z, r17
    3b56:	ea 89       	ldd	r30, Y+18	; 0x12
    3b58:	fb 89       	ldd	r31, Y+19	; 0x13
    3b5a:	80 81       	ld	r24, Z
    3b5c:	80 61       	ori	r24, 0x10	; 16
    3b5e:	80 83       	st	Z, r24
    3b60:	ea 89       	ldd	r30, Y+18	; 0x12
    3b62:	fb 89       	ldd	r31, Y+19	; 0x13
    3b64:	80 81       	ld	r24, Z
    3b66:	88 60       	ori	r24, 0x08	; 8
    3b68:	80 83       	st	Z, r24
    3b6a:	ea 89       	ldd	r30, Y+18	; 0x12
    3b6c:	fb 89       	ldd	r31, Y+19	; 0x13
    3b6e:	80 81       	ld	r24, Z
    3b70:	80 68       	ori	r24, 0x80	; 128
    3b72:	80 83       	st	Z, r24
    3b74:	ea 89       	ldd	r30, Y+18	; 0x12
    3b76:	fb 89       	ldd	r31, Y+19	; 0x13
    3b78:	80 81       	ld	r24, Z
    3b7a:	8f 7d       	andi	r24, 0xDF	; 223
    3b7c:	80 83       	st	Z, r24
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	08 95       	ret

00003b8e <__vector_25>:
    3b8e:	1f 92       	push	r1
    3b90:	0f 92       	push	r0
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	0f 92       	push	r0
    3b96:	11 24       	eor	r1, r1
    3b98:	0b b6       	in	r0, 0x3b	; 59
    3b9a:	0f 92       	push	r0
    3b9c:	2f 93       	push	r18
    3b9e:	8f 93       	push	r24
    3ba0:	9f 93       	push	r25
    3ba2:	ef 93       	push	r30
    3ba4:	ff 93       	push	r31
    3ba6:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <Serial+0x10>
    3baa:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <Serial+0x11>
    3bae:	80 81       	ld	r24, Z
    3bb0:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <Serial+0x16>
    3bb4:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <Serial+0x17>
    3bb8:	82 fd       	sbrc	r24, 2
    3bba:	12 c0       	rjmp	.+36     	; 0x3be0 <__vector_25+0x52>
    3bbc:	90 81       	ld	r25, Z
    3bbe:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <Serial+0x19>
    3bc2:	8f 5f       	subi	r24, 0xFF	; 255
    3bc4:	8f 73       	andi	r24, 0x3F	; 63
    3bc6:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <Serial+0x1a>
    3bca:	82 17       	cp	r24, r18
    3bcc:	51 f0       	breq	.+20     	; 0x3be2 <__vector_25+0x54>
    3bce:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <Serial+0x19>
    3bd2:	f0 e0       	ldi	r31, 0x00	; 0
    3bd4:	e2 50       	subi	r30, 0x02	; 2
    3bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    3bd8:	95 8f       	std	Z+29, r25	; 0x1d
    3bda:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <Serial+0x19>
    3bde:	01 c0       	rjmp	.+2      	; 0x3be2 <__vector_25+0x54>
    3be0:	80 81       	ld	r24, Z
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	9f 91       	pop	r25
    3be8:	8f 91       	pop	r24
    3bea:	2f 91       	pop	r18
    3bec:	0f 90       	pop	r0
    3bee:	0b be       	out	0x3b, r0	; 59
    3bf0:	0f 90       	pop	r0
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	0f 90       	pop	r0
    3bf6:	1f 90       	pop	r1
    3bf8:	18 95       	reti

00003bfa <__vector_26>:
    3bfa:	1f 92       	push	r1
    3bfc:	0f 92       	push	r0
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	0f 92       	push	r0
    3c02:	11 24       	eor	r1, r1
    3c04:	0b b6       	in	r0, 0x3b	; 59
    3c06:	0f 92       	push	r0
    3c08:	2f 93       	push	r18
    3c0a:	3f 93       	push	r19
    3c0c:	4f 93       	push	r20
    3c0e:	5f 93       	push	r21
    3c10:	6f 93       	push	r22
    3c12:	7f 93       	push	r23
    3c14:	8f 93       	push	r24
    3c16:	9f 93       	push	r25
    3c18:	af 93       	push	r26
    3c1a:	bf 93       	push	r27
    3c1c:	ef 93       	push	r30
    3c1e:	ff 93       	push	r31
    3c20:	8e ef       	ldi	r24, 0xFE	; 254
    3c22:	93 e0       	ldi	r25, 0x03	; 3
    3c24:	c2 de       	rcall	.-636    	; 0x39aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3c26:	ff 91       	pop	r31
    3c28:	ef 91       	pop	r30
    3c2a:	bf 91       	pop	r27
    3c2c:	af 91       	pop	r26
    3c2e:	9f 91       	pop	r25
    3c30:	8f 91       	pop	r24
    3c32:	7f 91       	pop	r23
    3c34:	6f 91       	pop	r22
    3c36:	5f 91       	pop	r21
    3c38:	4f 91       	pop	r20
    3c3a:	3f 91       	pop	r19
    3c3c:	2f 91       	pop	r18
    3c3e:	0f 90       	pop	r0
    3c40:	0b be       	out	0x3b, r0	; 59
    3c42:	0f 90       	pop	r0
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	0f 90       	pop	r0
    3c48:	1f 90       	pop	r1
    3c4a:	18 95       	reti

00003c4c <_GLOBAL__sub_I___vector_25>:
    3c4c:	ee ef       	ldi	r30, 0xFE	; 254
    3c4e:	f3 e0       	ldi	r31, 0x03	; 3
    3c50:	13 82       	std	Z+3, r1	; 0x03
    3c52:	12 82       	std	Z+2, r1	; 0x02
    3c54:	88 ee       	ldi	r24, 0xE8	; 232
    3c56:	93 e0       	ldi	r25, 0x03	; 3
    3c58:	a0 e0       	ldi	r26, 0x00	; 0
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	84 83       	std	Z+4, r24	; 0x04
    3c5e:	95 83       	std	Z+5, r25	; 0x05
    3c60:	a6 83       	std	Z+6, r26	; 0x06
    3c62:	b7 83       	std	Z+7, r27	; 0x07
    3c64:	88 e2       	ldi	r24, 0x28	; 40
    3c66:	93 e0       	ldi	r25, 0x03	; 3
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	80 83       	st	Z, r24
    3c6c:	85 ec       	ldi	r24, 0xC5	; 197
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	95 87       	std	Z+13, r25	; 0x0d
    3c72:	84 87       	std	Z+12, r24	; 0x0c
    3c74:	84 ec       	ldi	r24, 0xC4	; 196
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	97 87       	std	Z+15, r25	; 0x0f
    3c7a:	86 87       	std	Z+14, r24	; 0x0e
    3c7c:	80 ec       	ldi	r24, 0xC0	; 192
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	91 8b       	std	Z+17, r25	; 0x11
    3c82:	80 8b       	std	Z+16, r24	; 0x10
    3c84:	81 ec       	ldi	r24, 0xC1	; 193
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	93 8b       	std	Z+19, r25	; 0x13
    3c8a:	82 8b       	std	Z+18, r24	; 0x12
    3c8c:	82 ec       	ldi	r24, 0xC2	; 194
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	95 8b       	std	Z+21, r25	; 0x15
    3c92:	84 8b       	std	Z+20, r24	; 0x14
    3c94:	86 ec       	ldi	r24, 0xC6	; 198
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	97 8b       	std	Z+23, r25	; 0x17
    3c9a:	86 8b       	std	Z+22, r24	; 0x16
    3c9c:	11 8e       	std	Z+25, r1	; 0x19
    3c9e:	12 8e       	std	Z+26, r1	; 0x1a
    3ca0:	13 8e       	std	Z+27, r1	; 0x1b
    3ca2:	14 8e       	std	Z+28, r1	; 0x1c
    3ca4:	08 95       	ret

00003ca6 <_Znaj>:
    3ca6:	68 c1       	rjmp	.+720    	; 0x3f78 <malloc>

00003ca8 <_ZdlPv>:
    3ca8:	ff c1       	rjmp	.+1022   	; 0x40a8 <free>

00003caa <_ZN5Print5writeEPKhj>:
    3caa:	cf 92       	push	r12
    3cac:	df 92       	push	r13
    3cae:	ef 92       	push	r14
    3cb0:	ff 92       	push	r15
    3cb2:	0f 93       	push	r16
    3cb4:	1f 93       	push	r17
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
    3cba:	6c 01       	movw	r12, r24
    3cbc:	7a 01       	movw	r14, r20
    3cbe:	8b 01       	movw	r16, r22
    3cc0:	c0 e0       	ldi	r28, 0x00	; 0
    3cc2:	d0 e0       	ldi	r29, 0x00	; 0
    3cc4:	ce 15       	cp	r28, r14
    3cc6:	df 05       	cpc	r29, r15
    3cc8:	81 f0       	breq	.+32     	; 0x3cea <_ZN5Print5writeEPKhj+0x40>
    3cca:	d8 01       	movw	r26, r16
    3ccc:	6d 91       	ld	r22, X+
    3cce:	8d 01       	movw	r16, r26
    3cd0:	d6 01       	movw	r26, r12
    3cd2:	ed 91       	ld	r30, X+
    3cd4:	fc 91       	ld	r31, X
    3cd6:	01 90       	ld	r0, Z+
    3cd8:	f0 81       	ld	r31, Z
    3cda:	e0 2d       	mov	r30, r0
    3cdc:	c6 01       	movw	r24, r12
    3cde:	19 95       	eicall
    3ce0:	89 2b       	or	r24, r25
    3ce2:	11 f0       	breq	.+4      	; 0x3ce8 <_ZN5Print5writeEPKhj+0x3e>
    3ce4:	21 96       	adiw	r28, 0x01	; 1
    3ce6:	ee cf       	rjmp	.-36     	; 0x3cc4 <_ZN5Print5writeEPKhj+0x1a>
    3ce8:	7e 01       	movw	r14, r28
    3cea:	c7 01       	movw	r24, r14
    3cec:	df 91       	pop	r29
    3cee:	cf 91       	pop	r28
    3cf0:	1f 91       	pop	r17
    3cf2:	0f 91       	pop	r16
    3cf4:	ff 90       	pop	r15
    3cf6:	ef 90       	pop	r14
    3cf8:	df 90       	pop	r13
    3cfa:	cf 90       	pop	r12
    3cfc:	08 95       	ret

00003cfe <__vector_23>:
    3cfe:	1f 92       	push	r1
    3d00:	0f 92       	push	r0
    3d02:	0f b6       	in	r0, 0x3f	; 63
    3d04:	0f 92       	push	r0
    3d06:	11 24       	eor	r1, r1
    3d08:	2f 93       	push	r18
    3d0a:	3f 93       	push	r19
    3d0c:	8f 93       	push	r24
    3d0e:	9f 93       	push	r25
    3d10:	af 93       	push	r26
    3d12:	bf 93       	push	r27
    3d14:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <timer0_millis>
    3d18:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <timer0_millis+0x1>
    3d1c:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <timer0_millis+0x2>
    3d20:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <timer0_millis+0x3>
    3d24:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <timer0_fract>
    3d28:	23 e0       	ldi	r18, 0x03	; 3
    3d2a:	23 0f       	add	r18, r19
    3d2c:	2d 37       	cpi	r18, 0x7D	; 125
    3d2e:	20 f4       	brcc	.+8      	; 0x3d38 <__vector_23+0x3a>
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	a1 1d       	adc	r26, r1
    3d34:	b1 1d       	adc	r27, r1
    3d36:	05 c0       	rjmp	.+10     	; 0x3d42 <__vector_23+0x44>
    3d38:	26 e8       	ldi	r18, 0x86	; 134
    3d3a:	23 0f       	add	r18, r19
    3d3c:	02 96       	adiw	r24, 0x02	; 2
    3d3e:	a1 1d       	adc	r26, r1
    3d40:	b1 1d       	adc	r27, r1
    3d42:	20 93 9b 04 	sts	0x049B, r18	; 0x80049b <timer0_fract>
    3d46:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <timer0_millis>
    3d4a:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <timer0_millis+0x1>
    3d4e:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <timer0_millis+0x2>
    3d52:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <timer0_millis+0x3>
    3d56:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <timer0_overflow_count>
    3d5a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <timer0_overflow_count+0x1>
    3d5e:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <timer0_overflow_count+0x2>
    3d62:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x3>
    3d66:	01 96       	adiw	r24, 0x01	; 1
    3d68:	a1 1d       	adc	r26, r1
    3d6a:	b1 1d       	adc	r27, r1
    3d6c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <timer0_overflow_count>
    3d70:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <timer0_overflow_count+0x1>
    3d74:	a0 93 a2 04 	sts	0x04A2, r26	; 0x8004a2 <timer0_overflow_count+0x2>
    3d78:	b0 93 a3 04 	sts	0x04A3, r27	; 0x8004a3 <timer0_overflow_count+0x3>
    3d7c:	bf 91       	pop	r27
    3d7e:	af 91       	pop	r26
    3d80:	9f 91       	pop	r25
    3d82:	8f 91       	pop	r24
    3d84:	3f 91       	pop	r19
    3d86:	2f 91       	pop	r18
    3d88:	0f 90       	pop	r0
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	0f 90       	pop	r0
    3d8e:	1f 90       	pop	r1
    3d90:	18 95       	reti

00003d92 <millis>:
    3d92:	2f b7       	in	r18, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	60 91 9c 04 	lds	r22, 0x049C	; 0x80049c <timer0_millis>
    3d9a:	70 91 9d 04 	lds	r23, 0x049D	; 0x80049d <timer0_millis+0x1>
    3d9e:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <timer0_millis+0x2>
    3da2:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <timer0_millis+0x3>
    3da6:	2f bf       	out	0x3f, r18	; 63
    3da8:	08 95       	ret

00003daa <init>:
    3daa:	78 94       	sei
    3dac:	84 b5       	in	r24, 0x24	; 36
    3dae:	82 60       	ori	r24, 0x02	; 2
    3db0:	84 bd       	out	0x24, r24	; 36
    3db2:	84 b5       	in	r24, 0x24	; 36
    3db4:	81 60       	ori	r24, 0x01	; 1
    3db6:	84 bd       	out	0x24, r24	; 36
    3db8:	85 b5       	in	r24, 0x25	; 37
    3dba:	82 60       	ori	r24, 0x02	; 2
    3dbc:	85 bd       	out	0x25, r24	; 37
    3dbe:	85 b5       	in	r24, 0x25	; 37
    3dc0:	81 60       	ori	r24, 0x01	; 1
    3dc2:	85 bd       	out	0x25, r24	; 37
    3dc4:	ee e6       	ldi	r30, 0x6E	; 110
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	81 60       	ori	r24, 0x01	; 1
    3dcc:	80 83       	st	Z, r24
    3dce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    3dd2:	08 95       	ret

00003dd4 <__mulsi3>:
    3dd4:	db 01       	movw	r26, r22
    3dd6:	8f 93       	push	r24
    3dd8:	9f 93       	push	r25
    3dda:	6b d0       	rcall	.+214    	; 0x3eb2 <__muluhisi3>
    3ddc:	bf 91       	pop	r27
    3dde:	af 91       	pop	r26
    3de0:	a2 9f       	mul	r26, r18
    3de2:	80 0d       	add	r24, r0
    3de4:	91 1d       	adc	r25, r1
    3de6:	a3 9f       	mul	r26, r19
    3de8:	90 0d       	add	r25, r0
    3dea:	b2 9f       	mul	r27, r18
    3dec:	90 0d       	add	r25, r0
    3dee:	11 24       	eor	r1, r1
    3df0:	08 95       	ret

00003df2 <__divmodhi4>:
    3df2:	97 fb       	bst	r25, 7
    3df4:	07 2e       	mov	r0, r23
    3df6:	16 f4       	brtc	.+4      	; 0x3dfc <__divmodhi4+0xa>
    3df8:	00 94       	com	r0
    3dfa:	06 d0       	rcall	.+12     	; 0x3e08 <__divmodhi4_neg1>
    3dfc:	77 fd       	sbrc	r23, 7
    3dfe:	08 d0       	rcall	.+16     	; 0x3e10 <__divmodhi4_neg2>
    3e00:	9f d0       	rcall	.+318    	; 0x3f40 <__udivmodhi4>
    3e02:	07 fc       	sbrc	r0, 7
    3e04:	05 d0       	rcall	.+10     	; 0x3e10 <__divmodhi4_neg2>
    3e06:	3e f4       	brtc	.+14     	; 0x3e16 <__divmodhi4_exit>

00003e08 <__divmodhi4_neg1>:
    3e08:	90 95       	com	r25
    3e0a:	81 95       	neg	r24
    3e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0e:	08 95       	ret

00003e10 <__divmodhi4_neg2>:
    3e10:	70 95       	com	r23
    3e12:	61 95       	neg	r22
    3e14:	7f 4f       	sbci	r23, 0xFF	; 255

00003e16 <__divmodhi4_exit>:
    3e16:	08 95       	ret

00003e18 <__udivmodsi4>:
    3e18:	a1 e2       	ldi	r26, 0x21	; 33
    3e1a:	1a 2e       	mov	r1, r26
    3e1c:	aa 1b       	sub	r26, r26
    3e1e:	bb 1b       	sub	r27, r27
    3e20:	fd 01       	movw	r30, r26
    3e22:	0d c0       	rjmp	.+26     	; 0x3e3e <__udivmodsi4_ep>

00003e24 <__udivmodsi4_loop>:
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	ee 1f       	adc	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	a2 17       	cp	r26, r18
    3e2e:	b3 07       	cpc	r27, r19
    3e30:	e4 07       	cpc	r30, r20
    3e32:	f5 07       	cpc	r31, r21
    3e34:	20 f0       	brcs	.+8      	; 0x3e3e <__udivmodsi4_ep>
    3e36:	a2 1b       	sub	r26, r18
    3e38:	b3 0b       	sbc	r27, r19
    3e3a:	e4 0b       	sbc	r30, r20
    3e3c:	f5 0b       	sbc	r31, r21

00003e3e <__udivmodsi4_ep>:
    3e3e:	66 1f       	adc	r22, r22
    3e40:	77 1f       	adc	r23, r23
    3e42:	88 1f       	adc	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	1a 94       	dec	r1
    3e48:	69 f7       	brne	.-38     	; 0x3e24 <__udivmodsi4_loop>
    3e4a:	60 95       	com	r22
    3e4c:	70 95       	com	r23
    3e4e:	80 95       	com	r24
    3e50:	90 95       	com	r25
    3e52:	9b 01       	movw	r18, r22
    3e54:	ac 01       	movw	r20, r24
    3e56:	bd 01       	movw	r22, r26
    3e58:	cf 01       	movw	r24, r30
    3e5a:	08 95       	ret

00003e5c <__divmodsi4>:
    3e5c:	05 2e       	mov	r0, r21
    3e5e:	97 fb       	bst	r25, 7
    3e60:	16 f4       	brtc	.+4      	; 0x3e66 <__divmodsi4+0xa>
    3e62:	00 94       	com	r0
    3e64:	0f d0       	rcall	.+30     	; 0x3e84 <__negsi2>
    3e66:	57 fd       	sbrc	r21, 7
    3e68:	05 d0       	rcall	.+10     	; 0x3e74 <__divmodsi4_neg2>
    3e6a:	d6 df       	rcall	.-84     	; 0x3e18 <__udivmodsi4>
    3e6c:	07 fc       	sbrc	r0, 7
    3e6e:	02 d0       	rcall	.+4      	; 0x3e74 <__divmodsi4_neg2>
    3e70:	46 f4       	brtc	.+16     	; 0x3e82 <__divmodsi4_exit>
    3e72:	08 c0       	rjmp	.+16     	; 0x3e84 <__negsi2>

00003e74 <__divmodsi4_neg2>:
    3e74:	50 95       	com	r21
    3e76:	40 95       	com	r20
    3e78:	30 95       	com	r19
    3e7a:	21 95       	neg	r18
    3e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7e:	4f 4f       	sbci	r20, 0xFF	; 255
    3e80:	5f 4f       	sbci	r21, 0xFF	; 255

00003e82 <__divmodsi4_exit>:
    3e82:	08 95       	ret

00003e84 <__negsi2>:
    3e84:	90 95       	com	r25
    3e86:	80 95       	com	r24
    3e88:	70 95       	com	r23
    3e8a:	61 95       	neg	r22
    3e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e90:	9f 4f       	sbci	r25, 0xFF	; 255
    3e92:	08 95       	ret

00003e94 <__umulhisi3>:
    3e94:	a2 9f       	mul	r26, r18
    3e96:	b0 01       	movw	r22, r0
    3e98:	b3 9f       	mul	r27, r19
    3e9a:	c0 01       	movw	r24, r0
    3e9c:	a3 9f       	mul	r26, r19
    3e9e:	70 0d       	add	r23, r0
    3ea0:	81 1d       	adc	r24, r1
    3ea2:	11 24       	eor	r1, r1
    3ea4:	91 1d       	adc	r25, r1
    3ea6:	b2 9f       	mul	r27, r18
    3ea8:	70 0d       	add	r23, r0
    3eaa:	81 1d       	adc	r24, r1
    3eac:	11 24       	eor	r1, r1
    3eae:	91 1d       	adc	r25, r1
    3eb0:	08 95       	ret

00003eb2 <__muluhisi3>:
    3eb2:	f0 df       	rcall	.-32     	; 0x3e94 <__umulhisi3>
    3eb4:	a5 9f       	mul	r26, r21
    3eb6:	90 0d       	add	r25, r0
    3eb8:	b4 9f       	mul	r27, r20
    3eba:	90 0d       	add	r25, r0
    3ebc:	a4 9f       	mul	r26, r20
    3ebe:	80 0d       	add	r24, r0
    3ec0:	91 1d       	adc	r25, r1
    3ec2:	11 24       	eor	r1, r1
    3ec4:	08 95       	ret

00003ec6 <__mulshisi3>:
    3ec6:	b7 ff       	sbrs	r27, 7
    3ec8:	f4 cf       	rjmp	.-24     	; 0x3eb2 <__muluhisi3>

00003eca <__mulohisi3>:
    3eca:	f3 df       	rcall	.-26     	; 0x3eb2 <__muluhisi3>
    3ecc:	82 1b       	sub	r24, r18
    3ece:	93 0b       	sbc	r25, r19
    3ed0:	08 95       	ret

00003ed2 <__ashldi3>:
    3ed2:	0f 93       	push	r16
    3ed4:	08 30       	cpi	r16, 0x08	; 8
    3ed6:	90 f0       	brcs	.+36     	; 0x3efc <__ashldi3+0x2a>
    3ed8:	98 2f       	mov	r25, r24
    3eda:	87 2f       	mov	r24, r23
    3edc:	76 2f       	mov	r23, r22
    3ede:	65 2f       	mov	r22, r21
    3ee0:	54 2f       	mov	r21, r20
    3ee2:	43 2f       	mov	r20, r19
    3ee4:	32 2f       	mov	r19, r18
    3ee6:	22 27       	eor	r18, r18
    3ee8:	08 50       	subi	r16, 0x08	; 8
    3eea:	f4 cf       	rjmp	.-24     	; 0x3ed4 <__ashldi3+0x2>
    3eec:	22 0f       	add	r18, r18
    3eee:	33 1f       	adc	r19, r19
    3ef0:	44 1f       	adc	r20, r20
    3ef2:	55 1f       	adc	r21, r21
    3ef4:	66 1f       	adc	r22, r22
    3ef6:	77 1f       	adc	r23, r23
    3ef8:	88 1f       	adc	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	0a 95       	dec	r16
    3efe:	b2 f7       	brpl	.-20     	; 0x3eec <__ashldi3+0x1a>
    3f00:	0f 91       	pop	r16
    3f02:	08 95       	ret

00003f04 <__ashrdi3>:
    3f04:	97 fb       	bst	r25, 7
    3f06:	10 f8       	bld	r1, 0

00003f08 <__lshrdi3>:
    3f08:	16 94       	lsr	r1
    3f0a:	00 08       	sbc	r0, r0
    3f0c:	0f 93       	push	r16
    3f0e:	08 30       	cpi	r16, 0x08	; 8
    3f10:	98 f0       	brcs	.+38     	; 0x3f38 <__lshrdi3+0x30>
    3f12:	08 50       	subi	r16, 0x08	; 8
    3f14:	23 2f       	mov	r18, r19
    3f16:	34 2f       	mov	r19, r20
    3f18:	45 2f       	mov	r20, r21
    3f1a:	56 2f       	mov	r21, r22
    3f1c:	67 2f       	mov	r22, r23
    3f1e:	78 2f       	mov	r23, r24
    3f20:	89 2f       	mov	r24, r25
    3f22:	90 2d       	mov	r25, r0
    3f24:	f4 cf       	rjmp	.-24     	; 0x3f0e <__lshrdi3+0x6>
    3f26:	05 94       	asr	r0
    3f28:	97 95       	ror	r25
    3f2a:	87 95       	ror	r24
    3f2c:	77 95       	ror	r23
    3f2e:	67 95       	ror	r22
    3f30:	57 95       	ror	r21
    3f32:	47 95       	ror	r20
    3f34:	37 95       	ror	r19
    3f36:	27 95       	ror	r18
    3f38:	0a 95       	dec	r16
    3f3a:	aa f7       	brpl	.-22     	; 0x3f26 <__lshrdi3+0x1e>
    3f3c:	0f 91       	pop	r16
    3f3e:	08 95       	ret

00003f40 <__udivmodhi4>:
    3f40:	aa 1b       	sub	r26, r26
    3f42:	bb 1b       	sub	r27, r27
    3f44:	51 e1       	ldi	r21, 0x11	; 17
    3f46:	07 c0       	rjmp	.+14     	; 0x3f56 <__udivmodhi4_ep>

00003f48 <__udivmodhi4_loop>:
    3f48:	aa 1f       	adc	r26, r26
    3f4a:	bb 1f       	adc	r27, r27
    3f4c:	a6 17       	cp	r26, r22
    3f4e:	b7 07       	cpc	r27, r23
    3f50:	10 f0       	brcs	.+4      	; 0x3f56 <__udivmodhi4_ep>
    3f52:	a6 1b       	sub	r26, r22
    3f54:	b7 0b       	sbc	r27, r23

00003f56 <__udivmodhi4_ep>:
    3f56:	88 1f       	adc	r24, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	5a 95       	dec	r21
    3f5c:	a9 f7       	brne	.-22     	; 0x3f48 <__udivmodhi4_loop>
    3f5e:	80 95       	com	r24
    3f60:	90 95       	com	r25
    3f62:	bc 01       	movw	r22, r24
    3f64:	cd 01       	movw	r24, r26
    3f66:	08 95       	ret

00003f68 <__tablejump2__>:
    3f68:	ee 0f       	add	r30, r30
    3f6a:	ff 1f       	adc	r31, r31
    3f6c:	88 1f       	adc	r24, r24
    3f6e:	8b bf       	out	0x3b, r24	; 59
    3f70:	07 90       	elpm	r0, Z+
    3f72:	f6 91       	elpm	r31, Z
    3f74:	e0 2d       	mov	r30, r0
    3f76:	19 94       	eijmp

00003f78 <malloc>:
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	82 30       	cpi	r24, 0x02	; 2
    3f82:	91 05       	cpc	r25, r1
    3f84:	10 f4       	brcc	.+4      	; 0x3f8a <malloc+0x12>
    3f86:	82 e0       	ldi	r24, 0x02	; 2
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <__flp>
    3f8e:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <__flp+0x1>
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	a0 e0       	ldi	r26, 0x00	; 0
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
    3f9a:	30 97       	sbiw	r30, 0x00	; 0
    3f9c:	19 f1       	breq	.+70     	; 0x3fe4 <malloc+0x6c>
    3f9e:	40 81       	ld	r20, Z
    3fa0:	51 81       	ldd	r21, Z+1	; 0x01
    3fa2:	02 81       	ldd	r16, Z+2	; 0x02
    3fa4:	13 81       	ldd	r17, Z+3	; 0x03
    3fa6:	48 17       	cp	r20, r24
    3fa8:	59 07       	cpc	r21, r25
    3faa:	c8 f0       	brcs	.+50     	; 0x3fde <malloc+0x66>
    3fac:	84 17       	cp	r24, r20
    3fae:	95 07       	cpc	r25, r21
    3fb0:	69 f4       	brne	.+26     	; 0x3fcc <malloc+0x54>
    3fb2:	10 97       	sbiw	r26, 0x00	; 0
    3fb4:	31 f0       	breq	.+12     	; 0x3fc2 <malloc+0x4a>
    3fb6:	12 96       	adiw	r26, 0x02	; 2
    3fb8:	0c 93       	st	X, r16
    3fba:	12 97       	sbiw	r26, 0x02	; 2
    3fbc:	13 96       	adiw	r26, 0x03	; 3
    3fbe:	1c 93       	st	X, r17
    3fc0:	27 c0       	rjmp	.+78     	; 0x4010 <malloc+0x98>
    3fc2:	00 93 a6 04 	sts	0x04A6, r16	; 0x8004a6 <__flp>
    3fc6:	10 93 a7 04 	sts	0x04A7, r17	; 0x8004a7 <__flp+0x1>
    3fca:	22 c0       	rjmp	.+68     	; 0x4010 <malloc+0x98>
    3fcc:	21 15       	cp	r18, r1
    3fce:	31 05       	cpc	r19, r1
    3fd0:	19 f0       	breq	.+6      	; 0x3fd8 <malloc+0x60>
    3fd2:	42 17       	cp	r20, r18
    3fd4:	53 07       	cpc	r21, r19
    3fd6:	18 f4       	brcc	.+6      	; 0x3fde <malloc+0x66>
    3fd8:	9a 01       	movw	r18, r20
    3fda:	bd 01       	movw	r22, r26
    3fdc:	ef 01       	movw	r28, r30
    3fde:	df 01       	movw	r26, r30
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	db cf       	rjmp	.-74     	; 0x3f9a <malloc+0x22>
    3fe4:	21 15       	cp	r18, r1
    3fe6:	31 05       	cpc	r19, r1
    3fe8:	f9 f0       	breq	.+62     	; 0x4028 <malloc+0xb0>
    3fea:	28 1b       	sub	r18, r24
    3fec:	39 0b       	sbc	r19, r25
    3fee:	24 30       	cpi	r18, 0x04	; 4
    3ff0:	31 05       	cpc	r19, r1
    3ff2:	80 f4       	brcc	.+32     	; 0x4014 <malloc+0x9c>
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff8:	61 15       	cp	r22, r1
    3ffa:	71 05       	cpc	r23, r1
    3ffc:	21 f0       	breq	.+8      	; 0x4006 <malloc+0x8e>
    3ffe:	fb 01       	movw	r30, r22
    4000:	93 83       	std	Z+3, r25	; 0x03
    4002:	82 83       	std	Z+2, r24	; 0x02
    4004:	04 c0       	rjmp	.+8      	; 0x400e <malloc+0x96>
    4006:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <__flp+0x1>
    400a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__flp>
    400e:	fe 01       	movw	r30, r28
    4010:	32 96       	adiw	r30, 0x02	; 2
    4012:	44 c0       	rjmp	.+136    	; 0x409c <malloc+0x124>
    4014:	fe 01       	movw	r30, r28
    4016:	e2 0f       	add	r30, r18
    4018:	f3 1f       	adc	r31, r19
    401a:	81 93       	st	Z+, r24
    401c:	91 93       	st	Z+, r25
    401e:	22 50       	subi	r18, 0x02	; 2
    4020:	31 09       	sbc	r19, r1
    4022:	39 83       	std	Y+1, r19	; 0x01
    4024:	28 83       	st	Y, r18
    4026:	3a c0       	rjmp	.+116    	; 0x409c <malloc+0x124>
    4028:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <__brkval>
    402c:	30 91 a5 04 	lds	r19, 0x04A5	; 0x8004a5 <__brkval+0x1>
    4030:	23 2b       	or	r18, r19
    4032:	41 f4       	brne	.+16     	; 0x4044 <malloc+0xcc>
    4034:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4038:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    403c:	30 93 a5 04 	sts	0x04A5, r19	; 0x8004a5 <__brkval+0x1>
    4040:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <__brkval>
    4044:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4048:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    404c:	21 15       	cp	r18, r1
    404e:	31 05       	cpc	r19, r1
    4050:	41 f4       	brne	.+16     	; 0x4062 <malloc+0xea>
    4052:	2d b7       	in	r18, 0x3d	; 61
    4054:	3e b7       	in	r19, 0x3e	; 62
    4056:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    405a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    405e:	24 1b       	sub	r18, r20
    4060:	35 0b       	sbc	r19, r21
    4062:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <__brkval>
    4066:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <__brkval+0x1>
    406a:	e2 17       	cp	r30, r18
    406c:	f3 07       	cpc	r31, r19
    406e:	a0 f4       	brcc	.+40     	; 0x4098 <malloc+0x120>
    4070:	2e 1b       	sub	r18, r30
    4072:	3f 0b       	sbc	r19, r31
    4074:	28 17       	cp	r18, r24
    4076:	39 07       	cpc	r19, r25
    4078:	78 f0       	brcs	.+30     	; 0x4098 <malloc+0x120>
    407a:	ac 01       	movw	r20, r24
    407c:	4e 5f       	subi	r20, 0xFE	; 254
    407e:	5f 4f       	sbci	r21, 0xFF	; 255
    4080:	24 17       	cp	r18, r20
    4082:	35 07       	cpc	r19, r21
    4084:	48 f0       	brcs	.+18     	; 0x4098 <malloc+0x120>
    4086:	4e 0f       	add	r20, r30
    4088:	5f 1f       	adc	r21, r31
    408a:	50 93 a5 04 	sts	0x04A5, r21	; 0x8004a5 <__brkval+0x1>
    408e:	40 93 a4 04 	sts	0x04A4, r20	; 0x8004a4 <__brkval>
    4092:	81 93       	st	Z+, r24
    4094:	91 93       	st	Z+, r25
    4096:	02 c0       	rjmp	.+4      	; 0x409c <malloc+0x124>
    4098:	e0 e0       	ldi	r30, 0x00	; 0
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	cf 01       	movw	r24, r30
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	08 95       	ret

000040a8 <free>:
    40a8:	cf 93       	push	r28
    40aa:	df 93       	push	r29
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <free+0xa>
    40b0:	81 c0       	rjmp	.+258    	; 0x41b4 <free+0x10c>
    40b2:	fc 01       	movw	r30, r24
    40b4:	32 97       	sbiw	r30, 0x02	; 2
    40b6:	13 82       	std	Z+3, r1	; 0x03
    40b8:	12 82       	std	Z+2, r1	; 0x02
    40ba:	a0 91 a6 04 	lds	r26, 0x04A6	; 0x8004a6 <__flp>
    40be:	b0 91 a7 04 	lds	r27, 0x04A7	; 0x8004a7 <__flp+0x1>
    40c2:	10 97       	sbiw	r26, 0x00	; 0
    40c4:	81 f4       	brne	.+32     	; 0x40e6 <free+0x3e>
    40c6:	20 81       	ld	r18, Z
    40c8:	31 81       	ldd	r19, Z+1	; 0x01
    40ca:	82 0f       	add	r24, r18
    40cc:	93 1f       	adc	r25, r19
    40ce:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <__brkval>
    40d2:	30 91 a5 04 	lds	r19, 0x04A5	; 0x8004a5 <__brkval+0x1>
    40d6:	28 17       	cp	r18, r24
    40d8:	39 07       	cpc	r19, r25
    40da:	51 f5       	brne	.+84     	; 0x4130 <free+0x88>
    40dc:	f0 93 a5 04 	sts	0x04A5, r31	; 0x8004a5 <__brkval+0x1>
    40e0:	e0 93 a4 04 	sts	0x04A4, r30	; 0x8004a4 <__brkval>
    40e4:	67 c0       	rjmp	.+206    	; 0x41b4 <free+0x10c>
    40e6:	ed 01       	movw	r28, r26
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	ce 17       	cp	r28, r30
    40ee:	df 07       	cpc	r29, r31
    40f0:	40 f4       	brcc	.+16     	; 0x4102 <free+0x5a>
    40f2:	4a 81       	ldd	r20, Y+2	; 0x02
    40f4:	5b 81       	ldd	r21, Y+3	; 0x03
    40f6:	9e 01       	movw	r18, r28
    40f8:	41 15       	cp	r20, r1
    40fa:	51 05       	cpc	r21, r1
    40fc:	f1 f0       	breq	.+60     	; 0x413a <free+0x92>
    40fe:	ea 01       	movw	r28, r20
    4100:	f5 cf       	rjmp	.-22     	; 0x40ec <free+0x44>
    4102:	d3 83       	std	Z+3, r29	; 0x03
    4104:	c2 83       	std	Z+2, r28	; 0x02
    4106:	40 81       	ld	r20, Z
    4108:	51 81       	ldd	r21, Z+1	; 0x01
    410a:	84 0f       	add	r24, r20
    410c:	95 1f       	adc	r25, r21
    410e:	c8 17       	cp	r28, r24
    4110:	d9 07       	cpc	r29, r25
    4112:	59 f4       	brne	.+22     	; 0x412a <free+0x82>
    4114:	88 81       	ld	r24, Y
    4116:	99 81       	ldd	r25, Y+1	; 0x01
    4118:	84 0f       	add	r24, r20
    411a:	95 1f       	adc	r25, r21
    411c:	02 96       	adiw	r24, 0x02	; 2
    411e:	91 83       	std	Z+1, r25	; 0x01
    4120:	80 83       	st	Z, r24
    4122:	8a 81       	ldd	r24, Y+2	; 0x02
    4124:	9b 81       	ldd	r25, Y+3	; 0x03
    4126:	93 83       	std	Z+3, r25	; 0x03
    4128:	82 83       	std	Z+2, r24	; 0x02
    412a:	21 15       	cp	r18, r1
    412c:	31 05       	cpc	r19, r1
    412e:	29 f4       	brne	.+10     	; 0x413a <free+0x92>
    4130:	f0 93 a7 04 	sts	0x04A7, r31	; 0x8004a7 <__flp+0x1>
    4134:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <__flp>
    4138:	3d c0       	rjmp	.+122    	; 0x41b4 <free+0x10c>
    413a:	e9 01       	movw	r28, r18
    413c:	fb 83       	std	Y+3, r31	; 0x03
    413e:	ea 83       	std	Y+2, r30	; 0x02
    4140:	49 91       	ld	r20, Y+
    4142:	59 91       	ld	r21, Y+
    4144:	c4 0f       	add	r28, r20
    4146:	d5 1f       	adc	r29, r21
    4148:	ec 17       	cp	r30, r28
    414a:	fd 07       	cpc	r31, r29
    414c:	61 f4       	brne	.+24     	; 0x4166 <free+0xbe>
    414e:	80 81       	ld	r24, Z
    4150:	91 81       	ldd	r25, Z+1	; 0x01
    4152:	84 0f       	add	r24, r20
    4154:	95 1f       	adc	r25, r21
    4156:	02 96       	adiw	r24, 0x02	; 2
    4158:	e9 01       	movw	r28, r18
    415a:	99 83       	std	Y+1, r25	; 0x01
    415c:	88 83       	st	Y, r24
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	9b 83       	std	Y+3, r25	; 0x03
    4164:	8a 83       	std	Y+2, r24	; 0x02
    4166:	e0 e0       	ldi	r30, 0x00	; 0
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	12 96       	adiw	r26, 0x02	; 2
    416c:	8d 91       	ld	r24, X+
    416e:	9c 91       	ld	r25, X
    4170:	13 97       	sbiw	r26, 0x03	; 3
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	19 f0       	breq	.+6      	; 0x417c <free+0xd4>
    4176:	fd 01       	movw	r30, r26
    4178:	dc 01       	movw	r26, r24
    417a:	f7 cf       	rjmp	.-18     	; 0x416a <free+0xc2>
    417c:	8d 91       	ld	r24, X+
    417e:	9c 91       	ld	r25, X
    4180:	11 97       	sbiw	r26, 0x01	; 1
    4182:	9d 01       	movw	r18, r26
    4184:	2e 5f       	subi	r18, 0xFE	; 254
    4186:	3f 4f       	sbci	r19, 0xFF	; 255
    4188:	82 0f       	add	r24, r18
    418a:	93 1f       	adc	r25, r19
    418c:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <__brkval>
    4190:	30 91 a5 04 	lds	r19, 0x04A5	; 0x8004a5 <__brkval+0x1>
    4194:	28 17       	cp	r18, r24
    4196:	39 07       	cpc	r19, r25
    4198:	69 f4       	brne	.+26     	; 0x41b4 <free+0x10c>
    419a:	30 97       	sbiw	r30, 0x00	; 0
    419c:	29 f4       	brne	.+10     	; 0x41a8 <free+0x100>
    419e:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <__flp+0x1>
    41a2:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <__flp>
    41a6:	02 c0       	rjmp	.+4      	; 0x41ac <free+0x104>
    41a8:	13 82       	std	Z+3, r1	; 0x03
    41aa:	12 82       	std	Z+2, r1	; 0x02
    41ac:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <__brkval+0x1>
    41b0:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <__brkval>
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	08 95       	ret

000041ba <realloc>:
    41ba:	6f 92       	push	r6
    41bc:	7f 92       	push	r7
    41be:	8f 92       	push	r8
    41c0:	9f 92       	push	r9
    41c2:	af 92       	push	r10
    41c4:	bf 92       	push	r11
    41c6:	cf 92       	push	r12
    41c8:	df 92       	push	r13
    41ca:	ef 92       	push	r14
    41cc:	ff 92       	push	r15
    41ce:	0f 93       	push	r16
    41d0:	1f 93       	push	r17
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	00 97       	sbiw	r24, 0x00	; 0
    41d8:	81 f4       	brne	.+32     	; 0x41fa <realloc+0x40>
    41da:	cb 01       	movw	r24, r22
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	ff 90       	pop	r15
    41e6:	ef 90       	pop	r14
    41e8:	df 90       	pop	r13
    41ea:	cf 90       	pop	r12
    41ec:	bf 90       	pop	r11
    41ee:	af 90       	pop	r10
    41f0:	9f 90       	pop	r9
    41f2:	8f 90       	pop	r8
    41f4:	7f 90       	pop	r7
    41f6:	6f 90       	pop	r6
    41f8:	bf ce       	rjmp	.-642    	; 0x3f78 <malloc>
    41fa:	fc 01       	movw	r30, r24
    41fc:	e6 0f       	add	r30, r22
    41fe:	f7 1f       	adc	r31, r23
    4200:	9c 01       	movw	r18, r24
    4202:	22 50       	subi	r18, 0x02	; 2
    4204:	31 09       	sbc	r19, r1
    4206:	e2 17       	cp	r30, r18
    4208:	f3 07       	cpc	r31, r19
    420a:	08 f4       	brcc	.+2      	; 0x420e <realloc+0x54>
    420c:	a5 c0       	rjmp	.+330    	; 0x4358 <realloc+0x19e>
    420e:	ec 01       	movw	r28, r24
    4210:	d9 01       	movw	r26, r18
    4212:	0d 91       	ld	r16, X+
    4214:	1c 91       	ld	r17, X
    4216:	11 97       	sbiw	r26, 0x01	; 1
    4218:	06 17       	cp	r16, r22
    421a:	17 07       	cpc	r17, r23
    421c:	a8 f0       	brcs	.+42     	; 0x4248 <realloc+0x8e>
    421e:	05 30       	cpi	r16, 0x05	; 5
    4220:	11 05       	cpc	r17, r1
    4222:	08 f4       	brcc	.+2      	; 0x4226 <realloc+0x6c>
    4224:	97 c0       	rjmp	.+302    	; 0x4354 <realloc+0x19a>
    4226:	c8 01       	movw	r24, r16
    4228:	04 97       	sbiw	r24, 0x04	; 4
    422a:	86 17       	cp	r24, r22
    422c:	97 07       	cpc	r25, r23
    422e:	08 f4       	brcc	.+2      	; 0x4232 <realloc+0x78>
    4230:	91 c0       	rjmp	.+290    	; 0x4354 <realloc+0x19a>
    4232:	02 50       	subi	r16, 0x02	; 2
    4234:	11 09       	sbc	r17, r1
    4236:	06 1b       	sub	r16, r22
    4238:	17 0b       	sbc	r17, r23
    423a:	01 93       	st	Z+, r16
    423c:	11 93       	st	Z+, r17
    423e:	6d 93       	st	X+, r22
    4240:	7c 93       	st	X, r23
    4242:	cf 01       	movw	r24, r30
    4244:	31 df       	rcall	.-414    	; 0x40a8 <free>
    4246:	86 c0       	rjmp	.+268    	; 0x4354 <realloc+0x19a>
    4248:	5b 01       	movw	r10, r22
    424a:	a0 1a       	sub	r10, r16
    424c:	b1 0a       	sbc	r11, r17
    424e:	4c 01       	movw	r8, r24
    4250:	80 0e       	add	r8, r16
    4252:	91 1e       	adc	r9, r17
    4254:	a0 91 a6 04 	lds	r26, 0x04A6	; 0x8004a6 <__flp>
    4258:	b0 91 a7 04 	lds	r27, 0x04A7	; 0x8004a7 <__flp+0x1>
    425c:	61 2c       	mov	r6, r1
    425e:	71 2c       	mov	r7, r1
    4260:	e1 2c       	mov	r14, r1
    4262:	f1 2c       	mov	r15, r1
    4264:	10 97       	sbiw	r26, 0x00	; 0
    4266:	09 f4       	brne	.+2      	; 0x426a <realloc+0xb0>
    4268:	46 c0       	rjmp	.+140    	; 0x42f6 <realloc+0x13c>
    426a:	8d 91       	ld	r24, X+
    426c:	9c 91       	ld	r25, X
    426e:	11 97       	sbiw	r26, 0x01	; 1
    4270:	a8 15       	cp	r26, r8
    4272:	b9 05       	cpc	r27, r9
    4274:	b1 f5       	brne	.+108    	; 0x42e2 <realloc+0x128>
    4276:	6c 01       	movw	r12, r24
    4278:	42 e0       	ldi	r20, 0x02	; 2
    427a:	c4 0e       	add	r12, r20
    427c:	d1 1c       	adc	r13, r1
    427e:	ca 14       	cp	r12, r10
    4280:	db 04       	cpc	r13, r11
    4282:	78 f1       	brcs	.+94     	; 0x42e2 <realloc+0x128>
    4284:	4c 01       	movw	r8, r24
    4286:	8a 18       	sub	r8, r10
    4288:	9b 08       	sbc	r9, r11
    428a:	64 01       	movw	r12, r8
    428c:	42 e0       	ldi	r20, 0x02	; 2
    428e:	c4 0e       	add	r12, r20
    4290:	d1 1c       	adc	r13, r1
    4292:	12 96       	adiw	r26, 0x02	; 2
    4294:	bc 90       	ld	r11, X
    4296:	12 97       	sbiw	r26, 0x02	; 2
    4298:	13 96       	adiw	r26, 0x03	; 3
    429a:	ac 91       	ld	r26, X
    429c:	b5 e0       	ldi	r27, 0x05	; 5
    429e:	cb 16       	cp	r12, r27
    42a0:	d1 04       	cpc	r13, r1
    42a2:	40 f0       	brcs	.+16     	; 0x42b4 <realloc+0xfa>
    42a4:	b2 82       	std	Z+2, r11	; 0x02
    42a6:	a3 83       	std	Z+3, r26	; 0x03
    42a8:	91 82       	std	Z+1, r9	; 0x01
    42aa:	80 82       	st	Z, r8
    42ac:	d9 01       	movw	r26, r18
    42ae:	6d 93       	st	X+, r22
    42b0:	7c 93       	st	X, r23
    42b2:	09 c0       	rjmp	.+18     	; 0x42c6 <realloc+0x10c>
    42b4:	0e 5f       	subi	r16, 0xFE	; 254
    42b6:	1f 4f       	sbci	r17, 0xFF	; 255
    42b8:	80 0f       	add	r24, r16
    42ba:	91 1f       	adc	r25, r17
    42bc:	f9 01       	movw	r30, r18
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
    42c2:	eb 2d       	mov	r30, r11
    42c4:	fa 2f       	mov	r31, r26
    42c6:	e1 14       	cp	r14, r1
    42c8:	f1 04       	cpc	r15, r1
    42ca:	31 f0       	breq	.+12     	; 0x42d8 <realloc+0x11e>
    42cc:	d7 01       	movw	r26, r14
    42ce:	13 96       	adiw	r26, 0x03	; 3
    42d0:	fc 93       	st	X, r31
    42d2:	ee 93       	st	-X, r30
    42d4:	12 97       	sbiw	r26, 0x02	; 2
    42d6:	3e c0       	rjmp	.+124    	; 0x4354 <realloc+0x19a>
    42d8:	f0 93 a7 04 	sts	0x04A7, r31	; 0x8004a7 <__flp+0x1>
    42dc:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <__flp>
    42e0:	39 c0       	rjmp	.+114    	; 0x4354 <realloc+0x19a>
    42e2:	68 16       	cp	r6, r24
    42e4:	79 06       	cpc	r7, r25
    42e6:	08 f4       	brcc	.+2      	; 0x42ea <realloc+0x130>
    42e8:	3c 01       	movw	r6, r24
    42ea:	7d 01       	movw	r14, r26
    42ec:	12 96       	adiw	r26, 0x02	; 2
    42ee:	0d 90       	ld	r0, X+
    42f0:	bc 91       	ld	r27, X
    42f2:	a0 2d       	mov	r26, r0
    42f4:	b7 cf       	rjmp	.-146    	; 0x4264 <realloc+0xaa>
    42f6:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__brkval>
    42fa:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <__brkval+0x1>
    42fe:	88 16       	cp	r8, r24
    4300:	99 06       	cpc	r9, r25
    4302:	e1 f4       	brne	.+56     	; 0x433c <realloc+0x182>
    4304:	66 16       	cp	r6, r22
    4306:	77 06       	cpc	r7, r23
    4308:	c8 f4       	brcc	.+50     	; 0x433c <realloc+0x182>
    430a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    430e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	41 f4       	brne	.+16     	; 0x4326 <realloc+0x16c>
    4316:	8d b7       	in	r24, 0x3d	; 61
    4318:	9e b7       	in	r25, 0x3e	; 62
    431a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    431e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4322:	84 1b       	sub	r24, r20
    4324:	95 0b       	sbc	r25, r21
    4326:	e8 17       	cp	r30, r24
    4328:	f9 07       	cpc	r31, r25
    432a:	b0 f4       	brcc	.+44     	; 0x4358 <realloc+0x19e>
    432c:	f0 93 a5 04 	sts	0x04A5, r31	; 0x8004a5 <__brkval+0x1>
    4330:	e0 93 a4 04 	sts	0x04A4, r30	; 0x8004a4 <__brkval>
    4334:	f9 01       	movw	r30, r18
    4336:	71 83       	std	Z+1, r23	; 0x01
    4338:	60 83       	st	Z, r22
    433a:	0c c0       	rjmp	.+24     	; 0x4354 <realloc+0x19a>
    433c:	cb 01       	movw	r24, r22
    433e:	1c de       	rcall	.-968    	; 0x3f78 <malloc>
    4340:	7c 01       	movw	r14, r24
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	49 f0       	breq	.+18     	; 0x4358 <realloc+0x19e>
    4346:	a8 01       	movw	r20, r16
    4348:	be 01       	movw	r22, r28
    434a:	17 d0       	rcall	.+46     	; 0x437a <memcpy>
    434c:	ce 01       	movw	r24, r28
    434e:	ac de       	rcall	.-680    	; 0x40a8 <free>
    4350:	c7 01       	movw	r24, r14
    4352:	04 c0       	rjmp	.+8      	; 0x435c <realloc+0x1a2>
    4354:	ce 01       	movw	r24, r28
    4356:	02 c0       	rjmp	.+4      	; 0x435c <realloc+0x1a2>
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	ff 90       	pop	r15
    4366:	ef 90       	pop	r14
    4368:	df 90       	pop	r13
    436a:	cf 90       	pop	r12
    436c:	bf 90       	pop	r11
    436e:	af 90       	pop	r10
    4370:	9f 90       	pop	r9
    4372:	8f 90       	pop	r8
    4374:	7f 90       	pop	r7
    4376:	6f 90       	pop	r6
    4378:	08 95       	ret

0000437a <memcpy>:
    437a:	fb 01       	movw	r30, r22
    437c:	dc 01       	movw	r26, r24
    437e:	02 c0       	rjmp	.+4      	; 0x4384 <memcpy+0xa>
    4380:	01 90       	ld	r0, Z+
    4382:	0d 92       	st	X+, r0
    4384:	41 50       	subi	r20, 0x01	; 1
    4386:	50 40       	sbci	r21, 0x00	; 0
    4388:	d8 f7       	brcc	.-10     	; 0x4380 <memcpy+0x6>
    438a:	08 95       	ret

0000438c <_exit>:
    438c:	f8 94       	cli

0000438e <__stop_program>:
    438e:	ff cf       	rjmp	.-2      	; 0x438e <__stop_program>
