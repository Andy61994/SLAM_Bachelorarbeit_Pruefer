
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800200  00004668  000046fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000157  0080033a  0080033a  00004836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000109ed  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034f5  00000000  00000000  00015995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fe8  00000000  00000000  00018e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a98  00000000  00000000  0001ce74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000672f  00000000  00000000  0001e90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a0b  00000000  00000000  0002503b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  0002da46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c1       	rjmp	.+544    	; 0x222 <__ctors_end>
       2:	00 00       	nop
       4:	b4 c3       	rjmp	.+1896   	; 0x76e <__vector_1>
       6:	00 00       	nop
       8:	de c3       	rjmp	.+1980   	; 0x7c6 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__vector_3>
      10:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__vector_4>
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 8c 1b 	jmp	0x3718	; 0x3718 <__vector_6>
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_15>
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <__vector_23>
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__vector_25>
      68:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__vector_26>
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	db c0       	rjmp	.+438    	; 0x284 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	33 34       	cpi	r19, 0x43	; 67
      e6:	61 64       	ori	r22, 0x41	; 65
      e8:	64 31       	cpi	r22, 0x14	; 20
      ea:	36 38       	cpi	r19, 0x86	; 134
      ec:	35 37       	cpi	r19, 0x75	; 117
      ee:	34 35       	cpi	r19, 0x54	; 84
      f0:	31 30       	cpi	r19, 0x01	; 1
      f2:	65 36       	cpi	r22, 0x65	; 101
      f4:	65 31       	cpi	r22, 0x15	; 21
      f6:	37 66       	ori	r19, 0x67	; 103
      f8:	35 64       	ori	r19, 0x45	; 69
      fa:	32 33       	cpi	r19, 0x32	; 50
      fc:	65 63       	ori	r22, 0x35	; 53
      fe:	63 30       	cpi	r22, 0x03	; 3
     100:	37 37       	cpi	r19, 0x77	; 119
     102:	65 66       	ori	r22, 0x65	; 101
	...

00000105 <_ZZN8std_msgs5Int647getTypeEvE3__c>:
     105:	73 74 64 5f 6d 73 67 73 2f 49 6e 74 36 34 00        std_msgs/Int64.

00000114 <_ZZN8std_msgs5Int326getMD5EvE3__c>:
     114:	64 61 35 39 30 39 66 62 65 33 37 38 61 65 61 66     da5909fbe378aeaf
     124:	38 35 65 35 34 37 65 38 33 30 63 63 31 62 62 37     85e547e830cc1bb7
	...

00000135 <_ZZN8std_msgs5Int327getTypeEvE3__c>:
     135:	73 74 64 5f 6d 73 67 73 2f 49 6e 74 33 32 00        std_msgs/Int32.

00000144 <_ZZN14rosserial_msgs20RequestParamResponse6getMD5EvE3__c>:
     144:	39 66 30 65 39 38 62 64 61 36 35 39 38 31 39 38     9f0e98bda6598198
     154:	36 64 64 66 35 33 61 66 61 37 61 34 30 65 34 39     6ddf53afa7a40e49
	...

00000165 <_ZN14rosserial_msgsL12REQUESTPARAME>:
     165:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 52     rosserial_msgs/R
     175:	65 71 75 65 73 74 50 61 72 61 6d 00                 equestParam.

00000181 <_ZZN14rosserial_msgs3Log6getMD5EvE3__c>:
     181:	31 31 61 62 64 37 33 31 63 32 35 39 33 33 32 36     11abd731c2593326
     191:	31 63 64 36 31 38 33 62 64 31 32 64 36 32 39 35     1cd6183bd12d6295
	...

000001a2 <_ZZN14rosserial_msgs3Log7getTypeEvE3__c>:
     1a2:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 4c     rosserial_msgs/L
     1b2:	6f 67 00                                            og.

000001b5 <_ZZN14rosserial_msgs9TopicInfo6getMD5EvE3__c>:
     1b5:	30 61 64 35 31 66 38 38 66 63 34 34 38 39 32 66     0ad51f88fc44892f
     1c5:	38 63 31 30 36 38 34 30 37 37 36 34 36 30 30 35     8c10684077646005
	...

000001d6 <_ZZN14rosserial_msgs9TopicInfo7getTypeEvE3__c>:
     1d6:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 54     rosserial_msgs/T
     1e6:	6f 70 69 63 49 6e 66 6f 00                          opicInfo.

000001ef <_ZZN8std_msgs4Time6getMD5EvE3__c>:
     1ef:	63 64 37 31 36 36 63 37 34 63 35 35 32 63 33 31     cd7166c74c552c31
     1ff:	31 66 62 63 63 32 66 65 35 61 37 62 63 32 38 39     1fbcc2fe5a7bc289
	...

00000210 <_ZZN8std_msgs4Time7getTypeEvE3__c>:
     210:	73 74 64 5f 6d 73 67 73 2f 54 69 6d 65 00           std_msgs/Time.

0000021e <__ctors_start>:
     21e:	ed 15       	cp	r30, r13
     220:	3d 1f       	adc	r19, r29

00000222 <__ctors_end>:
     222:	11 24       	eor	r1, r1
     224:	1f be       	out	0x3f, r1	; 63
     226:	cf ef       	ldi	r28, 0xFF	; 255
     228:	d1 e2       	ldi	r29, 0x21	; 33
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	0c bf       	out	0x3c, r16	; 60

00000232 <__do_copy_data>:
     232:	13 e0       	ldi	r17, 0x03	; 3
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b2 e0       	ldi	r27, 0x02	; 2
     238:	e8 e6       	ldi	r30, 0x68	; 104
     23a:	f6 e4       	ldi	r31, 0x46	; 70
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	aa 33       	cpi	r26, 0x3A	; 58
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	24 e0       	ldi	r18, 0x04	; 4
     24e:	aa e3       	ldi	r26, 0x3A	; 58
     250:	b3 e0       	ldi	r27, 0x03	; 3
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	a1 39       	cpi	r26, 0x91	; 145
     258:	b2 07       	cpc	r27, r18
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>

0000025c <__do_global_ctors>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	c1 e1       	ldi	r28, 0x11	; 17
     260:	d1 e0       	ldi	r29, 0x01	; 1
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	06 c0       	rjmp	.+12     	; 0x272 <__do_global_ctors+0x16>
     266:	21 97       	sbiw	r28, 0x01	; 1
     268:	01 09       	sbc	r16, r1
     26a:	80 2f       	mov	r24, r16
     26c:	fe 01       	movw	r30, r28
     26e:	0e 94 cb 20 	call	0x4196	; 0x4196 <__tablejump2__>
     272:	cf 30       	cpi	r28, 0x0F	; 15
     274:	d1 07       	cpc	r29, r17
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	08 07       	cpc	r16, r24
     27a:	a9 f7       	brne	.-22     	; 0x266 <__do_global_ctors+0xa>
     27c:	0e 94 11 12 	call	0x2422	; 0x2422 <main>
     280:	0c 94 32 23 	jmp	0x4664	; 0x4664 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <_ZN15DC_Motor_Driver12setTargetRPMEl>:
		(OCRnX_Val > 0) ? setDirection(COUNTERCLOCKWISE) : setDirection(CLOCKWISE);	
	}
}

void DC_Motor_Driver::setTargetRPM(int32_t _targetRpm)
{
     286:	fc 01       	movw	r30, r24
	(this->TargetPpm) = _targetRpm * (this->Encoder.PulsesPerRotation);
     288:	a3 89       	ldd	r26, Z+19	; 0x13
     28a:	b4 89       	ldd	r27, Z+20	; 0x14
     28c:	9a 01       	movw	r18, r20
     28e:	ab 01       	movw	r20, r22
     290:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     294:	62 83       	std	Z+2, r22	; 0x02
     296:	73 83       	std	Z+3, r23	; 0x03
     298:	84 83       	std	Z+4, r24	; 0x04
     29a:	95 83       	std	Z+5, r25	; 0x05
     29c:	08 95       	ret

0000029e <_ZN15DC_Motor_Driver12setTargetPPMEl>:
}

void DC_Motor_Driver::setTargetPPM(int32_t _targetPpm)
{
	(this->TargetPpm) = _targetPpm;
     29e:	fc 01       	movw	r30, r24
     2a0:	42 83       	std	Z+2, r20	; 0x02
     2a2:	53 83       	std	Z+3, r21	; 0x03
     2a4:	64 83       	std	Z+4, r22	; 0x04
     2a6:	75 83       	std	Z+5, r23	; 0x05
     2a8:	08 95       	ret

000002aa <_ZN15DC_Motor_Driver12getTargetPPMEv>:
}

int32_t DC_Motor_Driver::getTargetPPM()
{
	return (this->TargetPpm);
     2aa:	fc 01       	movw	r30, r24
     2ac:	62 81       	ldd	r22, Z+2	; 0x02
     2ae:	73 81       	ldd	r23, Z+3	; 0x03
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	95 81       	ldd	r25, Z+5	; 0x05
}
     2b4:	08 95       	ret

000002b6 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>:

void DC_Motor_Driver::setDirection(RotationDirection _direction)
{
     2b6:	fc 01       	movw	r30, r24
	this->CurrentDirection.direction = _direction;
     2b8:	66 83       	std	Z+6, r22	; 0x06
     2ba:	a7 81       	ldd	r26, Z+7	; 0x07
     2bc:	b0 85       	ldd	r27, Z+8	; 0x08
	
	switch (_direction)
     2be:	66 23       	and	r22, r22
     2c0:	69 f0       	breq	.+26     	; 0x2dc <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x26>
     2c2:	42 85       	ldd	r20, Z+10	; 0x0a
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	01 f5       	brne	.+64     	; 0x308 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x52>
		case CLOCKWISE:
		*this->CurrentDirection.PORTx_CTRL |= (1 << this->CurrentDirection.PORTxN_CTRL_1);
		*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
		break;
		case COUNTERCLOCKWISE:
		*this->CurrentDirection.PORTx_CTRL |= (1 << this->CurrentDirection.PORTxN_CTRL_2);
     2c8:	5c 91       	ld	r21, X
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9c 01       	movw	r18, r24
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x1e>
     2d2:	22 0f       	add	r18, r18
     2d4:	4a 95       	dec	r20
     2d6:	ea f7       	brpl	.-6      	; 0x2d2 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x1c>
     2d8:	25 2b       	or	r18, r21
     2da:	22 c0       	rjmp	.+68     	; 0x320 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x6a>
	this->CurrentDirection.direction = _direction;
	
	switch (_direction)
	{
		case CLOCKWISE:
		*this->CurrentDirection.PORTx_CTRL |= (1 << this->CurrentDirection.PORTxN_CTRL_1);
     2dc:	4c 91       	ld	r20, X
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9c 01       	movw	r18, r24
     2e4:	01 84       	ldd	r0, Z+9	; 0x09
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x36>
     2e8:	22 0f       	add	r18, r18
     2ea:	33 1f       	adc	r19, r19
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x32>
     2f0:	24 2b       	or	r18, r20
     2f2:	2c 93       	st	X, r18
		*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
     2f4:	a7 81       	ldd	r26, Z+7	; 0x07
     2f6:	b0 85       	ldd	r27, Z+8	; 0x08
     2f8:	2c 91       	ld	r18, X
     2fa:	02 84       	ldd	r0, Z+10	; 0x0a
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x4c>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x48>
     306:	16 c0       	rjmp	.+44     	; 0x334 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x7e>
		case COUNTERCLOCKWISE:
		*this->CurrentDirection.PORTx_CTRL |= (1 << this->CurrentDirection.PORTxN_CTRL_2);
		*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_1);
		break;
		default:
		*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
     308:	3c 91       	ld	r19, X
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	bc 01       	movw	r22, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x60>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	4a 95       	dec	r20
     318:	e2 f7       	brpl	.-8      	; 0x312 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x5c>
     31a:	26 2f       	mov	r18, r22
     31c:	20 95       	com	r18
     31e:	23 23       	and	r18, r19
     320:	2c 93       	st	X, r18
		*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_1);
     322:	a7 81       	ldd	r26, Z+7	; 0x07
     324:	b0 85       	ldd	r27, Z+8	; 0x08
     326:	2c 91       	ld	r18, X
     328:	01 84       	ldd	r0, Z+9	; 0x09
     32a:	02 c0       	rjmp	.+4      	; 0x330 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x7a>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection+0x76>
     334:	80 95       	com	r24
     336:	82 23       	and	r24, r18
     338:	8c 93       	st	X, r24
     33a:	08 95       	ret

0000033c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>:
	}
}

void DC_Motor_Driver::setPwmDutyCycle(int16_t OCRnX_Val)
{
	cli();
     33c:	f8 94       	cli
	*this->OCRnX = (OCRnX_Val < 0) ? (-OCRnX_Val) : OCRnX_Val;
     33e:	dc 01       	movw	r26, r24
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	9b 01       	movw	r18, r22
     346:	77 ff       	sbrs	r23, 7
     348:	04 c0       	rjmp	.+8      	; 0x352 <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x16>
     34a:	22 27       	eor	r18, r18
     34c:	33 27       	eor	r19, r19
     34e:	26 1b       	sub	r18, r22
     350:	37 0b       	sbc	r19, r23
     352:	31 83       	std	Z+1, r19	; 0x01
     354:	20 83       	st	Z, r18
	sei();
     356:	78 94       	sei
	
	if(this->motorRunning)
     358:	fc 01       	movw	r30, r24
     35a:	25 89       	ldd	r18, Z+21	; 0x15
     35c:	22 23       	and	r18, r18
     35e:	39 f0       	breq	.+14     	; 0x36e <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x32>
	{		
		(OCRnX_Val > 0) ? setDirection(COUNTERCLOCKWISE) : setDirection(CLOCKWISE);	
     360:	16 16       	cp	r1, r22
     362:	17 06       	cpc	r1, r23
     364:	14 f4       	brge	.+4      	; 0x36a <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x2e>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	01 c0       	rjmp	.+2      	; 0x36c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi+0x30>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	a4 cf       	rjmp	.-184    	; 0x2b6 <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>
     36e:	08 95       	ret

00000370 <_ZN15DC_Motor_Driver10startMotorEv>:
	}
}

void DC_Motor_Driver::startMotor()
{
	this->motorRunning = 1;
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	fc 01       	movw	r30, r24
     374:	25 8b       	std	Z+21, r18	; 0x15
     376:	08 95       	ret

00000378 <_ZN15DC_Motor_Driver9stopMotorEv>:
}

void DC_Motor_Driver::stopMotor()
{
     378:	fc 01       	movw	r30, r24
	this->motorRunning = 0;
     37a:	15 8a       	std	Z+21, r1	; 0x15
	
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_1);
     37c:	a7 81       	ldd	r26, Z+7	; 0x07
     37e:	b0 85       	ldd	r27, Z+8	; 0x08
     380:	9c 91       	ld	r25, X
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	a9 01       	movw	r20, r18
     388:	01 84       	ldd	r0, Z+9	; 0x09
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN15DC_Motor_Driver9stopMotorEv+0x18>
     38c:	44 0f       	add	r20, r20
     38e:	55 1f       	adc	r21, r21
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN15DC_Motor_Driver9stopMotorEv+0x14>
     394:	84 2f       	mov	r24, r20
     396:	80 95       	com	r24
     398:	89 23       	and	r24, r25
     39a:	8c 93       	st	X, r24
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
     39c:	a7 81       	ldd	r26, Z+7	; 0x07
     39e:	b0 85       	ldd	r27, Z+8	; 0x08
     3a0:	8c 91       	ld	r24, X
     3a2:	02 84       	ldd	r0, Z+10	; 0x0a
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <_ZN15DC_Motor_Driver9stopMotorEv+0x32>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	0a 94       	dec	r0
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <_ZN15DC_Motor_Driver9stopMotorEv+0x2e>
     3ae:	20 95       	com	r18
     3b0:	28 23       	and	r18, r24
     3b2:	2c 93       	st	X, r18
     3b4:	08 95       	ret

000003b6 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>:
								volatile uint8_t* TCCRnA, 
								volatile uint8_t* TCCRnB,
								volatile uint16_t* _OCRnX,
								uint8_t COMNx1
								)
{
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	af 92       	push	r10
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	1f 92       	push	r1
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	da 82       	std	Y+2, r13	; 0x02
     3de:	c9 82       	std	Y+1, r12	; 0x01
     3e0:	4f 88       	ldd	r4, Y+23	; 0x17
     3e2:	58 8c       	ldd	r5, Y+24	; 0x18
     3e4:	69 8c       	ldd	r6, Y+25	; 0x19
     3e6:	7a 8c       	ldd	r7, Y+26	; 0x1a
     3e8:	2b 8c       	ldd	r2, Y+27	; 0x1b
     3ea:	3c 8c       	ldd	r3, Y+28	; 0x1c
	*DDRx_PWM |= (1<<DDxN_PWM); // set used PWM pin as out port
     3ec:	db 01       	movw	r26, r22
     3ee:	1c 91       	ld	r17, X
     3f0:	a1 e0       	ldi	r26, 0x01	; 1
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	fd 01       	movw	r30, r26
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x46>
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	4a 95       	dec	r20
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x42>
     400:	af 01       	movw	r20, r30
     402:	41 2b       	or	r20, r17
     404:	fb 01       	movw	r30, r22
     406:	40 83       	st	Z, r20
	*DDRx_CTRL |= (1<<DDxN_CTRL_1) | (1<<DDxN_CTRL_2); // set used Direction Control pin as out port
     408:	f9 01       	movw	r30, r18
     40a:	60 81       	ld	r22, Z
     40c:	ad 01       	movw	r20, r26
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	44 0f       	add	r20, r20
     412:	0a 95       	dec	r16
     414:	ea f7       	brpl	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     416:	64 2b       	or	r22, r20
     418:	ad 01       	movw	r20, r26
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	44 0f       	add	r20, r20
     41e:	ea 94       	dec	r14
     420:	ea f7       	brpl	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     422:	46 2b       	or	r20, r22
     424:	40 83       	st	Z, r20
	*PORTxN_CTRL &= ~(1<<PORTxN_CTRL_1) | (1<<PORTxN_CTRL_2); // set Control bits to zero so motor is not running
     426:	f6 01       	movw	r30, r12
     428:	30 81       	ld	r19, Z
     42a:	ad 01       	movw	r20, r26
     42c:	0a 2c       	mov	r0, r10
     42e:	01 c0       	rjmp	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	44 0f       	add	r20, r20
     432:	0a 94       	dec	r0
     434:	ea f7       	brpl	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     436:	24 2f       	mov	r18, r20
     438:	20 95       	com	r18
     43a:	ad 01       	movw	r20, r26
     43c:	08 2c       	mov	r0, r8
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	44 0f       	add	r20, r20
     442:	0a 94       	dec	r0
     444:	ea f7       	brpl	.-6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     446:	24 2b       	or	r18, r20
     448:	23 23       	and	r18, r19
     44a:	20 83       	st	Z, r18
	this->CurrentDirection = {
		.direction = CLOCKWISE,
		.PORTx_CTRL = PORTxN_CTRL,
		.PORTxN_CTRL_1 = PORTxN_CTRL_1,
		.PORTxN_CTRL_2 = PORTxN_CTRL_2		
	};
     44c:	fc 01       	movw	r30, r24
     44e:	16 82       	std	Z+6, r1	; 0x06
     450:	d0 86       	std	Z+8, r13	; 0x08
     452:	c7 82       	std	Z+7, r12	; 0x07
     454:	a1 86       	std	Z+9, r10	; 0x09
     456:	82 86       	std	Z+10, r8	; 0x0a
	
	
	*ICRn = PWM_TOP_TICK; // define PWM frequency
     458:	2f e3       	ldi	r18, 0x3F	; 63
     45a:	3f e1       	ldi	r19, 0x1F	; 31
     45c:	ed 89       	ldd	r30, Y+21	; 0x15
     45e:	fe 89       	ldd	r31, Y+22	; 0x16
     460:	31 83       	std	Z+1, r19	; 0x01
     462:	20 83       	st	Z, r18
	*TCCRnA |= (1<<COMNx1); // clear down counting, set up counting	
     464:	f2 01       	movw	r30, r4
     466:	20 81       	ld	r18, Z
     468:	0d 8c       	ldd	r0, Y+29	; 0x1d
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	aa 0f       	add	r26, r26
     46e:	bb 1f       	adc	r27, r27
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     474:	a2 2b       	or	r26, r18
     476:	a0 83       	st	Z, r26
	*TCCRnA |= (1<<WGMN1); // Set ICRn as TOP
     478:	20 81       	ld	r18, Z
     47a:	22 60       	ori	r18, 0x02	; 2
     47c:	20 83       	st	Z, r18
	*TCCRnB |= (1<<WGMN3); // Set ICRn as TOP
     47e:	d3 01       	movw	r26, r6
     480:	2c 91       	ld	r18, X
     482:	20 61       	ori	r18, 0x10	; 16
     484:	2c 93       	st	X, r18
	*TCCRnB |= (1<<CSN0); // Set Timer without Prescaling
     486:	2c 91       	ld	r18, X
     488:	21 60       	ori	r18, 0x01	; 1
     48a:	2c 93       	st	X, r18
	
	this->OCRnX = _OCRnX;
     48c:	fc 01       	movw	r30, r24
     48e:	31 82       	std	Z+1, r3	; 0x01
     490:	20 82       	st	Z, r2
	*this->OCRnX = 0;
     492:	d1 01       	movw	r26, r2
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	1c 92       	st	X, r1
     498:	1e 92       	st	-X, r1
}
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	af 90       	pop	r10
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	5f 90       	pop	r5
     4b6:	4f 90       	pop	r4
     4b8:	3f 90       	pop	r3
     4ba:	2f 90       	pop	r2
     4bc:	08 95       	ret

000004be <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>:
uint8_t PORTxN_RotaryEncoderPhase_B, //Flag to turn on internal pullUp of  Ctrl Pin2
uint8_t ISCn0,
uint8_t ISCn1,
volatile int32_t* EncoderTicks
)
{
     4be:	4f 92       	push	r4
     4c0:	5f 92       	push	r5
     4c2:	6f 92       	push	r6
     4c4:	7f 92       	push	r7
     4c6:	8f 92       	push	r8
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	dc 01       	movw	r26, r24
	// make sure ports are set as inports
	*DDRx_RotaryEncoderPhase_A &= ~(1<<DDxN_RotaryEncoderPhase_A);
     4e0:	fa 01       	movw	r30, r20
     4e2:	90 81       	ld	r25, Z
     4e4:	44 24       	eor	r4, r4
     4e6:	43 94       	inc	r4
     4e8:	51 2c       	mov	r5, r1
     4ea:	32 01       	movw	r6, r4
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x34>
     4ee:	66 0c       	add	r6, r6
     4f0:	77 1c       	adc	r7, r7
     4f2:	0a 95       	dec	r16
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x30>
     4f6:	86 2d       	mov	r24, r6
     4f8:	80 95       	com	r24
     4fa:	89 23       	and	r24, r25
     4fc:	80 83       	st	Z, r24
	*DDRx_RotaryEncoderPhase_B &= ~(1<<DDxN_RotaryEncoderPhase_B);
     4fe:	f9 01       	movw	r30, r18
     500:	90 81       	ld	r25, Z
     502:	a2 01       	movw	r20, r4
     504:	01 c0       	rjmp	.+2      	; 0x508 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x4a>
     506:	44 0f       	add	r20, r20
     508:	ea 94       	dec	r14
     50a:	ea f7       	brpl	.-6      	; 0x506 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x48>
     50c:	84 2f       	mov	r24, r20
     50e:	80 95       	com	r24
     510:	89 23       	and	r24, r25
     512:	80 83       	st	Z, r24


	this->Encoder.Enocder_Count = EncoderTicks;
     514:	8d 89       	ldd	r24, Y+21	; 0x15
     516:	9e 89       	ldd	r25, Y+22	; 0x16
     518:	1c 96       	adiw	r26, 0x0c	; 12
     51a:	9c 93       	st	X, r25
     51c:	8e 93       	st	-X, r24
     51e:	1b 97       	sbiw	r26, 0x0b	; 11
	this->Encoder.PORTx_EncoderPhase_A = PORTx_RotaryEncoderPhase_A;
     520:	1e 96       	adiw	r26, 0x0e	; 14
     522:	dc 92       	st	X, r13
     524:	ce 92       	st	-X, r12
     526:	1d 97       	sbiw	r26, 0x0d	; 13
	this->Encoder.PORTx_EncoderPhase_B = PORTx_RotaryEncoderPhase_B;
     528:	50 96       	adiw	r26, 0x10	; 16
     52a:	bc 92       	st	X, r11
     52c:	ae 92       	st	-X, r10
     52e:	1f 97       	sbiw	r26, 0x0f	; 15
	this->Encoder.PORTxN_EncoderPhase_A = PORTxN_RotaryEncoderPhase_A;
     530:	51 96       	adiw	r26, 0x11	; 17
     532:	8c 92       	st	X, r8
     534:	51 97       	sbiw	r26, 0x11	; 17
	this->Encoder.PORTxN_EncoderPhase_B = PORTxN_RotaryEncoderPhase_B;
     536:	8a 89       	ldd	r24, Y+18	; 0x12
     538:	52 96       	adiw	r26, 0x12	; 18
     53a:	8c 93       	st	X, r24
     53c:	52 97       	sbiw	r26, 0x12	; 18
	
	//Turn on internal PullUp
	*this->Encoder.PORTx_EncoderPhase_A |= (1<<this->Encoder.PORTxN_EncoderPhase_A);
     53e:	f6 01       	movw	r30, r12
     540:	20 81       	ld	r18, Z
     542:	c2 01       	movw	r24, r4
     544:	01 c0       	rjmp	.+2      	; 0x548 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x8a>
     546:	88 0f       	add	r24, r24
     548:	8a 94       	dec	r8
     54a:	ea f7       	brpl	.-6      	; 0x546 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0x88>
     54c:	82 2b       	or	r24, r18
     54e:	80 83       	st	Z, r24
	*this->Encoder.PORTx_EncoderPhase_B |= (1<<this->Encoder.PORTxN_EncoderPhase_B);
     550:	1f 96       	adiw	r26, 0x0f	; 15
     552:	2d 91       	ld	r18, X+
     554:	3c 91       	ld	r19, X
     556:	50 97       	sbiw	r26, 0x10	; 16
     558:	f9 01       	movw	r30, r18
     55a:	40 81       	ld	r20, Z
     55c:	c2 01       	movw	r24, r4
     55e:	52 96       	adiw	r26, 0x12	; 18
     560:	0c 90       	ld	r0, X
     562:	02 c0       	rjmp	.+4      	; 0x568 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xaa>
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xa6>
     56c:	84 2b       	or	r24, r20
     56e:	80 83       	st	Z, r24
	
	EICRA |= (1<<ISCn0) | (1<<ISCn1);
     570:	a9 e6       	ldi	r26, 0x69	; 105
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	2c 91       	ld	r18, X
     576:	c2 01       	movw	r24, r4
     578:	0c 88       	ldd	r0, Y+20	; 0x14
     57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xc2>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xbe>
     584:	28 2b       	or	r18, r24
     586:	c2 01       	movw	r24, r4
     588:	0b 88       	ldd	r0, Y+19	; 0x13
     58a:	02 c0       	rjmp	.+4      	; 0x590 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xd2>
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	0a 94       	dec	r0
     592:	e2 f7       	brpl	.-8      	; 0x58c <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xce>
     594:	82 2b       	or	r24, r18
     596:	8c 93       	st	X, r24
	EIMSK |= (1<<INTx0);
     598:	8d b3       	in	r24, 0x1d	; 29
     59a:	f2 01       	movw	r30, r4
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xe2>
     59e:	ee 0f       	add	r30, r30
     5a0:	6a 95       	dec	r22
     5a2:	ea f7       	brpl	.-6      	; 0x59e <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl+0xe0>
     5a4:	e8 2b       	or	r30, r24
     5a6:	ed bb       	out	0x1d, r30	; 29
	//sei();
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	8f 90       	pop	r8
     5bc:	7f 90       	pop	r7
     5be:	6f 90       	pop	r6
     5c0:	5f 90       	pop	r5
     5c2:	4f 90       	pop	r4
     5c4:	08 95       	ret

000005c6 <_ZN15DC_Motor_DriverC1Ehj>:
#include <util/delay.h>

volatile int32_t EncoderTicks_0;
volatile int32_t EncoderTicks_1;

DC_Motor_Driver::DC_Motor_Driver(pwm_num pwmN, uint16_t _PulsesPerRotation)
     5c6:	8f 92       	push	r8
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	0f 93       	push	r16
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
{
	this->motorRunning = 0;
     5da:	1d 8a       	std	Y+21, r1	; 0x15
	this->Encoder.PulsesPerRotation = _PulsesPerRotation;
     5dc:	5c 8b       	std	Y+20, r21	; 0x14
     5de:	4b 8b       	std	Y+19, r20	; 0x13
	
	switch (pwmN)
     5e0:	66 23       	and	r22, r22
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <_ZN15DC_Motor_DriverC1Ehj+0x20>
     5e4:	45 c0       	rjmp	.+138    	; 0x670 <_ZN15DC_Motor_DriverC1Ehj+0xaa>
     5e6:	61 30       	cpi	r22, 0x01	; 1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <_ZN15DC_Motor_DriverC1Ehj+0x26>
     5ea:	81 c0       	rjmp	.+258    	; 0x6ee <_ZN15DC_Motor_DriverC1Ehj+0x128>
	case PWM_0: //A
		setPWMRegisters(&DDRE, DDE3, &DDRC, DDC5, DDC7, &PORTC, PC5, PC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3A, COMNA1);
		setEncoderRegisters(INT0, &DDRD, &DDRA, DDD0, DDA0, &PORTD, &PORTA, PD0, PA0, ISC00, ISC01, &EncoderTicks_0);
		break;
	case PWM_1: //B
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC1, DDC3, &PORTC, PC1, PC3, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
     5ec:	85 e0       	ldi	r24, 0x05	; 5
     5ee:	8f 93       	push	r24
     5f0:	1f 92       	push	r1
     5f2:	8a e9       	ldi	r24, 0x9A	; 154
     5f4:	8f 93       	push	r24
     5f6:	1f 92       	push	r1
     5f8:	81 e9       	ldi	r24, 0x91	; 145
     5fa:	8f 93       	push	r24
     5fc:	1f 92       	push	r1
     5fe:	80 e9       	ldi	r24, 0x90	; 144
     600:	8f 93       	push	r24
     602:	1f 92       	push	r1
     604:	86 e9       	ldi	r24, 0x96	; 150
     606:	8f 93       	push	r24
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	88 2e       	mov	r8, r24
     60c:	aa 24       	eor	r10, r10
     60e:	a3 94       	inc	r10
     610:	98 e2       	ldi	r25, 0x28	; 40
     612:	c9 2e       	mov	r12, r25
     614:	d1 2c       	mov	r13, r1
     616:	23 e0       	ldi	r18, 0x03	; 3
     618:	e2 2e       	mov	r14, r18
     61a:	01 e0       	ldi	r16, 0x01	; 1
     61c:	27 e2       	ldi	r18, 0x27	; 39
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	44 e0       	ldi	r20, 0x04	; 4
     622:	6d e2       	ldi	r22, 0x2D	; 45
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	ce 01       	movw	r24, r28
     628:	c6 de       	rcall	.-628    	; 0x3b6 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		setEncoderRegisters(INT1, &DDRD, &DDRA, DDD1, DDA2, &PORTD, &PORTA, PD1, PA2, ISC10, ISC11, &EncoderTicks_1);
     62a:	8a e3       	ldi	r24, 0x3A	; 58
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	8f 93       	push	r24
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	8f 93       	push	r24
     63a:	8f 93       	push	r24
     63c:	88 24       	eor	r8, r8
     63e:	83 94       	inc	r8
     640:	32 e2       	ldi	r19, 0x22	; 34
     642:	a3 2e       	mov	r10, r19
     644:	b1 2c       	mov	r11, r1
     646:	4b e2       	ldi	r20, 0x2B	; 43
     648:	c4 2e       	mov	r12, r20
     64a:	d1 2c       	mov	r13, r1
     64c:	52 e0       	ldi	r21, 0x02	; 2
     64e:	e5 2e       	mov	r14, r21
     650:	21 e2       	ldi	r18, 0x21	; 33
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4a e2       	ldi	r20, 0x2A	; 42
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	30 df       	rcall	.-416    	; 0x4be <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>
		break;
     65e:	8d b7       	in	r24, 0x3d	; 61
     660:	9e b7       	in	r25, 0x3e	; 62
     662:	0e 96       	adiw	r24, 0x0e	; 14
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	9e bf       	out	0x3e, r25	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	8d bf       	out	0x3d, r24	; 61
	}
}
     66e:	3f c0       	rjmp	.+126    	; 0x6ee <_ZN15DC_Motor_DriverC1Ehj+0x128>
	this->Encoder.PulsesPerRotation = _PulsesPerRotation;
	
	switch (pwmN)
	{
	case PWM_0: //A
		setPWMRegisters(&DDRE, DDE3, &DDRC, DDC5, DDC7, &PORTC, PC5, PC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3A, COMNA1);
     670:	87 e0       	ldi	r24, 0x07	; 7
     672:	8f 93       	push	r24
     674:	1f 92       	push	r1
     676:	88 e9       	ldi	r24, 0x98	; 152
     678:	8f 93       	push	r24
     67a:	1f 92       	push	r1
     67c:	81 e9       	ldi	r24, 0x91	; 145
     67e:	8f 93       	push	r24
     680:	1f 92       	push	r1
     682:	80 e9       	ldi	r24, 0x90	; 144
     684:	8f 93       	push	r24
     686:	1f 92       	push	r1
     688:	86 e9       	ldi	r24, 0x96	; 150
     68a:	8f 93       	push	r24
     68c:	67 e0       	ldi	r22, 0x07	; 7
     68e:	86 2e       	mov	r8, r22
     690:	75 e0       	ldi	r23, 0x05	; 5
     692:	a7 2e       	mov	r10, r23
     694:	e8 e2       	ldi	r30, 0x28	; 40
     696:	ce 2e       	mov	r12, r30
     698:	d1 2c       	mov	r13, r1
     69a:	f7 e0       	ldi	r31, 0x07	; 7
     69c:	ef 2e       	mov	r14, r31
     69e:	05 e0       	ldi	r16, 0x05	; 5
     6a0:	27 e2       	ldi	r18, 0x27	; 39
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	43 e0       	ldi	r20, 0x03	; 3
     6a6:	6d e2       	ldi	r22, 0x2D	; 45
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	ce 01       	movw	r24, r28
     6ac:	84 de       	rcall	.-760    	; 0x3b6 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		setEncoderRegisters(INT0, &DDRD, &DDRA, DDD0, DDA0, &PORTD, &PORTA, PD0, PA0, ISC00, ISC01, &EncoderTicks_0);
     6ae:	8e e3       	ldi	r24, 0x3E	; 62
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	8f 93       	push	r24
     6ba:	1f 92       	push	r1
     6bc:	1f 92       	push	r1
     6be:	81 2c       	mov	r8, r1
     6c0:	a2 e2       	ldi	r26, 0x22	; 34
     6c2:	aa 2e       	mov	r10, r26
     6c4:	b1 2c       	mov	r11, r1
     6c6:	bb e2       	ldi	r27, 0x2B	; 43
     6c8:	cb 2e       	mov	r12, r27
     6ca:	d1 2c       	mov	r13, r1
     6cc:	e1 2c       	mov	r14, r1
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	21 e2       	ldi	r18, 0x21	; 33
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	4a e2       	ldi	r20, 0x2A	; 42
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	ce 01       	movw	r24, r28
     6dc:	f0 de       	rcall	.-544    	; 0x4be <_ZN15DC_Motor_Driver19setEncoderRegistersEhPVhS1_hhS1_S1_hhhhPVl>
		break;
     6de:	8d b7       	in	r24, 0x3d	; 61
     6e0:	9e b7       	in	r25, 0x3e	; 62
     6e2:	0e 96       	adiw	r24, 0x0e	; 14
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	9e bf       	out	0x3e, r25	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	8d bf       	out	0x3d, r24	; 61
	case PWM_1: //B
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC1, DDC3, &PORTC, PC1, PC3, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
		setEncoderRegisters(INT1, &DDRD, &DDRA, DDD1, DDA2, &PORTD, &PORTA, PD1, PA2, ISC10, ISC11, &EncoderTicks_1);
		break;
	}
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	0f 91       	pop	r16
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	8f 90       	pop	r8
     700:	08 95       	ret

00000702 <_ZN15DC_Motor_Driver15getEncoderCountEv>:
	//sei();
}

int32_t DC_Motor_Driver::getEncoderCount()
{
	cli();
     702:	f8 94       	cli
	int32_t currentTicks =  *this->Encoder.Enocder_Count;
     704:	dc 01       	movw	r26, r24
     706:	1b 96       	adiw	r26, 0x0b	; 11
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	1c 97       	sbiw	r26, 0x0c	; 12
     70e:	60 81       	ld	r22, Z
     710:	71 81       	ldd	r23, Z+1	; 0x01
     712:	82 81       	ldd	r24, Z+2	; 0x02
     714:	93 81       	ldd	r25, Z+3	; 0x03
	sei();
     716:	78 94       	sei
	return currentTicks;
}
     718:	08 95       	ret

0000071a <_Z13ENCODER_A_ISRPVhhPVl>:

void ENCODER_A_ISR(volatile uint8_t* PORTx_Encoder, uint8_t PORTxN_EncoderPhase_B, volatile int32_t* EncoderTicksX)
{
     71a:	fa 01       	movw	r30, r20
	if (!(*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     71c:	dc 01       	movw	r26, r24
     71e:	2c 91       	ld	r18, X
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	06 2e       	mov	r0, r22
     724:	02 c0       	rjmp	.+4      	; 0x72a <_Z13ENCODER_A_ISRPVhhPVl+0x10>
     726:	35 95       	asr	r19
     728:	27 95       	ror	r18
     72a:	0a 94       	dec	r0
     72c:	e2 f7       	brpl	.-8      	; 0x726 <_Z13ENCODER_A_ISRPVhhPVl+0xc>
     72e:	20 fd       	sbrc	r18, 0
     730:	08 c0       	rjmp	.+16     	; 0x742 <_Z13ENCODER_A_ISRPVhhPVl+0x28>
	{
		(*EncoderTicksX)++;
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	a2 81       	ldd	r26, Z+2	; 0x02
     738:	b3 81       	ldd	r27, Z+3	; 0x03
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	a1 1d       	adc	r26, r1
     73e:	b1 1d       	adc	r27, r1
     740:	11 c0       	rjmp	.+34     	; 0x764 <_Z13ENCODER_A_ISRPVhhPVl+0x4a>
	}
	else if ((*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     742:	dc 01       	movw	r26, r24
     744:	8c 91       	ld	r24, X
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <_Z13ENCODER_A_ISRPVhhPVl+0x34>
     74a:	95 95       	asr	r25
     74c:	87 95       	ror	r24
     74e:	6a 95       	dec	r22
     750:	e2 f7       	brpl	.-8      	; 0x74a <_Z13ENCODER_A_ISRPVhhPVl+0x30>
     752:	80 ff       	sbrs	r24, 0
     754:	0b c0       	rjmp	.+22     	; 0x76c <_Z13ENCODER_A_ISRPVhhPVl+0x52>
	{
		(*EncoderTicksX)--;
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	a2 81       	ldd	r26, Z+2	; 0x02
     75c:	b3 81       	ldd	r27, Z+3	; 0x03
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	a1 09       	sbc	r26, r1
     762:	b1 09       	sbc	r27, r1
     764:	80 83       	st	Z, r24
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	a2 83       	std	Z+2, r26	; 0x02
     76a:	b3 83       	std	Z+3, r27	; 0x03
     76c:	08 95       	ret

0000076e <__vector_1>:
	}
}

ISR(INT0_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	0b b6       	in	r0, 0x3b	; 59
     77a:	0f 92       	push	r0
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
	ENCODER_A_ISR(&PINA, PINA0, &EncoderTicks_0);
     794:	4e e3       	ldi	r20, 0x3E	; 62
     796:	53 e0       	ldi	r21, 0x03	; 3
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e2       	ldi	r24, 0x20	; 32
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	bd df       	rcall	.-134    	; 0x71a <_Z13ENCODER_A_ISRPVhhPVl>
}
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0b be       	out	0x3b, r0	; 59
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_2>:

ISR(INT1_vect)
{
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	4f 93       	push	r20
     7da:	5f 93       	push	r21
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	8f 93       	push	r24
     7e2:	9f 93       	push	r25
     7e4:	af 93       	push	r26
     7e6:	bf 93       	push	r27
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
	ENCODER_A_ISR(&PINA, PINA2, &EncoderTicks_1);
     7ec:	4a e3       	ldi	r20, 0x3A	; 58
     7ee:	53 e0       	ldi	r21, 0x03	; 3
     7f0:	62 e0       	ldi	r22, 0x02	; 2
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	91 df       	rcall	.-222    	; 0x71a <_Z13ENCODER_A_ISRPVhhPVl>
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0b be       	out	0x3b, r0	; 59
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <_ZN15Encoder_TrackerC1Ehj>:
}

float Encoder_Tracker::getEnocderCountInterpolated()
{
	return Encoder_Count_Interpolated;
}
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
     824:	68 83       	st	Y, r22
     826:	5a 83       	std	Y+2, r21	; 0x02
     828:	49 83       	std	Y+1, r20	; 0x01
     82a:	bc 01       	movw	r22, r24
     82c:	65 5f       	subi	r22, 0xF5	; 245
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4c e0       	ldi	r20, 0x0C	; 12
     836:	03 96       	adiw	r24, 0x03	; 3
     838:	0e 94 10 18 	call	0x3020	; 0x3020 <_Z9initQueueP5QueuePlhS1_>
     83c:	1b ae       	std	Y+59, r1	; 0x3b
     83e:	1c ae       	std	Y+60, r1	; 0x3c
     840:	1d ae       	std	Y+61, r1	; 0x3d
     842:	1e ae       	std	Y+62, r1	; 0x3e
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <_ZN15Encoder_Tracker5TrackEl>:
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	ec 01       	movw	r28, r24
     868:	cb 01       	movw	r24, r22
     86a:	ba 01       	movw	r22, r20
     86c:	5e 01       	movw	r10, r28
     86e:	23 e0       	ldi	r18, 0x03	; 3
     870:	a2 0e       	add	r10, r18
     872:	b1 1c       	adc	r11, r1
     874:	a5 01       	movw	r20, r10
     876:	0e 94 39 18 	call	0x3072	; 0x3072 <_Z6enqeuelP5Queue>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	c5 01       	movw	r24, r10
     87e:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     882:	6b 01       	movw	r12, r22
     884:	7c 01       	movw	r14, r24
     886:	6c 81       	ldd	r22, Y+4	; 0x04
     888:	61 50       	subi	r22, 0x01	; 1
     88a:	c5 01       	movw	r24, r10
     88c:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	26 1b       	sub	r18, r22
     896:	37 0b       	sbc	r19, r23
     898:	48 0b       	sbc	r20, r24
     89a:	59 0b       	sbc	r21, r25
     89c:	aa e0       	ldi	r26, 0x0A	; 10
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     8a4:	2c 81       	ldd	r18, Y+4	; 0x04
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	31 09       	sbc	r19, r1
     8ac:	03 2e       	mov	r0, r19
     8ae:	00 0c       	add	r0, r0
     8b0:	44 0b       	sbc	r20, r20
     8b2:	55 0b       	sbc	r21, r21
     8b4:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     8b8:	69 01       	movw	r12, r18
     8ba:	7a 01       	movw	r14, r20
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	c5 01       	movw	r24, r10
     8c0:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	8b ac       	ldd	r8, Y+59	; 0x3b
     8ca:	9c ac       	ldd	r9, Y+60	; 0x3c
     8cc:	ad ac       	ldd	r10, Y+61	; 0x3d
     8ce:	be ac       	ldd	r11, Y+62	; 0x3e
     8d0:	aa e0       	ldi	r26, 0x0A	; 10
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	28 19       	sub	r18, r8
     8de:	39 09       	sbc	r19, r9
     8e0:	4a 09       	sbc	r20, r10
     8e2:	5b 09       	sbc	r21, r11
     8e4:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     8e8:	2c 81       	ldd	r18, Y+4	; 0x04
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	31 09       	sbc	r19, r1
     8f0:	03 2e       	mov	r0, r19
     8f2:	00 0c       	add	r0, r0
     8f4:	44 0b       	sbc	r20, r20
     8f6:	55 0b       	sbc	r21, r21
     8f8:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     8fc:	29 01       	movw	r4, r18
     8fe:	3a 01       	movw	r6, r20
     900:	a5 e0       	ldi	r26, 0x05	; 5
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     90c:	64 0d       	add	r22, r4
     90e:	75 1d       	adc	r23, r5
     910:	86 1d       	adc	r24, r6
     912:	97 1d       	adc	r25, r7
     914:	26 e0       	ldi	r18, 0x06	; 6
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     920:	82 0e       	add	r8, r18
     922:	93 1e       	adc	r9, r19
     924:	a4 1e       	adc	r10, r20
     926:	b5 1e       	adc	r11, r21
     928:	8b ae       	std	Y+59, r8	; 0x3b
     92a:	9c ae       	std	Y+60, r9	; 0x3c
     92c:	ad ae       	std	Y+61, r10	; 0x3d
     92e:	be ae       	std	Y+62, r11	; 0x3e
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	08 95       	ret

0000094e <_ZN15Encoder_Tracker10countToPPMEl>:

int32_t Encoder_Tracker::countToPPM(int32_t _countDiff)
{
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	fc 01       	movw	r30, r24
     958:	6a 01       	movw	r12, r20
     95a:	7b 01       	movw	r14, r22
	int32_t ppm = (((_countDiff) * (((int32_t) this->TrackingFrequencyHz*1000) / (this->Enocder_Count_History.size-1)))*60)/1000;
	
	return ppm;
     95c:	20 81       	ld	r18, Z
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	a8 ee       	ldi	r26, 0xE8	; 232
     962:	b3 e0       	ldi	r27, 0x03	; 3
     964:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__umulhisi3>
     968:	24 81       	ldd	r18, Z+4	; 0x04
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	31 09       	sbc	r19, r1
     970:	03 2e       	mov	r0, r19
     972:	00 0c       	add	r0, r0
     974:	44 0b       	sbc	r20, r20
     976:	55 0b       	sbc	r21, r21
     978:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
     984:	9b 01       	movw	r18, r22
     986:	ac 01       	movw	r20, r24
     988:	ac e3       	ldi	r26, 0x3C	; 60
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     990:	28 ee       	ldi	r18, 0xE8	; 232
     992:	33 e0       	ldi	r19, 0x03	; 3
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
}
     99c:	ca 01       	movw	r24, r20
     99e:	b9 01       	movw	r22, r18
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	08 95       	ret

000009aa <_ZN15Encoder_Tracker6getPPMEv>:
	
	return rpm * sign;
}

int32_t Encoder_Tracker::getPPM()
{
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
	int32_t countDiff = getNthElement(&Enocder_Count_History, 0) - getNthElement(&Enocder_Count_History, this->Enocder_Count_History.size-1);
     9bc:	8c 01       	movw	r16, r24
     9be:	0d 5f       	subi	r16, 0xFD	; 253
     9c0:	1f 4f       	sbci	r17, 0xFF	; 255
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	c8 01       	movw	r24, r16
     9c6:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     9ca:	6b 01       	movw	r12, r22
     9cc:	7c 01       	movw	r14, r24
     9ce:	6c 81       	ldd	r22, Y+4	; 0x04
     9d0:	61 50       	subi	r22, 0x01	; 1
     9d2:	c8 01       	movw	r24, r16
     9d4:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     9d8:	a7 01       	movw	r20, r14
     9da:	96 01       	movw	r18, r12
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	48 0b       	sbc	r20, r24
     9e2:	59 0b       	sbc	r21, r25
	int8_t sign = (countDiff<0) ? -1 : 1;
     9e4:	57 fd       	sbrc	r21, 7
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <_ZN15Encoder_Tracker6getPPMEv+0x42>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <_ZN15Encoder_Tracker6getPPMEv+0x44>
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
	countDiff = countDiff * sign;
     9ee:	c8 2e       	mov	r12, r24
     9f0:	88 0f       	add	r24, r24
     9f2:	dd 08       	sbc	r13, r13
     9f4:	ee 08       	sbc	r14, r14
     9f6:	ff 08       	sbc	r15, r15
	int32_t rpm = countToPPM(countDiff);
     9f8:	c7 01       	movw	r24, r14
     9fa:	b6 01       	movw	r22, r12
     9fc:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
     a00:	ab 01       	movw	r20, r22
     a02:	bc 01       	movw	r22, r24
     a04:	ce 01       	movw	r24, r28
     a06:	a3 df       	rcall	.-186    	; 0x94e <_ZN15Encoder_Tracker10countToPPMEl>
	
	return rpm * sign;
     a08:	a7 01       	movw	r20, r14
     a0a:	96 01       	movw	r18, r12
     a0c:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <_ZN15Encoder_Tracker10countToRPMEl>:
	
	return ppm;
}

int16_t Encoder_Tracker::countToRPM(int32_t _countDiff)
{
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
     a3c:	6a 01       	movw	r12, r20
     a3e:	7b 01       	movw	r14, r22
	int16_t rpm = (((_countDiff*1000 / this->CountsPerRevolution) * (((int32_t) this->TrackingFrequencyHz*1000) / (this->Enocder_Count_History.size-1)))*60)/100000;
     a40:	28 81       	ld	r18, Y
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	a8 ee       	ldi	r26, 0xE8	; 232
     a46:	b3 e0       	ldi	r27, 0x03	; 3
     a48:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__umulhisi3>
     a4c:	2c 81       	ldd	r18, Y+4	; 0x04
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	31 09       	sbc	r19, r1
     a54:	03 2e       	mov	r0, r19
     a56:	00 0c       	add	r0, r0
     a58:	44 0b       	sbc	r20, r20
     a5a:	55 0b       	sbc	r21, r21
     a5c:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     a60:	49 01       	movw	r8, r18
     a62:	5a 01       	movw	r10, r20
     a64:	a8 ee       	ldi	r26, 0xE8	; 232
     a66:	b3 e0       	ldi	r27, 0x03	; 3
     a68:	a7 01       	movw	r20, r14
     a6a:	96 01       	movw	r18, r12
     a6c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     a70:	29 81       	ldd	r18, Y+1	; 0x01
     a72:	3a 81       	ldd	r19, Y+2	; 0x02
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     a7c:	ca 01       	movw	r24, r20
     a7e:	b9 01       	movw	r22, r18
     a80:	a5 01       	movw	r20, r10
     a82:	94 01       	movw	r18, r8
     a84:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	ac e3       	ldi	r26, 0x3C	; 60
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__muluhisi3>
     a94:	20 ea       	ldi	r18, 0xA0	; 160
     a96:	36 e8       	ldi	r19, 0x86	; 134
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
     aa0:	89 01       	movw	r16, r18
     aa2:	9a 01       	movw	r18, r20
	
	uint8_t rest = rpm%10;
     aa4:	ea e0       	ldi	r30, 0x0A	; 10
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	c8 01       	movw	r24, r16
     aaa:	bf 01       	movw	r22, r30
     aac:	0e 94 10 20 	call	0x4020	; 0x4020 <__divmodhi4>
	
	rpm = (rest<5) ? (rpm - rest) : (rpm + (10-rest));
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	28 f4       	brcc	.+10     	; 0xabe <_ZN15Encoder_Tracker10countToRPMEl+0x9c>
     ab4:	a8 01       	movw	r20, r16
     ab6:	48 1b       	sub	r20, r24
     ab8:	59 0b       	sbc	r21, r25
     aba:	ca 01       	movw	r24, r20
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <_ZN15Encoder_Tracker10countToRPMEl+0xa6>
     abe:	e8 1b       	sub	r30, r24
     ac0:	f1 09       	sbc	r31, r1
     ac2:	cf 01       	movw	r24, r30
     ac4:	80 0f       	add	r24, r16
     ac6:	91 1f       	adc	r25, r17
	rpm = rpm / 10;
	
	return rpm;
     ac8:	6a e0       	ldi	r22, 0x0A	; 10
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	0e 94 10 20 	call	0x4020	; 0x4020 <__divmodhi4>
     ad0:	cb 01       	movw	r24, r22
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	8f 90       	pop	r8
     aea:	08 95       	ret

00000aec <_ZN15Encoder_Tracker6getRPMEv>:
}*/
	
	

int16_t Encoder_Tracker::getRPM()
{
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
	int32_t countDiff = getNthElement(&Enocder_Count_History, 0) - getNthElement(&Enocder_Count_History, this->Enocder_Count_History.size-1);
     afe:	8c 01       	movw	r16, r24
     b00:	0d 5f       	subi	r16, 0xFD	; 253
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	c8 01       	movw	r24, r16
     b08:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
     b10:	6c 81       	ldd	r22, Y+4	; 0x04
     b12:	61 50       	subi	r22, 0x01	; 1
     b14:	c8 01       	movw	r24, r16
     b16:	0e 94 66 18 	call	0x30cc	; 0x30cc <_Z13getNthElementP5Queueh>
     b1a:	a7 01       	movw	r20, r14
     b1c:	96 01       	movw	r18, r12
     b1e:	26 1b       	sub	r18, r22
     b20:	37 0b       	sbc	r19, r23
     b22:	48 0b       	sbc	r20, r24
     b24:	59 0b       	sbc	r21, r25
	int8_t sign = (countDiff<0) ? -1 : 1;
     b26:	57 fd       	sbrc	r21, 7
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN15Encoder_Tracker6getRPMEv+0x42>
     b2a:	11 e0       	ldi	r17, 0x01	; 1
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <_ZN15Encoder_Tracker6getRPMEv+0x44>
     b2e:	1f ef       	ldi	r17, 0xFF	; 255
	countDiff = countDiff * sign;
	int16_t rpm = countToRPM(countDiff);
     b30:	a1 2f       	mov	r26, r17
     b32:	01 2e       	mov	r0, r17
     b34:	00 0c       	add	r0, r0
     b36:	bb 0b       	sbc	r27, r27
     b38:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__mulshisi3>
     b3c:	ab 01       	movw	r20, r22
     b3e:	bc 01       	movw	r22, r24
     b40:	ce 01       	movw	r24, r28
     b42:	6f df       	rcall	.-290    	; 0xa22 <_ZN15Encoder_Tracker10countToRPMEl>
	
	return rpm * sign;
}
     b44:	9c 01       	movw	r18, r24
     b46:	12 03       	mulsu	r17, r18
     b48:	c0 01       	movw	r24, r0
     b4a:	13 9f       	mul	r17, r19
     b4c:	90 0d       	add	r25, r0
     b4e:	11 24       	eor	r1, r1
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	08 95       	ret

00000b62 <_Z16createEventStorev>:
#include <avr/interrupt.h>
#include <avr/common.h>
#include "events.h"

event_type createEventStore()
{
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	1f 92       	push	r1
     b68:	1f 92       	push	r1
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	event_type store = 0;
     b6e:	1a 82       	std	Y+2, r1	; 0x02
     b70:	19 82       	std	Y+1, r1	; 0x01
	return store;
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <_Z8setEventjPVj>:

void setEvent(event_type event, event_type* eventStore) {
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	1f 92       	push	r1
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
	unsigned char sreg_old = SREG;
     b90:	2f b7       	in	r18, 0x3f	; 63
	cli();
     b92:	f8 94       	cli
	(*eventStore) |= event;
     b94:	49 81       	ldd	r20, Y+1	; 0x01
     b96:	5a 81       	ldd	r21, Y+2	; 0x02
     b98:	fb 01       	movw	r30, r22
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	84 2b       	or	r24, r20
     ba0:	95 2b       	or	r25, r21
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
	SREG = sreg_old;
     ba6:	2f bf       	out	0x3f, r18	; 63
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <_Z3mapfffff>:
	
	return (n + 1);
}

float map(float value, float r1Start, float r1End, float r2Start, float r2End)
{
     bb2:	4f 92       	push	r4
     bb4:	5f 92       	push	r5
     bb6:	6f 92       	push	r6
     bb8:	7f 92       	push	r7
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	28 97       	sbiw	r28, 0x08	; 8
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	29 01       	movw	r4, r18
     be0:	3a 01       	movw	r6, r20
     be2:	ed 82       	std	Y+5, r14	; 0x05
     be4:	fe 82       	std	Y+6, r15	; 0x06
     be6:	0f 83       	std	Y+7, r16	; 0x07
     be8:	18 87       	std	Y+8, r17	; 0x08
	return (int16_t) ((value - r1Start) * (r2End - r2Start) / (r1End - r1Start) + r2Start);
     bea:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__subsf3>
     bee:	69 83       	std	Y+1, r22	; 0x01
     bf0:	7a 83       	std	Y+2, r23	; 0x02
     bf2:	8b 83       	std	Y+3, r24	; 0x03
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	a6 01       	movw	r20, r12
     bf8:	95 01       	movw	r18, r10
     bfa:	6a 8d       	ldd	r22, Y+26	; 0x1a
     bfc:	7b 8d       	ldd	r23, Y+27	; 0x1b
     bfe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c00:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c02:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__subsf3>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	69 81       	ldd	r22, Y+1	; 0x01
     c0c:	7a 81       	ldd	r23, Y+2	; 0x02
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__mulsf3>
     c16:	69 83       	std	Y+1, r22	; 0x01
     c18:	7a 83       	std	Y+2, r23	; 0x02
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	a3 01       	movw	r20, r6
     c20:	92 01       	movw	r18, r4
     c22:	c8 01       	movw	r24, r16
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__subsf3>
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	69 81       	ldd	r22, Y+1	; 0x01
     c30:	7a 81       	ldd	r23, Y+2	; 0x02
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	0e 94 25 1c 	call	0x384a	; 0x384a <__divsf3>
     c3a:	a6 01       	movw	r20, r12
     c3c:	95 01       	movw	r18, r10
     c3e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__addsf3>
     c42:	0e 94 8d 1c 	call	0x391a	; 0x391a <__fixsfsi>
     c46:	07 2e       	mov	r0, r23
     c48:	00 0c       	add	r0, r0
     c4a:	88 0b       	sbc	r24, r24
     c4c:	99 0b       	sbc	r25, r25
     c4e:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__floatsisf>
}
     c52:	28 96       	adiw	r28, 0x08	; 8
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	08 95       	ret

00000c7c <_ZNK8std_msgs4Time9serializeEPh>:
	_motorRight->stopMotor();
	_motorLeft->stopMotor();
	_motorRight->setTargetRPM(-30);
	_motorLeft->setTargetRPM(30);
	_motorRight->startMotor();
	_motorLeft->startMotor();
     c7c:	dc 01       	movw	r26, r24
     c7e:	fb 01       	movw	r30, r22
     c80:	12 96       	adiw	r26, 0x02	; 2
     c82:	8c 91       	ld	r24, X
     c84:	12 97       	sbiw	r26, 0x02	; 2
     c86:	80 83       	st	Z, r24
     c88:	13 96       	adiw	r26, 0x03	; 3
     c8a:	8c 91       	ld	r24, X
     c8c:	13 97       	sbiw	r26, 0x03	; 3
     c8e:	81 83       	std	Z+1, r24	; 0x01
     c90:	14 96       	adiw	r26, 0x04	; 4
     c92:	8c 91       	ld	r24, X
     c94:	14 97       	sbiw	r26, 0x04	; 4
     c96:	82 83       	std	Z+2, r24	; 0x02
     c98:	15 96       	adiw	r26, 0x05	; 5
     c9a:	8c 91       	ld	r24, X
     c9c:	15 97       	sbiw	r26, 0x05	; 5
     c9e:	83 83       	std	Z+3, r24	; 0x03
     ca0:	16 96       	adiw	r26, 0x06	; 6
     ca2:	8c 91       	ld	r24, X
     ca4:	16 97       	sbiw	r26, 0x06	; 6
     ca6:	84 83       	std	Z+4, r24	; 0x04
     ca8:	17 96       	adiw	r26, 0x07	; 7
     caa:	8c 91       	ld	r24, X
     cac:	17 97       	sbiw	r26, 0x07	; 7
     cae:	85 83       	std	Z+5, r24	; 0x05
     cb0:	18 96       	adiw	r26, 0x08	; 8
     cb2:	8c 91       	ld	r24, X
     cb4:	18 97       	sbiw	r26, 0x08	; 8
     cb6:	86 83       	std	Z+6, r24	; 0x06
     cb8:	19 96       	adiw	r26, 0x09	; 9
     cba:	8c 91       	ld	r24, X
     cbc:	87 83       	std	Z+7, r24	; 0x07
     cbe:	88 e0       	ldi	r24, 0x08	; 8
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	08 95       	ret

00000cc4 <_ZN8std_msgs4Time11deserializeEPh>:
     cc4:	fc 01       	movw	r30, r24
     cc6:	db 01       	movw	r26, r22
     cc8:	4c 91       	ld	r20, X
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	42 83       	std	Z+2, r20	; 0x02
     cd2:	53 83       	std	Z+3, r21	; 0x03
     cd4:	64 83       	std	Z+4, r22	; 0x04
     cd6:	75 83       	std	Z+5, r23	; 0x05
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	8c 91       	ld	r24, X
     cdc:	11 97       	sbiw	r26, 0x01	; 1
     cde:	58 2b       	or	r21, r24
     ce0:	42 83       	std	Z+2, r20	; 0x02
     ce2:	53 83       	std	Z+3, r21	; 0x03
     ce4:	64 83       	std	Z+4, r22	; 0x04
     ce6:	75 83       	std	Z+5, r23	; 0x05
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	8c 91       	ld	r24, X
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	68 2b       	or	r22, r24
     cf0:	42 83       	std	Z+2, r20	; 0x02
     cf2:	53 83       	std	Z+3, r21	; 0x03
     cf4:	64 83       	std	Z+4, r22	; 0x04
     cf6:	75 83       	std	Z+5, r23	; 0x05
     cf8:	13 96       	adiw	r26, 0x03	; 3
     cfa:	8c 91       	ld	r24, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	78 2b       	or	r23, r24
     d00:	42 83       	std	Z+2, r20	; 0x02
     d02:	53 83       	std	Z+3, r21	; 0x03
     d04:	64 83       	std	Z+4, r22	; 0x04
     d06:	75 83       	std	Z+5, r23	; 0x05
     d08:	14 96       	adiw	r26, 0x04	; 4
     d0a:	4c 91       	ld	r20, X
     d0c:	14 97       	sbiw	r26, 0x04	; 4
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	46 83       	std	Z+6, r20	; 0x06
     d16:	57 83       	std	Z+7, r21	; 0x07
     d18:	60 87       	std	Z+8, r22	; 0x08
     d1a:	71 87       	std	Z+9, r23	; 0x09
     d1c:	15 96       	adiw	r26, 0x05	; 5
     d1e:	8c 91       	ld	r24, X
     d20:	15 97       	sbiw	r26, 0x05	; 5
     d22:	58 2b       	or	r21, r24
     d24:	46 83       	std	Z+6, r20	; 0x06
     d26:	57 83       	std	Z+7, r21	; 0x07
     d28:	60 87       	std	Z+8, r22	; 0x08
     d2a:	71 87       	std	Z+9, r23	; 0x09
     d2c:	16 96       	adiw	r26, 0x06	; 6
     d2e:	8c 91       	ld	r24, X
     d30:	16 97       	sbiw	r26, 0x06	; 6
     d32:	68 2b       	or	r22, r24
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
     d38:	60 87       	std	Z+8, r22	; 0x08
     d3a:	71 87       	std	Z+9, r23	; 0x09
     d3c:	17 96       	adiw	r26, 0x07	; 7
     d3e:	8c 91       	ld	r24, X
     d40:	78 2b       	or	r23, r24
     d42:	46 83       	std	Z+6, r20	; 0x06
     d44:	57 83       	std	Z+7, r21	; 0x07
     d46:	60 87       	std	Z+8, r22	; 0x08
     d48:	71 87       	std	Z+9, r23	; 0x09
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <_ZN8std_msgs4Time7getTypeEv>:
     d50:	80 e1       	ldi	r24, 0x10	; 16
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	08 95       	ret

00000d56 <_ZN8std_msgs4Time6getMD5Ev>:
     d56:	8f ee       	ldi	r24, 0xEF	; 239
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	08 95       	ret

00000d5c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
     d5c:	86 ed       	ldi	r24, 0xD6	; 214
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	08 95       	ret

00000d62 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
     d62:	85 eb       	ldi	r24, 0xB5	; 181
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	08 95       	ret

00000d68 <_ZN14rosserial_msgs3Log7getTypeEv>:
     d68:	82 ea       	ldi	r24, 0xA2	; 162
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	08 95       	ret

00000d6e <_ZN14rosserial_msgs3Log6getMD5Ev>:
     d6e:	81 e8       	ldi	r24, 0x81	; 129
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	08 95       	ret

00000d74 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
     d74:	85 e6       	ldi	r24, 0x65	; 101
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	08 95       	ret

00000d7a <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
     d7a:	84 e4       	ldi	r24, 0x44	; 68
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	08 95       	ret

00000d80 <_ZNK8std_msgs5Int329serializeEPh>:
     d80:	dc 01       	movw	r26, r24
     d82:	fb 01       	movw	r30, r22
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	4c 91       	ld	r20, X
     d88:	12 97       	sbiw	r26, 0x02	; 2
     d8a:	13 96       	adiw	r26, 0x03	; 3
     d8c:	2c 91       	ld	r18, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	14 96       	adiw	r26, 0x04	; 4
     d92:	9c 91       	ld	r25, X
     d94:	14 97       	sbiw	r26, 0x04	; 4
     d96:	15 96       	adiw	r26, 0x05	; 5
     d98:	8c 91       	ld	r24, X
     d9a:	40 83       	st	Z, r20
     d9c:	21 83       	std	Z+1, r18	; 0x01
     d9e:	92 83       	std	Z+2, r25	; 0x02
     da0:	83 83       	std	Z+3, r24	; 0x03
     da2:	84 e0       	ldi	r24, 0x04	; 4
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	08 95       	ret

00000da8 <_ZN8std_msgs5Int3211deserializeEPh>:
     da8:	fb 01       	movw	r30, r22
     daa:	40 81       	ld	r20, Z
     dac:	51 81       	ldd	r21, Z+1	; 0x01
     dae:	62 81       	ldd	r22, Z+2	; 0x02
     db0:	73 81       	ldd	r23, Z+3	; 0x03
     db2:	fc 01       	movw	r30, r24
     db4:	42 83       	std	Z+2, r20	; 0x02
     db6:	53 83       	std	Z+3, r21	; 0x03
     db8:	64 83       	std	Z+4, r22	; 0x04
     dba:	75 83       	std	Z+5, r23	; 0x05
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	08 95       	ret

00000dc2 <_ZN8std_msgs5Int327getTypeEv>:
     dc2:	85 e3       	ldi	r24, 0x35	; 53
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	08 95       	ret

00000dc8 <_ZN8std_msgs5Int326getMD5Ev>:
     dc8:	84 e1       	ldi	r24, 0x14	; 20
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	08 95       	ret

00000dce <_ZNK8std_msgs5Int649serializeEPh>:
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
     de2:	fb 01       	movw	r30, r22
     de4:	aa 81       	ldd	r26, Y+2	; 0x02
     de6:	bb 80       	ldd	r11, Y+3	; 0x03
     de8:	cc 80       	ldd	r12, Y+4	; 0x04
     dea:	dd 80       	ldd	r13, Y+5	; 0x05
     dec:	ee 80       	ldd	r14, Y+6	; 0x06
     dee:	ff 80       	ldd	r15, Y+7	; 0x07
     df0:	18 85       	ldd	r17, Y+8	; 0x08
     df2:	b9 85       	ldd	r27, Y+9	; 0x09
     df4:	a0 83       	st	Z, r26
     df6:	2a 2f       	mov	r18, r26
     df8:	3b 2d       	mov	r19, r11
     dfa:	a6 01       	movw	r20, r12
     dfc:	b7 01       	movw	r22, r14
     dfe:	81 2f       	mov	r24, r17
     e00:	9b 2f       	mov	r25, r27
     e02:	08 e0       	ldi	r16, 0x08	; 8
     e04:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e08:	21 83       	std	Z+1, r18	; 0x01
     e0a:	2a 2f       	mov	r18, r26
     e0c:	3b 2d       	mov	r19, r11
     e0e:	a6 01       	movw	r20, r12
     e10:	b7 01       	movw	r22, r14
     e12:	81 2f       	mov	r24, r17
     e14:	9b 2f       	mov	r25, r27
     e16:	00 e1       	ldi	r16, 0x10	; 16
     e18:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e1c:	22 83       	std	Z+2, r18	; 0x02
     e1e:	2a 2f       	mov	r18, r26
     e20:	3b 2d       	mov	r19, r11
     e22:	a6 01       	movw	r20, r12
     e24:	b7 01       	movw	r22, r14
     e26:	81 2f       	mov	r24, r17
     e28:	9b 2f       	mov	r25, r27
     e2a:	08 e1       	ldi	r16, 0x18	; 24
     e2c:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e30:	23 83       	std	Z+3, r18	; 0x03
     e32:	2a 2f       	mov	r18, r26
     e34:	3b 2d       	mov	r19, r11
     e36:	a6 01       	movw	r20, r12
     e38:	b7 01       	movw	r22, r14
     e3a:	81 2f       	mov	r24, r17
     e3c:	9b 2f       	mov	r25, r27
     e3e:	00 e2       	ldi	r16, 0x20	; 32
     e40:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e44:	24 83       	std	Z+4, r18	; 0x04
     e46:	2a 2f       	mov	r18, r26
     e48:	3b 2d       	mov	r19, r11
     e4a:	a6 01       	movw	r20, r12
     e4c:	b7 01       	movw	r22, r14
     e4e:	81 2f       	mov	r24, r17
     e50:	9b 2f       	mov	r25, r27
     e52:	08 e2       	ldi	r16, 0x28	; 40
     e54:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e58:	25 83       	std	Z+5, r18	; 0x05
     e5a:	2a 2f       	mov	r18, r26
     e5c:	3b 2d       	mov	r19, r11
     e5e:	a6 01       	movw	r20, r12
     e60:	b7 01       	movw	r22, r14
     e62:	81 2f       	mov	r24, r17
     e64:	9b 2f       	mov	r25, r27
     e66:	00 e3       	ldi	r16, 0x30	; 48
     e68:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e6c:	26 83       	std	Z+6, r18	; 0x06
     e6e:	2a 2f       	mov	r18, r26
     e70:	3b 2d       	mov	r19, r11
     e72:	a6 01       	movw	r20, r12
     e74:	b7 01       	movw	r22, r14
     e76:	81 2f       	mov	r24, r17
     e78:	9b 2f       	mov	r25, r27
     e7a:	08 e3       	ldi	r16, 0x38	; 56
     e7c:	0e 94 9b 20 	call	0x4136	; 0x4136 <__lshrdi3>
     e80:	27 83       	std	Z+7, r18	; 0x07
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	bf 90       	pop	r11
     e98:	08 95       	ret

00000e9a <_ZN8std_msgs5Int6411deserializeEPh>:
     e9a:	fc 01       	movw	r30, r24
     e9c:	db 01       	movw	r26, r22
     e9e:	8c 91       	ld	r24, X
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	8c 91       	ld	r24, X
     ea6:	11 97       	sbiw	r26, 0x01	; 1
     ea8:	83 83       	std	Z+3, r24	; 0x03
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	8c 91       	ld	r24, X
     eae:	12 97       	sbiw	r26, 0x02	; 2
     eb0:	84 83       	std	Z+4, r24	; 0x04
     eb2:	13 96       	adiw	r26, 0x03	; 3
     eb4:	8c 91       	ld	r24, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	85 83       	std	Z+5, r24	; 0x05
     eba:	14 96       	adiw	r26, 0x04	; 4
     ebc:	8c 91       	ld	r24, X
     ebe:	14 97       	sbiw	r26, 0x04	; 4
     ec0:	86 83       	std	Z+6, r24	; 0x06
     ec2:	15 96       	adiw	r26, 0x05	; 5
     ec4:	8c 91       	ld	r24, X
     ec6:	15 97       	sbiw	r26, 0x05	; 5
     ec8:	87 83       	std	Z+7, r24	; 0x07
     eca:	16 96       	adiw	r26, 0x06	; 6
     ecc:	8c 91       	ld	r24, X
     ece:	16 97       	sbiw	r26, 0x06	; 6
     ed0:	80 87       	std	Z+8, r24	; 0x08
     ed2:	17 96       	adiw	r26, 0x07	; 7
     ed4:	8c 91       	ld	r24, X
     ed6:	81 87       	std	Z+9, r24	; 0x09
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	08 95       	ret

00000ede <_ZN8std_msgs5Int647getTypeEv>:
     ede:	85 e0       	ldi	r24, 0x05	; 5
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	08 95       	ret

00000ee4 <_ZN8std_msgs5Int646getMD5Ev>:
     ee4:	84 ee       	ldi	r24, 0xE4	; 228
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	08 95       	ret

00000eea <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	8c 01       	movw	r16, r24
     ef4:	ec 01       	movw	r28, r24
     ef6:	27 96       	adiw	r28, 0x07	; 7
     ef8:	ce 01       	movw	r24, r28
     efa:	56 df       	rcall	.-340    	; 0xda8 <_ZN8std_msgs5Int3211deserializeEPh>
     efc:	d8 01       	movw	r26, r16
     efe:	1d 96       	adiw	r26, 0x0d	; 13
     f00:	ed 91       	ld	r30, X+
     f02:	fc 91       	ld	r31, X
     f04:	1e 97       	sbiw	r26, 0x0e	; 14
     f06:	ce 01       	movw	r24, r28
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	19 94       	eijmp

00000f12 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
     f12:	fc 01       	movw	r30, r24
     f14:	87 85       	ldd	r24, Z+15	; 0x0f
     f16:	90 89       	ldd	r25, Z+16	; 0x10
     f18:	08 95       	ret

00000f1a <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
     f1a:	85 e3       	ldi	r24, 0x35	; 53
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	08 95       	ret

00000f20 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
     f20:	84 e1       	ldi	r24, 0x14	; 20
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	08 95       	ret

00000f26 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9connectedEv>:
     f26:	8e 57       	subi	r24, 0x7E	; 126
     f28:	9b 4f       	sbci	r25, 0xFB	; 251
     f2a:	fc 01       	movw	r30, r24
     f2c:	80 81       	ld	r24, Z
     f2e:	08 95       	ret

00000f30 <_ZN3ros19FlashReadOutBuffer_D1Ev>:
     f30:	22 ef       	ldi	r18, 0xF2	; 242
     f32:	32 e0       	ldi	r19, 0x02	; 2
     f34:	fc 01       	movw	r30, r24
     f36:	31 83       	std	Z+1, r19	; 0x01
     f38:	20 83       	st	Z, r18
     f3a:	83 81       	ldd	r24, Z+3	; 0x03
     f3c:	94 81       	ldd	r25, Z+4	; 0x04
     f3e:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <_ZdlPv>

00000f42 <_ZN3ros19FlashReadOutBuffer_D0Ev>:
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	f3 df       	rcall	.-26     	; 0xf30 <_ZN3ros19FlashReadOutBuffer_D1Ev>
     f4a:	ce 01       	movw	r24, r28
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <_ZdlPv>

00000f54 <_Z20leftWheelVelCallbackRKN8std_msgs5Int32E>:
     f54:	fc 01       	movw	r30, r24
     f56:	42 81       	ldd	r20, Z+2	; 0x02
     f58:	53 81       	ldd	r21, Z+3	; 0x03
     f5a:	64 81       	ldd	r22, Z+4	; 0x04
     f5c:	75 81       	ldd	r23, Z+5	; 0x05
     f5e:	88 e5       	ldi	r24, 0x58	; 88
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	9d c9       	rjmp	.-3270   	; 0x29e <_ZN15DC_Motor_Driver12setTargetPPMEl>

00000f64 <_Z21RightWheelVelCallbackRKN8std_msgs5Int32E>:
     f64:	fc 01       	movw	r30, r24
     f66:	42 81       	ldd	r20, Z+2	; 0x02
     f68:	53 81       	ldd	r21, Z+3	; 0x03
     f6a:	64 81       	ldd	r22, Z+4	; 0x04
     f6c:	75 81       	ldd	r23, Z+5	; 0x05
     f6e:	70 95       	com	r23
     f70:	60 95       	com	r22
     f72:	50 95       	com	r21
     f74:	41 95       	neg	r20
     f76:	5f 4f       	sbci	r21, 0xFF	; 255
     f78:	6f 4f       	sbci	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	82 e4       	ldi	r24, 0x42	; 66
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	8e c9       	rjmp	.-3300   	; 0x29e <_ZN15DC_Motor_Driver12setTargetPPMEl>

00000f82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
     f82:	ab 01       	movw	r20, r22
     f84:	fc 01       	movw	r30, r24
     f86:	a7 81       	ldd	r26, Z+7	; 0x07
     f88:	b0 85       	ldd	r27, Z+8	; 0x08
     f8a:	65 81       	ldd	r22, Z+5	; 0x05
     f8c:	76 81       	ldd	r23, Z+6	; 0x06
     f8e:	ed 91       	ld	r30, X+
     f90:	fc 91       	ld	r31, X
     f92:	11 97       	sbiw	r26, 0x01	; 1
     f94:	01 90       	ld	r0, Z+
     f96:	f0 81       	ld	r31, Z
     f98:	e0 2d       	mov	r30, r0
     f9a:	cd 01       	movw	r24, r26
     f9c:	19 94       	eijmp

00000f9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>:
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	dc 01       	movw	r26, r24
     fa4:	15 96       	adiw	r26, 0x05	; 5
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	16 97       	sbiw	r26, 0x06	; 6
     fac:	fb 01       	movw	r30, r22
     fae:	15 96       	adiw	r26, 0x05	; 5
     fb0:	2d 91       	ld	r18, X+
     fb2:	3c 91       	ld	r19, X
     fb4:	16 97       	sbiw	r26, 0x06	; 6
     fb6:	25 39       	cpi	r18, 0x95	; 149
     fb8:	31 05       	cpc	r19, r1
     fba:	ec f4       	brge	.+58     	; 0xff6 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x58>
     fbc:	44 91       	lpm	r20, Z
     fbe:	13 96       	adiw	r26, 0x03	; 3
     fc0:	6d 91       	ld	r22, X+
     fc2:	7c 91       	ld	r23, X
     fc4:	14 97       	sbiw	r26, 0x04	; 4
     fc6:	eb 01       	movw	r28, r22
     fc8:	c2 0f       	add	r28, r18
     fca:	d3 1f       	adc	r29, r19
     fcc:	48 83       	st	Y, r20
     fce:	15 96       	adiw	r26, 0x05	; 5
     fd0:	2d 91       	ld	r18, X+
     fd2:	3c 91       	ld	r19, X
     fd4:	16 97       	sbiw	r26, 0x06	; 6
     fd6:	31 96       	adiw	r30, 0x01	; 1
     fd8:	13 96       	adiw	r26, 0x03	; 3
     fda:	cd 91       	ld	r28, X+
     fdc:	dc 91       	ld	r29, X
     fde:	14 97       	sbiw	r26, 0x04	; 4
     fe0:	c2 0f       	add	r28, r18
     fe2:	d3 1f       	adc	r29, r19
     fe4:	48 81       	ld	r20, Y
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	16 96       	adiw	r26, 0x06	; 6
     fec:	3c 93       	st	X, r19
     fee:	2e 93       	st	-X, r18
     ff0:	15 97       	sbiw	r26, 0x05	; 5
     ff2:	41 11       	cpse	r20, r1
     ff4:	dc cf       	rjmp	.-72     	; 0xfae <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x10>
     ff6:	15 96       	adiw	r26, 0x05	; 5
     ff8:	2d 91       	ld	r18, X+
     ffa:	3c 91       	ld	r19, X
     ffc:	16 97       	sbiw	r26, 0x06	; 6
     ffe:	25 39       	cpi	r18, 0x95	; 149
    1000:	31 05       	cpc	r19, r1
    1002:	24 f0       	brlt	.+8      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1004:	22 e0       	ldi	r18, 0x02	; 2
    1006:	17 96       	adiw	r26, 0x07	; 7
    1008:	2c 93       	st	X, r18
    100a:	17 97       	sbiw	r26, 0x07	; 7
    100c:	13 96       	adiw	r26, 0x03	; 3
    100e:	2d 91       	ld	r18, X+
    1010:	3c 91       	ld	r19, X
    1012:	14 97       	sbiw	r26, 0x04	; 4
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>:
    101e:	41 11       	cpse	r20, r1
    1020:	be cf       	rjmp	.-132    	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1022:	cb 01       	movw	r24, r22
    1024:	08 95       	ret

00001026 <_ZN3ros19FlashReadOutBuffer_11readMsgInfoEPKc>:
    1026:	bb cf       	rjmp	.-138    	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>

00001028 <_ZN3ros19FlashReadOutBuffer_C1Ev>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
    102e:	1a 82       	std	Y+2, r1	; 0x02
    1030:	82 ef       	ldi	r24, 0xF2	; 242
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	99 83       	std	Y+1, r25	; 0x01
    1036:	88 83       	st	Y, r24
    1038:	1e 82       	std	Y+6, r1	; 0x06
    103a:	1d 82       	std	Y+5, r1	; 0x05
    103c:	86 e9       	ldi	r24, 0x96	; 150
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Znaj>
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	fc 01       	movw	r30, r24
    104a:	10 82       	st	Z, r1
    104c:	eb 56       	subi	r30, 0x6B	; 107
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	10 82       	st	Z, r1
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <_Z9turnRightP15DC_Motor_DriverS0_>:
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	8b 01       	movw	r16, r22
    1064:	cb 01       	movw	r24, r22
    1066:	88 d9       	rcall	.-3312   	; 0x378 <_ZN15DC_Motor_Driver9stopMotorEv>
    1068:	ce 01       	movw	r24, r28
    106a:	86 d9       	rcall	.-3316   	; 0x378 <_ZN15DC_Motor_Driver9stopMotorEv>
    106c:	4f e0       	ldi	r20, 0x0F	; 15
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	c8 01       	movw	r24, r16
    1076:	07 d9       	rcall	.-3570   	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
    1078:	4f e0       	ldi	r20, 0x0F	; 15
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	ce 01       	movw	r24, r28
    1082:	01 d9       	rcall	.-3582   	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
    1084:	c8 01       	movw	r24, r16
    1086:	74 d9       	rcall	.-3352   	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>
    1088:	ce 01       	movw	r24, r28
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	6e c9       	rjmp	.-3364   	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>

00001094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
  {
    for(size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
    10a0:	6a 01       	movw	r12, r20
    10a2:	7b 01       	movw	r14, r22
    10a4:	02 2e       	mov	r0, r18
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x1c>
    10a8:	f6 94       	lsr	r15
    10aa:	e7 94       	ror	r14
    10ac:	d7 94       	ror	r13
    10ae:	c7 94       	ror	r12
    10b0:	0a 94       	dec	r0
    10b2:	d2 f7       	brpl	.-12     	; 0x10a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x14>
    10b4:	fc 01       	movw	r30, r24
    10b6:	c1 92       	st	Z+, r12
    10b8:	cf 01       	movw	r24, r30
    10ba:	28 5f       	subi	r18, 0xF8	; 248
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for(size_t i = 0; i < sizeof(V); i++)
    10be:	20 32       	cpi	r18, 0x20	; 32
    10c0:	31 05       	cpc	r19, r1
    10c2:	71 f7       	brne	.-36     	; 0x10a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xc>
      arr[i] = (var >> (8 * i));
  }
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	08 95       	ret

000010ce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	fb 01       	movw	r30, r22
    10f2:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	83 83       	std	Z+3, r24	; 0x03
    1100:	db 01       	movw	r26, r22
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	ba 01       	movw	r22, r20
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
    1108:	e4 e0       	ldi	r30, 0x04	; 4
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	14 96       	adiw	r26, 0x04	; 4
      for( uint32_t i = 0; i < ints_length; i++){
    110e:	ca 80       	ldd	r12, Y+2	; 0x02
    1110:	db 80       	ldd	r13, Y+3	; 0x03
    1112:	ec 80       	ldd	r14, Y+4	; 0x04
    1114:	fd 80       	ldd	r15, Y+5	; 0x05
    1116:	cf 01       	movw	r24, r30
    1118:	04 96       	adiw	r24, 0x04	; 4
    111a:	4c 15       	cp	r20, r12
    111c:	5d 05       	cpc	r21, r13
    111e:	6e 05       	cpc	r22, r14
    1120:	7f 05       	cpc	r23, r15
    1122:	c8 f4       	brcc	.+50     	; 0x1156 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
    1124:	2a 85       	ldd	r18, Y+10	; 0x0a
    1126:	3b 85       	ldd	r19, Y+11	; 0x0b
    1128:	e2 0f       	add	r30, r18
    112a:	f3 1f       	adc	r31, r19
    112c:	34 97       	sbiw	r30, 0x04	; 4
    112e:	d0 80       	ld	r13, Z
    1130:	f1 80       	ldd	r15, Z+1	; 0x01
    1132:	32 81       	ldd	r19, Z+2	; 0x02
    1134:	23 81       	ldd	r18, Z+3	; 0x03
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
    1136:	dc 92       	st	X, r13
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	fc 92       	st	X, r15
    113c:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
    113e:	12 96       	adiw	r26, 0x02	; 2
    1140:	3c 93       	st	X, r19
    1142:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	2c 93       	st	X, r18
    1148:	13 97       	sbiw	r26, 0x03	; 3
    114a:	fc 01       	movw	r30, r24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
    114c:	4f 5f       	subi	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	6f 4f       	sbci	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	db cf       	rjmp	.-74     	; 0x110c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x3e>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
    1156:	5f 01       	movw	r10, r30
    1158:	a0 0e       	add	r10, r16
    115a:	b1 1e       	adc	r11, r17
    115c:	2c 85       	ldd	r18, Y+12	; 0x0c
    115e:	f5 01       	movw	r30, r10
    1160:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
    1162:	2d 85       	ldd	r18, Y+13	; 0x0d
    1164:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
    1166:	2e 85       	ldd	r18, Y+14	; 0x0e
    1168:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
    116a:	2f 85       	ldd	r18, Y+15	; 0x0f
    116c:	23 83       	std	Z+3, r18	; 0x03
    116e:	d5 01       	movw	r26, r10
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	ba 01       	movw	r22, r20
    1176:	cc 84       	ldd	r12, Y+12	; 0x0c
    1178:	dd 84       	ldd	r13, Y+13	; 0x0d
    117a:	ee 84       	ldd	r14, Y+14	; 0x0e
    117c:	ff 84       	ldd	r15, Y+15	; 0x0f
    117e:	9c 01       	movw	r18, r24
    1180:	2c 5f       	subi	r18, 0xFC	; 252
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4c 15       	cp	r20, r12
    1186:	5d 05       	cpc	r21, r13
    1188:	6e 05       	cpc	r22, r14
    118a:	7f 05       	cpc	r23, r15
    118c:	f8 f4       	brcc	.+62     	; 0x11cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xfe>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
    118e:	cd 01       	movw	r24, r26
    1190:	8a 19       	sub	r24, r10
    1192:	9b 09       	sbc	r25, r11
    1194:	ec 88       	ldd	r14, Y+20	; 0x14
    1196:	fd 88       	ldd	r15, Y+21	; 0x15
    1198:	8e 0d       	add	r24, r14
    119a:	9f 1d       	adc	r25, r15
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
    119c:	fc 01       	movw	r30, r24
    119e:	d0 80       	ld	r13, Z
    11a0:	e1 80       	ldd	r14, Z+1	; 0x01
    11a2:	f2 80       	ldd	r15, Z+2	; 0x02
    11a4:	83 81       	ldd	r24, Z+3	; 0x03
    11a6:	14 96       	adiw	r26, 0x04	; 4
    11a8:	dc 92       	st	X, r13
    11aa:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
    11ac:	15 96       	adiw	r26, 0x05	; 5
    11ae:	ec 92       	st	X, r14
    11b0:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
    11b2:	16 96       	adiw	r26, 0x06	; 6
    11b4:	fc 92       	st	X, r15
    11b6:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
    11b8:	17 96       	adiw	r26, 0x07	; 7
    11ba:	8c 93       	st	X, r24
    11bc:	17 97       	sbiw	r26, 0x07	; 7
    11be:	c9 01       	movw	r24, r18
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
    11c0:	4f 5f       	subi	r20, 0xFF	; 255
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	6f 4f       	sbci	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	14 96       	adiw	r26, 0x04	; 4
    11ca:	d5 cf       	rjmp	.-86     	; 0x1176 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
    11cc:	f8 01       	movw	r30, r16
    11ce:	e8 0f       	add	r30, r24
    11d0:	f9 1f       	adc	r31, r25
    11d2:	8e 89       	ldd	r24, Y+22	; 0x16
    11d4:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
    11d6:	8f 89       	ldd	r24, Y+23	; 0x17
    11d8:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
    11da:	88 8d       	ldd	r24, Y+24	; 0x18
    11dc:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
    11de:	89 8d       	ldd	r24, Y+25	; 0x19
    11e0:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->strings_length);
    11e2:	79 01       	movw	r14, r18
    11e4:	a1 2c       	mov	r10, r1
    11e6:	b1 2c       	mov	r11, r1
      for( uint32_t i = 0; i < strings_length; i++){
    11e8:	41 2c       	mov	r4, r1
    11ea:	51 2c       	mov	r5, r1
    11ec:	32 01       	movw	r6, r4
    11ee:	8e 89       	ldd	r24, Y+22	; 0x16
    11f0:	9f 89       	ldd	r25, Y+23	; 0x17
    11f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    11f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    11f6:	48 16       	cp	r4, r24
    11f8:	59 06       	cpc	r5, r25
    11fa:	6a 06       	cpc	r6, r26
    11fc:	7b 06       	cpc	r7, r27
    11fe:	78 f5       	brcc	.+94     	; 0x125e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x190>
      uint32_t length_stringsi = strlen(this->strings[i]);
    1200:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1202:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1204:	ea 0d       	add	r30, r10
    1206:	fb 1d       	adc	r31, r11
    1208:	a0 81       	ld	r26, Z
    120a:	b1 81       	ldd	r27, Z+1	; 0x01
    120c:	fd 01       	movw	r30, r26
    120e:	01 90       	ld	r0, Z+
    1210:	00 20       	and	r0, r0
    1212:	e9 f7       	brne	.-6      	; 0x120e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x140>
    1214:	31 97       	sbiw	r30, 0x01	; 1
    1216:	6f 01       	movw	r12, r30
    1218:	ca 1a       	sub	r12, r26
    121a:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_stringsi);
    121c:	a6 01       	movw	r20, r12
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	c8 01       	movw	r24, r16
    1224:	8e 0d       	add	r24, r14
    1226:	9f 1d       	adc	r25, r15
    1228:	35 df       	rcall	.-406    	; 0x1094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
    122a:	f4 e0       	ldi	r31, 0x04	; 4
    122c:	ef 0e       	add	r14, r31
    122e:	f1 1c       	adc	r15, r1
    1230:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1232:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1234:	ea 0d       	add	r30, r10
    1236:	fb 1d       	adc	r31, r11
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	a6 01       	movw	r20, r12
    123e:	c8 01       	movw	r24, r16
    1240:	8e 0d       	add	r24, r14
    1242:	9f 1d       	adc	r25, r15
    1244:	0e 94 29 23 	call	0x4652	; 0x4652 <memcpy>
      offset += length_stringsi;
    1248:	ec 0c       	add	r14, r12
    124a:	fd 1c       	adc	r15, r13
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->strings_length);
      for( uint32_t i = 0; i < strings_length; i++){
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	48 1a       	sub	r4, r24
    1250:	58 0a       	sbc	r5, r24
    1252:	68 0a       	sbc	r6, r24
    1254:	78 0a       	sbc	r7, r24
    1256:	e2 e0       	ldi	r30, 0x02	; 2
    1258:	ae 0e       	add	r10, r30
    125a:	b1 1c       	adc	r11, r1
    125c:	c8 cf       	rjmp	.-112    	; 0x11ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x120>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
    125e:	c7 01       	movw	r24, r14
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	08 95       	ret

0000127e <_ZNK14rosserial_msgs3Log9serializeEPh>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8c 01       	movw	r16, r24
    128c:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
    128e:	dc 01       	movw	r26, r24
    1290:	12 96       	adiw	r26, 0x02	; 2
    1292:	2c 91       	ld	r18, X
    1294:	12 97       	sbiw	r26, 0x02	; 2
    1296:	fb 01       	movw	r30, r22
    1298:	21 93       	st	Z+, r18
    129a:	cf 01       	movw	r24, r30
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
    129c:	13 96       	adiw	r26, 0x03	; 3
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	14 97       	sbiw	r26, 0x04	; 4
    12a4:	ef 01       	movw	r28, r30
    12a6:	09 90       	ld	r0, Y+
    12a8:	00 20       	and	r0, r0
    12aa:	e9 f7       	brne	.-6      	; 0x12a6 <_ZNK14rosserial_msgs3Log9serializeEPh+0x28>
    12ac:	21 97       	sbiw	r28, 0x01	; 1
    12ae:	ce 1b       	sub	r28, r30
    12b0:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_msg);
    12b2:	ae 01       	movw	r20, r28
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	ed de       	rcall	.-550    	; 0x1094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
    12ba:	d8 01       	movw	r26, r16
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	6d 91       	ld	r22, X+
    12c0:	7c 91       	ld	r23, X
    12c2:	14 97       	sbiw	r26, 0x04	; 4
    12c4:	ae 01       	movw	r20, r28
    12c6:	c7 01       	movw	r24, r14
    12c8:	05 96       	adiw	r24, 0x05	; 5
    12ca:	0e 94 29 23 	call	0x4652	; 0x4652 <memcpy>
      offset += length_msg;
      return offset;
    }
    12ce:	ce 01       	movw	r24, r28
    12d0:	05 96       	adiw	r24, 0x05	; 5
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	7c 01       	movw	r14, r24
    12f2:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
    12f4:	dc 01       	movw	r26, r24
    12f6:	12 96       	adiw	r26, 0x02	; 2
    12f8:	8c 91       	ld	r24, X
    12fa:	12 97       	sbiw	r26, 0x02	; 2
    12fc:	fb 01       	movw	r30, r22
    12fe:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
    1300:	13 96       	adiw	r26, 0x03	; 3
    1302:	8c 91       	ld	r24, X
    1304:	13 97       	sbiw	r26, 0x03	; 3
    1306:	81 83       	std	Z+1, r24	; 0x01
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
    1308:	14 96       	adiw	r26, 0x04	; 4
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	15 97       	sbiw	r26, 0x05	; 5
    1310:	ef 01       	movw	r28, r30
    1312:	09 90       	ld	r0, Y+
    1314:	00 20       	and	r0, r0
    1316:	e9 f7       	brne	.-6      	; 0x1312 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x32>
    1318:	21 97       	sbiw	r28, 0x01	; 1
    131a:	ce 1b       	sub	r28, r30
    131c:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_topic_name);
    131e:	ae 01       	movw	r20, r28
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	c8 01       	movw	r24, r16
    1326:	02 96       	adiw	r24, 0x02	; 2
    1328:	b5 de       	rcall	.-662    	; 0x1094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
    132a:	d7 01       	movw	r26, r14
    132c:	14 96       	adiw	r26, 0x04	; 4
    132e:	6d 91       	ld	r22, X+
    1330:	7c 91       	ld	r23, X
    1332:	15 97       	sbiw	r26, 0x05	; 5
    1334:	ae 01       	movw	r20, r28
    1336:	c8 01       	movw	r24, r16
    1338:	06 96       	adiw	r24, 0x06	; 6
    133a:	0e 94 29 23 	call	0x4652	; 0x4652 <memcpy>
      offset += length_topic_name;
    133e:	ce 01       	movw	r24, r28
    1340:	06 96       	adiw	r24, 0x06	; 6
      uint32_t length_message_type = strlen(this->message_type);
    1342:	f7 01       	movw	r30, r14
    1344:	a6 81       	ldd	r26, Z+6	; 0x06
    1346:	b7 81       	ldd	r27, Z+7	; 0x07
    1348:	fd 01       	movw	r30, r26
    134a:	01 90       	ld	r0, Z+
    134c:	00 20       	and	r0, r0
    134e:	e9 f7       	brne	.-6      	; 0x134a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6a>
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	6f 01       	movw	r12, r30
    1354:	ca 1a       	sub	r12, r26
    1356:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_message_type);
    1358:	a6 01       	movw	r20, r12
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 0f       	add	r24, r16
    1360:	91 1f       	adc	r25, r17
    1362:	98 de       	rcall	.-720    	; 0x1094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
    1364:	2a 96       	adiw	r28, 0x0a	; 10
    1366:	d7 01       	movw	r26, r14
    1368:	16 96       	adiw	r26, 0x06	; 6
    136a:	6d 91       	ld	r22, X+
    136c:	7c 91       	ld	r23, X
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	a6 01       	movw	r20, r12
    1372:	c8 01       	movw	r24, r16
    1374:	8c 0f       	add	r24, r28
    1376:	9d 1f       	adc	r25, r29
    1378:	0e 94 29 23 	call	0x4652	; 0x4652 <memcpy>
      offset += length_message_type;
    137c:	cc 0d       	add	r28, r12
    137e:	dd 1d       	adc	r29, r13
      uint32_t length_md5sum = strlen(this->md5sum);
    1380:	d7 01       	movw	r26, r14
    1382:	18 96       	adiw	r26, 0x08	; 8
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	19 97       	sbiw	r26, 0x09	; 9
    138a:	df 01       	movw	r26, r30
    138c:	0d 90       	ld	r0, X+
    138e:	00 20       	and	r0, r0
    1390:	e9 f7       	brne	.-6      	; 0x138c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xac>
    1392:	11 97       	sbiw	r26, 0x01	; 1
    1394:	6d 01       	movw	r12, r26
    1396:	ce 1a       	sub	r12, r30
    1398:	df 0a       	sbc	r13, r31
      varToArr(outbuffer + offset, length_md5sum);
    139a:	a6 01       	movw	r20, r12
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	c8 01       	movw	r24, r16
    13a2:	8c 0f       	add	r24, r28
    13a4:	9d 1f       	adc	r25, r29
    13a6:	76 de       	rcall	.-788    	; 0x1094 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
    13a8:	24 96       	adiw	r28, 0x04	; 4
    13aa:	f7 01       	movw	r30, r14
    13ac:	60 85       	ldd	r22, Z+8	; 0x08
    13ae:	71 85       	ldd	r23, Z+9	; 0x09
    13b0:	a6 01       	movw	r20, r12
    13b2:	c8 01       	movw	r24, r16
    13b4:	8c 0f       	add	r24, r28
    13b6:	9d 1f       	adc	r25, r29
    13b8:	0e 94 29 23 	call	0x4652	; 0x4652 <memcpy>
      offset += length_md5sum;
    13bc:	c6 01       	movw	r24, r12
    13be:	8c 0f       	add	r24, r28
    13c0:	9d 1f       	adc	r25, r29
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
    13c2:	d7 01       	movw	r26, r14
    13c4:	1a 96       	adiw	r26, 0x0a	; 10
    13c6:	6c 91       	ld	r22, X
    13c8:	1a 97       	sbiw	r26, 0x0a	; 10
    13ca:	1b 96       	adiw	r26, 0x0b	; 11
    13cc:	4c 91       	ld	r20, X
    13ce:	1b 97       	sbiw	r26, 0x0b	; 11
    13d0:	1c 96       	adiw	r26, 0x0c	; 12
    13d2:	3c 91       	ld	r19, X
    13d4:	1c 97       	sbiw	r26, 0x0c	; 12
    13d6:	1d 96       	adiw	r26, 0x0d	; 13
    13d8:	2c 91       	ld	r18, X
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
    13da:	f8 01       	movw	r30, r16
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	60 83       	st	Z, r22
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
    13e2:	41 83       	std	Z+1, r20	; 0x01
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
    13e4:	32 83       	std	Z+2, r19	; 0x02
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
    13e6:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->buffer_size);
      return offset;
    }
    13e8:	04 96       	adiw	r24, 0x04	; 4
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	08 95       	ret

000013fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	fc 01       	movw	r30, r24
  {
    var = 0;
    1406:	10 82       	st	Z, r1
    1408:	11 82       	std	Z+1, r1	; 0x01
    140a:	12 82       	std	Z+2, r1	; 0x02
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	db 01       	movw	r26, r22
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    for(size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
    1414:	4d 91       	ld	r20, X+
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x24>
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x20>
    1424:	05 2e       	mov	r0, r21
    1426:	00 0c       	add	r0, r0
    1428:	66 0b       	sbc	r22, r22
    142a:	77 0b       	sbc	r23, r23
    142c:	c0 80       	ld	r12, Z
    142e:	d1 80       	ldd	r13, Z+1	; 0x01
    1430:	e2 80       	ldd	r14, Z+2	; 0x02
    1432:	f3 80       	ldd	r15, Z+3	; 0x03
    1434:	4c 29       	or	r20, r12
    1436:	5d 29       	or	r21, r13
    1438:	6e 29       	or	r22, r14
    143a:	7f 29       	or	r23, r15
    143c:	40 83       	st	Z, r20
    143e:	51 83       	std	Z+1, r21	; 0x01
    1440:	62 83       	std	Z+2, r22	; 0x02
    1442:	73 83       	std	Z+3, r23	; 0x03
    1444:	28 5f       	subi	r18, 0xF8	; 248
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for(size_t i = 0; i < sizeof(V); i++)
    1448:	20 32       	cpi	r18, 0x20	; 32
    144a:	31 05       	cpc	r19, r1
    144c:	19 f7       	brne	.-58     	; 0x1414 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x18>
      var |= (arr[i] << (8 * i));
  }
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	08 95       	ret

00001458 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	00 d0       	rcall	.+0      	; 0x1476 <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
    1476:	1f 92       	push	r1
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	7c 01       	movw	r14, r24
    147e:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
    1480:	fb 01       	movw	r30, r22
    1482:	81 91       	ld	r24, Z+
    1484:	bf 01       	movw	r22, r30
    1486:	f7 01       	movw	r30, r14
    1488:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	b6 df       	rcall	.-148    	; 0x13fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	ab 81       	ldd	r26, Y+3	; 0x03
    1496:	bc 81       	ldd	r27, Y+4	; 0x04
    1498:	4c 01       	movw	r8, r24
    149a:	5d 01       	movw	r10, r26
    149c:	f5 e0       	ldi	r31, 0x05	; 5
    149e:	8f 0e       	add	r8, r31
    14a0:	91 1c       	adc	r9, r1
    14a2:	a1 1c       	adc	r10, r1
    14a4:	b1 1c       	adc	r11, r1
    14a6:	a8 01       	movw	r20, r16
    14a8:	4c 5f       	subi	r20, 0xFC	; 252
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	fa 01       	movw	r30, r20
    14ae:	25 e0       	ldi	r18, 0x05	; 5
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	29 01       	movw	r4, r18
    14b4:	61 2c       	mov	r6, r1
    14b6:	71 2c       	mov	r7, r1
    14b8:	48 14       	cp	r4, r8
    14ba:	59 04       	cpc	r5, r9
    14bc:	6a 04       	cpc	r6, r10
    14be:	7b 04       	cpc	r7, r11
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <_ZN14rosserial_msgs3Log11deserializeEPh+0x74>
          inbuffer[k-1]=inbuffer[k];
    14c2:	61 81       	ldd	r22, Z+1	; 0x01
    14c4:	61 93       	st	Z+, r22
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	f3 cf       	rjmp	.-26     	; 0x14b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x5a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
    14cc:	f8 01       	movw	r30, r16
    14ce:	e8 0f       	add	r30, r24
    14d0:	f9 1f       	adc	r31, r25
    14d2:	14 82       	std	Z+4, r1	; 0x04
      this->msg = (char *)(inbuffer + offset-1);
    14d4:	f7 01       	movw	r30, r14
    14d6:	54 83       	std	Z+4, r21	; 0x04
    14d8:	43 83       	std	Z+3, r20	; 0x03
      offset += length_msg;
     return offset;
    }
    14da:	05 96       	adiw	r24, 0x05	; 5
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	bf 90       	pop	r11
    14f2:	af 90       	pop	r10
    14f4:	9f 90       	pop	r9
    14f6:	8f 90       	pop	r8
    14f8:	7f 90       	pop	r7
    14fa:	6f 90       	pop	r6
    14fc:	5f 90       	pop	r5
    14fe:	4f 90       	pop	r4
    1500:	08 95       	ret

00001502 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    1502:	2f 92       	push	r2
    1504:	3f 92       	push	r3
    1506:	4f 92       	push	r4
    1508:	5f 92       	push	r5
    150a:	6f 92       	push	r6
    150c:	7f 92       	push	r7
    150e:	8f 92       	push	r8
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	60 97       	sbiw	r28, 0x10	; 16
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	8c 01       	movw	r16, r24
    1538:	6b 01       	movw	r12, r22
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    153a:	db 01       	movw	r26, r22
    153c:	8d 90       	ld	r8, X+
    153e:	9d 90       	ld	r9, X+
    1540:	ad 90       	ld	r10, X+
    1542:	bc 90       	ld	r11, X
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
    1544:	fc 01       	movw	r30, r24
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	a4 81       	ldd	r26, Z+4	; 0x04
    154c:	b5 81       	ldd	r27, Z+5	; 0x05
    154e:	88 15       	cp	r24, r8
    1550:	99 05       	cpc	r25, r9
    1552:	aa 05       	cpc	r26, r10
    1554:	bb 05       	cpc	r27, r11
    1556:	70 f4       	brcc	.+28     	; 0x1574 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
    1558:	b4 01       	movw	r22, r8
    155a:	66 0f       	add	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	82 85       	ldd	r24, Z+10	; 0x0a
    1564:	93 85       	ldd	r25, Z+11	; 0x0b
    1566:	0e 94 49 22 	call	0x4492	; 0x4492 <realloc>
    156a:	d8 01       	movw	r26, r16
    156c:	1b 96       	adiw	r26, 0x0b	; 11
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24
    1572:	1a 97       	sbiw	r26, 0x0a	; 10
      ints_length = ints_lengthT;
    1574:	f8 01       	movw	r30, r16
    1576:	82 82       	std	Z+2, r8	; 0x02
    1578:	93 82       	std	Z+3, r9	; 0x03
    157a:	a4 82       	std	Z+4, r10	; 0x04
    157c:	b5 82       	std	Z+5, r11	; 0x05
    157e:	96 01       	movw	r18, r12
      for( uint32_t i = 0; i < ints_length; i++){
    1580:	81 2c       	mov	r8, r1
    1582:	91 2c       	mov	r9, r1
    1584:	54 01       	movw	r10, r8
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
    1586:	44 e0       	ldi	r20, 0x04	; 4
    1588:	50 e0       	ldi	r21, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    158a:	b8 01       	movw	r22, r16
    158c:	6a 5f       	subi	r22, 0xFA	; 250
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	2c 5f       	subi	r18, 0xFC	; 252
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    1594:	f8 01       	movw	r30, r16
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	a4 81       	ldd	r26, Z+4	; 0x04
    159c:	b5 81       	ldd	r27, Z+5	; 0x05
    159e:	fa 01       	movw	r30, r20
    15a0:	34 96       	adiw	r30, 0x04	; 4
    15a2:	1f 01       	movw	r2, r30
    15a4:	88 16       	cp	r8, r24
    15a6:	99 06       	cpc	r9, r25
    15a8:	aa 06       	cpc	r10, r26
    15aa:	bb 06       	cpc	r11, r27
    15ac:	50 f5       	brcc	.+84     	; 0x1602 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
    15ae:	d9 01       	movw	r26, r18
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	fc 90       	ld	r15, X
    15b4:	11 97       	sbiw	r26, 0x01	; 1
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	8c 91       	ld	r24, X
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	dc 01       	movw	r26, r24
    15c2:	99 27       	eor	r25, r25
    15c4:	88 27       	eor	r24, r24
    15c6:	9f 29       	or	r25, r15
    15c8:	f9 01       	movw	r30, r18
    15ca:	f0 80       	ld	r15, Z
    15cc:	8f 29       	or	r24, r15
    15ce:	f3 80       	ldd	r15, Z+3	; 0x03
    15d0:	bf 29       	or	r27, r15
    15d2:	f8 01       	movw	r30, r16
    15d4:	86 83       	std	Z+6, r24	; 0x06
    15d6:	97 83       	std	Z+7, r25	; 0x07
    15d8:	a0 87       	std	Z+8, r26	; 0x08
    15da:	b1 87       	std	Z+9, r27	; 0x09
    15dc:	da 01       	movw	r26, r20
    15de:	a1 01       	movw	r20, r2
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    15e0:	14 97       	sbiw	r26, 0x04	; 4
    15e2:	82 85       	ldd	r24, Z+10	; 0x0a
    15e4:	93 85       	ldd	r25, Z+11	; 0x0b
    15e6:	a8 0f       	add	r26, r24
    15e8:	b9 1f       	adc	r27, r25
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	fb 01       	movw	r30, r22
    15ee:	01 90       	ld	r0, Z+
    15f0:	0d 92       	st	X+, r0
    15f2:	8a 95       	dec	r24
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    15f6:	ff ef       	ldi	r31, 0xFF	; 255
    15f8:	8f 1a       	sub	r8, r31
    15fa:	9f 0a       	sbc	r9, r31
    15fc:	af 0a       	sbc	r10, r31
    15fe:	bf 0a       	sbc	r11, r31
    1600:	c7 cf       	rjmp	.-114    	; 0x1590 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    1602:	46 01       	movw	r8, r12
    1604:	84 0e       	add	r8, r20
    1606:	95 1e       	adc	r9, r21
    1608:	d4 01       	movw	r26, r8
    160a:	8c 91       	ld	r24, X
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    160c:	11 96       	adiw	r26, 0x01	; 1
    160e:	9c 91       	ld	r25, X
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	12 96       	adiw	r26, 0x02	; 2
    1614:	4c 90       	ld	r4, X
    1616:	12 97       	sbiw	r26, 0x02	; 2
    1618:	51 2c       	mov	r5, r1
    161a:	61 2c       	mov	r6, r1
    161c:	71 2c       	mov	r7, r1
    161e:	32 01       	movw	r6, r4
    1620:	55 24       	eor	r5, r5
    1622:	44 24       	eor	r4, r4
    1624:	59 2a       	or	r5, r25
    1626:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1628:	13 96       	adiw	r26, 0x03	; 3
    162a:	8c 91       	ld	r24, X
    162c:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    162e:	5f 01       	movw	r10, r30
      if(floats_lengthT > floats_length)
    1630:	f8 01       	movw	r30, r16
    1632:	84 85       	ldd	r24, Z+12	; 0x0c
    1634:	95 85       	ldd	r25, Z+13	; 0x0d
    1636:	a6 85       	ldd	r26, Z+14	; 0x0e
    1638:	b7 85       	ldd	r27, Z+15	; 0x0f
    163a:	84 15       	cp	r24, r4
    163c:	95 05       	cpc	r25, r5
    163e:	a6 05       	cpc	r26, r6
    1640:	b7 05       	cpc	r27, r7
    1642:	70 f4       	brcc	.+28     	; 0x1660 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    1644:	b2 01       	movw	r22, r4
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	84 89       	ldd	r24, Z+20	; 0x14
    1650:	95 89       	ldd	r25, Z+21	; 0x15
    1652:	0e 94 49 22 	call	0x4492	; 0x4492 <realloc>
    1656:	d8 01       	movw	r26, r16
    1658:	55 96       	adiw	r26, 0x15	; 21
    165a:	9c 93       	st	X, r25
    165c:	8e 93       	st	-X, r24
    165e:	54 97       	sbiw	r26, 0x14	; 20
      floats_length = floats_lengthT;
    1660:	f8 01       	movw	r30, r16
    1662:	44 86       	std	Z+12, r4	; 0x0c
    1664:	55 86       	std	Z+13, r5	; 0x0d
    1666:	66 86       	std	Z+14, r6	; 0x0e
    1668:	77 86       	std	Z+15, r7	; 0x0f
    166a:	c4 01       	movw	r24, r8
      for( uint32_t i = 0; i < floats_length; i++){
    166c:	41 2c       	mov	r4, r1
    166e:	51 2c       	mov	r5, r1
    1670:	32 01       	movw	r6, r4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    1672:	98 01       	movw	r18, r16
    1674:	20 5f       	subi	r18, 0xF0	; 240
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1678:	d8 01       	movw	r26, r16
    167a:	1c 96       	adiw	r26, 0x0c	; 12
    167c:	4d 91       	ld	r20, X+
    167e:	5d 91       	ld	r21, X+
    1680:	6d 91       	ld	r22, X+
    1682:	7c 91       	ld	r23, X
    1684:	1f 97       	sbiw	r26, 0x0f	; 15
    1686:	f5 01       	movw	r30, r10
    1688:	34 96       	adiw	r30, 0x04	; 4
    168a:	44 16       	cp	r4, r20
    168c:	55 06       	cpc	r5, r21
    168e:	66 06       	cpc	r6, r22
    1690:	77 06       	cpc	r7, r23
    1692:	98 f5       	brcc	.+102    	; 0x16fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1f8>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    1694:	dc 01       	movw	r26, r24
    1696:	15 96       	adiw	r26, 0x05	; 5
    1698:	fc 90       	ld	r15, X
    169a:	15 97       	sbiw	r26, 0x05	; 5
    169c:	16 96       	adiw	r26, 0x06	; 6
    169e:	4c 91       	ld	r20, X
    16a0:	16 97       	sbiw	r26, 0x06	; 6
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	ba 01       	movw	r22, r20
    16aa:	55 27       	eor	r21, r21
    16ac:	44 27       	eor	r20, r20
    16ae:	5f 29       	or	r21, r15
    16b0:	14 96       	adiw	r26, 0x04	; 4
    16b2:	fc 90       	ld	r15, X
    16b4:	14 97       	sbiw	r26, 0x04	; 4
    16b6:	4f 29       	or	r20, r15
    16b8:	17 96       	adiw	r26, 0x07	; 7
    16ba:	fc 90       	ld	r15, X
    16bc:	7f 29       	or	r23, r15
      this->st_floats = u_st_floats.real;
    16be:	d8 01       	movw	r26, r16
    16c0:	50 96       	adiw	r26, 0x10	; 16
    16c2:	4d 93       	st	X+, r20
    16c4:	5d 93       	st	X+, r21
    16c6:	6d 93       	st	X+, r22
    16c8:	7c 93       	st	X, r23
    16ca:	53 97       	sbiw	r26, 0x13	; 19
    16cc:	5f 01       	movw	r10, r30
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    16ce:	ac 01       	movw	r20, r24
    16d0:	48 19       	sub	r20, r8
    16d2:	59 09       	sbc	r21, r9
    16d4:	54 96       	adiw	r26, 0x14	; 20
    16d6:	0d 90       	ld	r0, X+
    16d8:	bc 91       	ld	r27, X
    16da:	a0 2d       	mov	r26, r0
    16dc:	a4 0f       	add	r26, r20
    16de:	b5 1f       	adc	r27, r21
    16e0:	44 e0       	ldi	r20, 0x04	; 4
    16e2:	f9 01       	movw	r30, r18
    16e4:	01 90       	ld	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	4a 95       	dec	r20
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e2>
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    16ec:	bf ef       	ldi	r27, 0xFF	; 255
    16ee:	4b 1a       	sub	r4, r27
    16f0:	5b 0a       	sbc	r5, r27
    16f2:	6b 0a       	sbc	r6, r27
    16f4:	7b 0a       	sbc	r7, r27
    16f6:	04 96       	adiw	r24, 0x04	; 4
    16f8:	bf cf       	rjmp	.-130    	; 0x1678 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x176>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    16fa:	d6 01       	movw	r26, r12
    16fc:	aa 0d       	add	r26, r10
    16fe:	bb 1d       	adc	r27, r11
    1700:	8c 91       	ld	r24, X
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	9c 91       	ld	r25, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	12 96       	adiw	r26, 0x02	; 2
    170a:	8c 90       	ld	r8, X
    170c:	12 97       	sbiw	r26, 0x02	; 2
    170e:	91 2c       	mov	r9, r1
    1710:	a1 2c       	mov	r10, r1
    1712:	b1 2c       	mov	r11, r1
    1714:	54 01       	movw	r10, r8
    1716:	99 24       	eor	r9, r9
    1718:	88 24       	eor	r8, r8
    171a:	99 2a       	or	r9, r25
    171c:	88 2a       	or	r8, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    171e:	13 96       	adiw	r26, 0x03	; 3
    1720:	8c 91       	ld	r24, X
    1722:	b8 2a       	or	r11, r24
      offset += sizeof(this->strings_length);
    1724:	7f 01       	movw	r14, r30
      if(strings_lengthT > strings_length)
    1726:	f8 01       	movw	r30, r16
    1728:	86 89       	ldd	r24, Z+22	; 0x16
    172a:	97 89       	ldd	r25, Z+23	; 0x17
    172c:	a0 8d       	ldd	r26, Z+24	; 0x18
    172e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1730:	88 15       	cp	r24, r8
    1732:	99 05       	cpc	r25, r9
    1734:	aa 05       	cpc	r26, r10
    1736:	bb 05       	cpc	r27, r11
    1738:	60 f4       	brcc	.+24     	; 0x1752 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    173a:	b4 01       	movw	r22, r8
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	84 8d       	ldd	r24, Z+28	; 0x1c
    1742:	95 8d       	ldd	r25, Z+29	; 0x1d
    1744:	0e 94 49 22 	call	0x4492	; 0x4492 <realloc>
    1748:	d8 01       	movw	r26, r16
    174a:	5d 96       	adiw	r26, 0x1d	; 29
    174c:	9c 93       	st	X, r25
    174e:	8e 93       	st	-X, r24
    1750:	5c 97       	sbiw	r26, 0x1c	; 28
      strings_length = strings_lengthT;
    1752:	f8 01       	movw	r30, r16
    1754:	86 8a       	std	Z+22, r8	; 0x16
    1756:	97 8a       	std	Z+23, r9	; 0x17
    1758:	a0 8e       	std	Z+24, r10	; 0x18
    175a:	b1 8e       	std	Z+25, r11	; 0x19
    175c:	21 2c       	mov	r2, r1
    175e:	31 2c       	mov	r3, r1
      for( uint32_t i = 0; i < strings_length; i++){
    1760:	81 2c       	mov	r8, r1
    1762:	91 2c       	mov	r9, r1
    1764:	54 01       	movw	r10, r8
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    1766:	98 01       	movw	r18, r16
    1768:	26 5e       	subi	r18, 0xE6	; 230
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	3a 87       	std	Y+10, r19	; 0x0a
    176e:	29 87       	std	Y+9, r18	; 0x09
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1770:	f8 01       	movw	r30, r16
    1772:	86 89       	ldd	r24, Z+22	; 0x16
    1774:	97 89       	ldd	r25, Z+23	; 0x17
    1776:	a0 8d       	ldd	r26, Z+24	; 0x18
    1778:	b1 8d       	ldd	r27, Z+25	; 0x19
    177a:	88 16       	cp	r8, r24
    177c:	99 06       	cpc	r9, r25
    177e:	aa 06       	cpc	r10, r26
    1780:	bb 06       	cpc	r11, r27
    1782:	08 f0       	brcs	.+2      	; 0x1786 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x284>
    1784:	5e c0       	rjmp	.+188    	; 0x1842 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x340>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    1786:	b6 01       	movw	r22, r12
    1788:	6e 0d       	add	r22, r14
    178a:	7f 1d       	adc	r23, r15
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	35 de       	rcall	.-918    	; 0x13fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    1792:	97 01       	movw	r18, r14
    1794:	2c 5f       	subi	r18, 0xFC	; 252
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	38 8b       	std	Y+16, r19	; 0x10
    179a:	2f 87       	std	Y+15, r18	; 0x0f
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    179c:	49 81       	ldd	r20, Y+1	; 0x01
    179e:	5a 81       	ldd	r21, Y+2	; 0x02
    17a0:	6b 81       	ldd	r22, Y+3	; 0x03
    17a2:	7c 81       	ldd	r23, Y+4	; 0x04
    17a4:	c9 01       	movw	r24, r18
    17a6:	33 0f       	add	r19, r19
    17a8:	aa 0b       	sbc	r26, r26
    17aa:	bb 0b       	sbc	r27, r27
    17ac:	2c 01       	movw	r4, r24
    17ae:	3d 01       	movw	r6, r26
    17b0:	44 0e       	add	r4, r20
    17b2:	55 1e       	adc	r5, r21
    17b4:	66 1e       	adc	r6, r22
    17b6:	77 1e       	adc	r7, r23
    17b8:	4b 86       	std	Y+11, r4	; 0x0b
    17ba:	5c 86       	std	Y+12, r5	; 0x0c
    17bc:	6d 86       	std	Y+13, r6	; 0x0d
    17be:	7e 86       	std	Y+14, r7	; 0x0e
    17c0:	23 e0       	ldi	r18, 0x03	; 3
    17c2:	e2 0e       	add	r14, r18
    17c4:	f1 1c       	adc	r15, r1
    17c6:	f6 01       	movw	r30, r12
    17c8:	ee 0d       	add	r30, r14
    17ca:	ff 1d       	adc	r31, r15
    17cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    17ce:	38 89       	ldd	r19, Y+16	; 0x10
    17d0:	c9 01       	movw	r24, r18
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	4b 84       	ldd	r4, Y+11	; 0x0b
    17d8:	5c 84       	ldd	r5, Y+12	; 0x0c
    17da:	6d 84       	ldd	r6, Y+13	; 0x0d
    17dc:	7e 84       	ldd	r7, Y+14	; 0x0e
    17de:	84 15       	cp	r24, r4
    17e0:	95 05       	cpc	r25, r5
    17e2:	a6 05       	cpc	r26, r6
    17e4:	b7 05       	cpc	r27, r7
    17e6:	28 f4       	brcc	.+10     	; 0x17f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2f0>
          inbuffer[k-1]=inbuffer[k];
    17e8:	a1 81       	ldd	r26, Z+1	; 0x01
    17ea:	a1 93       	st	Z+, r26
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	ef cf       	rjmp	.-34     	; 0x17d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    17f2:	6f 84       	ldd	r6, Y+15	; 0x0f
    17f4:	78 88       	ldd	r7, Y+16	; 0x10
    17f6:	46 0d       	add	r20, r6
    17f8:	57 1d       	adc	r21, r7
    17fa:	f6 01       	movw	r30, r12
    17fc:	e4 0f       	add	r30, r20
    17fe:	f5 1f       	adc	r31, r21
    1800:	31 97       	sbiw	r30, 0x01	; 1
    1802:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    1804:	c3 01       	movw	r24, r6
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	8c 0d       	add	r24, r12
    180a:	9d 1d       	adc	r25, r13
    180c:	d8 01       	movw	r26, r16
    180e:	5b 96       	adiw	r26, 0x1b	; 27
    1810:	9c 93       	st	X, r25
    1812:	8e 93       	st	-X, r24
    1814:	5a 97       	sbiw	r26, 0x1a	; 26
      offset += length_st_strings;
    1816:	7a 01       	movw	r14, r20
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    1818:	5c 96       	adiw	r26, 0x1c	; 28
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	5d 97       	sbiw	r26, 0x1d	; 29
    1820:	e2 0d       	add	r30, r2
    1822:	f3 1d       	adc	r31, r3
    1824:	a9 85       	ldd	r26, Y+9	; 0x09
    1826:	ba 85       	ldd	r27, Y+10	; 0x0a
    1828:	8d 91       	ld	r24, X+
    182a:	9c 91       	ld	r25, X
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1830:	bf ef       	ldi	r27, 0xFF	; 255
    1832:	8b 1a       	sub	r8, r27
    1834:	9b 0a       	sbc	r9, r27
    1836:	ab 0a       	sbc	r10, r27
    1838:	bb 0a       	sbc	r11, r27
    183a:	e2 e0       	ldi	r30, 0x02	; 2
    183c:	2e 0e       	add	r2, r30
    183e:	31 1c       	adc	r3, r1
    1840:	97 cf       	rjmp	.-210    	; 0x1770 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
    1842:	c7 01       	movw	r24, r14
    1844:	60 96       	adiw	r28, 0x10	; 16
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	7f 90       	pop	r7
    186a:	6f 90       	pop	r6
    186c:	5f 90       	pop	r5
    186e:	4f 90       	pop	r4
    1870:	3f 90       	pop	r3
    1872:	2f 90       	pop	r2
    1874:	08 95       	ret

00001876 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    1876:	4f 92       	push	r4
    1878:	5f 92       	push	r5
    187a:	6f 92       	push	r6
    187c:	7f 92       	push	r7
    187e:	8f 92       	push	r8
    1880:	9f 92       	push	r9
    1882:	af 92       	push	r10
    1884:	bf 92       	push	r11
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	2c 97       	sbiw	r28, 0x0c	; 12
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	7c 01       	movw	r14, r24
    18a8:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
    18aa:	db 01       	movw	r26, r22
    18ac:	8c 91       	ld	r24, X
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	f7 01       	movw	r30, r14
    18b2:	93 83       	std	Z+3, r25	; 0x03
    18b4:	82 83       	std	Z+2, r24	; 0x02
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
    18b6:	11 96       	adiw	r26, 0x01	; 1
    18b8:	2c 91       	ld	r18, X
    18ba:	92 2b       	or	r25, r18
    18bc:	93 83       	std	Z+3, r25	; 0x03
    18be:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
    18c0:	6e 5f       	subi	r22, 0xFE	; 254
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	ce 01       	movw	r24, r28
    18c6:	09 96       	adiw	r24, 0x09	; 9
    18c8:	99 dd       	rcall	.-1230   	; 0x13fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    18ca:	89 84       	ldd	r8, Y+9	; 0x09
    18cc:	9a 84       	ldd	r9, Y+10	; 0x0a
    18ce:	ab 84       	ldd	r10, Y+11	; 0x0b
    18d0:	bc 84       	ldd	r11, Y+12	; 0x0c
    18d2:	24 01       	movw	r4, r8
    18d4:	35 01       	movw	r6, r10
    18d6:	f6 e0       	ldi	r31, 0x06	; 6
    18d8:	4f 0e       	add	r4, r31
    18da:	51 1c       	adc	r5, r1
    18dc:	61 1c       	adc	r6, r1
    18de:	71 1c       	adc	r7, r1
    18e0:	98 01       	movw	r18, r16
    18e2:	2b 5f       	subi	r18, 0xFB	; 251
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	f9 01       	movw	r30, r18
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	ac 01       	movw	r20, r24
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	44 15       	cp	r20, r4
    18f4:	55 05       	cpc	r21, r5
    18f6:	66 05       	cpc	r22, r6
    18f8:	77 05       	cpc	r23, r7
    18fa:	20 f4       	brcc	.+8      	; 0x1904 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8e>
          inbuffer[k-1]=inbuffer[k];
    18fc:	41 81       	ldd	r20, Z+1	; 0x01
    18fe:	41 93       	st	Z+, r20
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	f4 cf       	rjmp	.-24     	; 0x18ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
    1904:	f8 01       	movw	r30, r16
    1906:	e8 0d       	add	r30, r8
    1908:	f9 1d       	adc	r31, r9
    190a:	15 82       	std	Z+5, r1	; 0x05
      this->topic_name = (char *)(inbuffer + offset-1);
    190c:	d7 01       	movw	r26, r14
    190e:	15 96       	adiw	r26, 0x05	; 5
    1910:	3c 93       	st	X, r19
    1912:	2e 93       	st	-X, r18
    1914:	14 97       	sbiw	r26, 0x04	; 4
      offset += length_topic_name;
    1916:	b4 01       	movw	r22, r8
    1918:	6a 5f       	subi	r22, 0xFA	; 250
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
    191c:	60 0f       	add	r22, r16
    191e:	71 1f       	adc	r23, r17
    1920:	ce 01       	movw	r24, r28
    1922:	05 96       	adiw	r24, 0x05	; 5
    1924:	6b dd       	rcall	.-1322   	; 0x13fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    1926:	ba e0       	ldi	r27, 0x0A	; 10
    1928:	8b 0e       	add	r8, r27
    192a:	91 1c       	adc	r9, r1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    192c:	4d 80       	ldd	r4, Y+5	; 0x05
    192e:	5e 80       	ldd	r5, Y+6	; 0x06
    1930:	6f 80       	ldd	r6, Y+7	; 0x07
    1932:	78 84       	ldd	r7, Y+8	; 0x08
    1934:	a4 01       	movw	r20, r8
    1936:	09 2c       	mov	r0, r9
    1938:	00 0c       	add	r0, r0
    193a:	66 0b       	sbc	r22, r22
    193c:	77 0b       	sbc	r23, r23
    193e:	44 0d       	add	r20, r4
    1940:	55 1d       	adc	r21, r5
    1942:	66 1d       	adc	r22, r6
    1944:	77 1d       	adc	r23, r7
    1946:	d8 01       	movw	r26, r16
    1948:	a8 0d       	add	r26, r8
    194a:	b9 1d       	adc	r27, r9
    194c:	cd 01       	movw	r24, r26
    194e:	80 1b       	sub	r24, r16
    1950:	91 0b       	sbc	r25, r17
    1952:	5c 01       	movw	r10, r24
    1954:	c1 2c       	mov	r12, r1
    1956:	d1 2c       	mov	r13, r1
    1958:	a4 16       	cp	r10, r20
    195a:	b5 06       	cpc	r11, r21
    195c:	c6 06       	cpc	r12, r22
    195e:	d7 06       	cpc	r13, r23
    1960:	28 f4       	brcc	.+10     	; 0x196c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xf6>
          inbuffer[k-1]=inbuffer[k];
    1962:	8d 91       	ld	r24, X+
    1964:	fd 01       	movw	r30, r26
    1966:	32 97       	sbiw	r30, 0x02	; 2
    1968:	80 83       	st	Z, r24
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    196a:	f0 cf       	rjmp	.-32     	; 0x194c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd6>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
    196c:	54 01       	movw	r10, r8
    196e:	a4 0c       	add	r10, r4
    1970:	b5 1c       	adc	r11, r5
    1972:	b8 01       	movw	r22, r16
    1974:	6a 0d       	add	r22, r10
    1976:	7b 1d       	adc	r23, r11
    1978:	fb 01       	movw	r30, r22
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	10 82       	st	Z, r1
      this->message_type = (char *)(inbuffer + offset-1);
    197e:	c4 01       	movw	r24, r8
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	80 0f       	add	r24, r16
    1984:	91 1f       	adc	r25, r17
    1986:	f7 01       	movw	r30, r14
    1988:	97 83       	std	Z+7, r25	; 0x07
    198a:	86 83       	std	Z+6, r24	; 0x06
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	35 dd       	rcall	.-1430   	; 0x13fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    1992:	95 01       	movw	r18, r10
    1994:	2c 5f       	subi	r18, 0xFC	; 252
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	ab 81       	ldd	r26, Y+3	; 0x03
    199e:	bc 81       	ldd	r27, Y+4	; 0x04
    19a0:	29 01       	movw	r4, r18
    19a2:	03 2e       	mov	r0, r19
    19a4:	00 0c       	add	r0, r0
    19a6:	66 08       	sbc	r6, r6
    19a8:	77 08       	sbc	r7, r7
    19aa:	48 0e       	add	r4, r24
    19ac:	59 1e       	adc	r5, r25
    19ae:	6a 1e       	adc	r6, r26
    19b0:	7b 1e       	adc	r7, r27
    19b2:	f5 01       	movw	r30, r10
    19b4:	33 96       	adiw	r30, 0x03	; 3
    19b6:	e0 0f       	add	r30, r16
    19b8:	f1 1f       	adc	r31, r17
    19ba:	a9 01       	movw	r20, r18
    19bc:	4a 01       	movw	r8, r20
    19be:	a1 2c       	mov	r10, r1
    19c0:	b1 2c       	mov	r11, r1
    19c2:	84 14       	cp	r8, r4
    19c4:	95 04       	cpc	r9, r5
    19c6:	a6 04       	cpc	r10, r6
    19c8:	b7 04       	cpc	r11, r7
    19ca:	28 f4       	brcc	.+10     	; 0x19d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x160>
          inbuffer[k-1]=inbuffer[k];
    19cc:	61 81       	ldd	r22, Z+1	; 0x01
    19ce:	61 93       	st	Z+, r22
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    19d0:	4f 5f       	subi	r20, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	f3 cf       	rjmp	.-26     	; 0x19bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	f8 01       	movw	r30, r16
    19dc:	e8 0f       	add	r30, r24
    19de:	f9 1f       	adc	r31, r25
    19e0:	df 01       	movw	r26, r30
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	1c 92       	st	X, r1
      this->md5sum = (char *)(inbuffer + offset-1);
    19e6:	21 50       	subi	r18, 0x01	; 1
    19e8:	31 09       	sbc	r19, r1
    19ea:	02 0f       	add	r16, r18
    19ec:	13 1f       	adc	r17, r19
    19ee:	d7 01       	movw	r26, r14
    19f0:	19 96       	adiw	r26, 0x09	; 9
    19f2:	1c 93       	st	X, r17
    19f4:	0e 93       	st	-X, r16
    19f6:	18 97       	sbiw	r26, 0x08	; 8
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
    19f8:	21 81       	ldd	r18, Z+1	; 0x01
    19fa:	42 81       	ldd	r20, Z+2	; 0x02
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	ba 01       	movw	r22, r20
    1a04:	55 27       	eor	r21, r21
    1a06:	44 27       	eor	r20, r20
    1a08:	52 2b       	or	r21, r18
    1a0a:	20 81       	ld	r18, Z
    1a0c:	42 2b       	or	r20, r18
    1a0e:	23 81       	ldd	r18, Z+3	; 0x03
    1a10:	72 2b       	or	r23, r18
    1a12:	f7 01       	movw	r30, r14
    1a14:	42 87       	std	Z+10, r20	; 0x0a
    1a16:	53 87       	std	Z+11, r21	; 0x0b
    1a18:	64 87       	std	Z+12, r22	; 0x0c
    1a1a:	75 87       	std	Z+13, r23	; 0x0d
      offset += sizeof(this->buffer_size);
     return offset;
    }
    1a1c:	04 96       	adiw	r24, 0x04	; 4
    1a1e:	2c 96       	adiw	r28, 0x0c	; 12
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	bf 90       	pop	r11
    1a3c:	af 90       	pop	r10
    1a3e:	9f 90       	pop	r9
    1a40:	8f 90       	pop	r8
    1a42:	7f 90       	pop	r7
    1a44:	6f 90       	pop	r6
    1a46:	5f 90       	pop	r5
    1a48:	4f 90       	pop	r4
    1a4a:	08 95       	ret

00001a4c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>:
      /********************************************************************
       * Topic Management
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	ec 5e       	subi	r30, 0xEC	; 236
    1a50:	fb 4f       	sbci	r31, 0xFB	; 251
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
          if(publishers[i] == 0){ // empty slot
    1a56:	41 91       	ld	r20, Z+
    1a58:	51 91       	ld	r21, Z+
    1a5a:	45 2b       	or	r20, r21
    1a5c:	91 f4       	brne	.+36     	; 0x1a82 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE+0x36>
            publishers[i] = &p;
    1a5e:	f9 01       	movw	r30, r18
    1a60:	e6 5f       	subi	r30, 0xF6	; 246
    1a62:	fd 4f       	sbci	r31, 0xFD	; 253
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	71 83       	std	Z+1, r23	; 0x01
    1a6e:	60 83       	st	Z, r22
            p.id_ = i+100+MAX_SUBSCRIBERS;
    1a70:	23 58       	subi	r18, 0x83	; 131
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	fb 01       	movw	r30, r22
    1a76:	36 83       	std	Z+6, r19	; 0x06
    1a78:	25 83       	std	Z+5, r18	; 0x05
            p.nh_ = this;
    1a7a:	90 87       	std	Z+8, r25	; 0x08
    1a7c:	87 83       	std	Z+7, r24	; 0x07
            return true;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	08 95       	ret
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    1a82:	2f 5f       	subi	r18, 0xFF	; 255
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
    1a86:	29 31       	cpi	r18, 0x19	; 25
    1a88:	31 05       	cpc	r19, r1
    1a8a:	29 f7       	brne	.-54     	; 0x1a56 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE+0xa>
            p.id_ = i+100+MAX_SUBSCRIBERS;
            p.nh_ = this;
            return true;
          }
        }
        return false;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
      }
    1a8e:	08 95       	ret

00001a90 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	8c 01       	movw	r16, r24
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    1aaa:	82 ec       	ldi	r24, 0xC2	; 194
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
    1ab2:	1b 82       	std	Y+3, r1	; 0x03
    1ab4:	1c 82       	std	Y+4, r1	; 0x04
    1ab6:	1d 82       	std	Y+5, r1	; 0x05
    1ab8:	1e 82       	std	Y+6, r1	; 0x06
    1aba:	1f 82       	std	Y+7, r1	; 0x07
    1abc:	18 86       	std	Y+8, r1	; 0x08
    1abe:	19 86       	std	Y+9, r1	; 0x09
    1ac0:	1a 86       	std	Y+10, r1	; 0x0a
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	01 90       	ld	r0, Z+
    1aca:	f0 81       	ld	r31, Z
    1acc:	e0 2d       	mov	r30, r0
    1ace:	ae 01       	movw	r20, r28
    1ad0:	4f 5f       	subi	r20, 0xFF	; 255
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	6a e0       	ldi	r22, 0x0A	; 10
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	c8 01       	movw	r24, r16
    1ada:	19 95       	eicall
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    1adc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
        rt_time = hardware_.time();
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	60 87       	std	Z+8, r22	; 0x08
    1ae4:	71 87       	std	Z+9, r23	; 0x09
    1ae6:	82 87       	std	Z+10, r24	; 0x0a
    1ae8:	93 87       	std	Z+11, r25	; 0x0b
      }
    1aea:	2a 96       	adiw	r28, 0x0a	; 10
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>:

      void syncTime(uint8_t * data)
    1b00:	8f 92       	push	r8
    1b02:	9f 92       	push	r9
    1b04:	af 92       	push	r10
    1b06:	bf 92       	push	r11
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	8c 01       	movw	r16, r24
    1b2a:	5b 01       	movw	r10, r22
    1b2c:	82 ec       	ldi	r24, 0xC2	; 194
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	1b 82       	std	Y+3, r1	; 0x03
    1b36:	1c 82       	std	Y+4, r1	; 0x04
    1b38:	1d 82       	std	Y+5, r1	; 0x05
    1b3a:	1e 82       	std	Y+6, r1	; 0x06
    1b3c:	1f 82       	std	Y+7, r1	; 0x07
    1b3e:	18 86       	std	Y+8, r1	; 0x08
    1b40:	19 86       	std	Y+9, r1	; 0x09
    1b42:	1a 86       	std	Y+10, r1	; 0x0a
    1b44:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
    1b48:	f8 01       	movw	r30, r16
    1b4a:	c0 84       	ldd	r12, Z+8	; 0x08
    1b4c:	d1 84       	ldd	r13, Z+9	; 0x09
    1b4e:	e2 84       	ldd	r14, Z+10	; 0x0a
    1b50:	f3 84       	ldd	r15, Z+11	; 0x0b
    1b52:	9b 01       	movw	r18, r22
    1b54:	ac 01       	movw	r20, r24
    1b56:	2c 19       	sub	r18, r12
    1b58:	3d 09       	sbc	r19, r13
    1b5a:	4e 09       	sbc	r20, r14
    1b5c:	5f 09       	sbc	r21, r15
    1b5e:	69 01       	movw	r12, r18
    1b60:	7a 01       	movw	r14, r20

        t.deserialize(data);
    1b62:	b5 01       	movw	r22, r10
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	ad d8       	rcall	.-3750   	; 0xcc4 <_ZN8std_msgs4Time11deserializeEPh>
        t.data.sec += offset/1000;
    1b6a:	88 ee       	ldi	r24, 0xE8	; 232
    1b6c:	88 2e       	mov	r8, r24
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	98 2e       	mov	r9, r24
    1b72:	a1 2c       	mov	r10, r1
    1b74:	b1 2c       	mov	r11, r1
    1b76:	c7 01       	movw	r24, r14
    1b78:	b6 01       	movw	r22, r12
    1b7a:	a5 01       	movw	r20, r10
    1b7c:	94 01       	movw	r18, r8
    1b7e:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodsi4>
    1b82:	cb 80       	ldd	r12, Y+3	; 0x03
    1b84:	dc 80       	ldd	r13, Y+4	; 0x04
    1b86:	ed 80       	ldd	r14, Y+5	; 0x05
    1b88:	fe 80       	ldd	r15, Y+6	; 0x06
    1b8a:	c2 0e       	add	r12, r18
    1b8c:	d3 1e       	adc	r13, r19
    1b8e:	e4 1e       	adc	r14, r20
    1b90:	f5 1e       	adc	r15, r21
    1b92:	cb 82       	std	Y+3, r12	; 0x03
    1b94:	dc 82       	std	Y+4, r13	; 0x04
    1b96:	ed 82       	std	Y+5, r14	; 0x05
    1b98:	fe 82       	std	Y+6, r15	; 0x06
        t.data.nsec += (offset%1000)*1000000UL;
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	60 e4       	ldi	r22, 0x40	; 64
    1ba0:	72 e4       	ldi	r23, 0x42	; 66
    1ba2:	8f e0       	ldi	r24, 0x0F	; 15
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
    1baa:	cf 80       	ldd	r12, Y+7	; 0x07
    1bac:	d8 84       	ldd	r13, Y+8	; 0x08
    1bae:	e9 84       	ldd	r14, Y+9	; 0x09
    1bb0:	fa 84       	ldd	r15, Y+10	; 0x0a
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8c 0d       	add	r24, r12
    1bb8:	9d 1d       	adc	r25, r13
    1bba:	ae 1d       	adc	r26, r14
    1bbc:	bf 1d       	adc	r27, r15
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	a9 87       	std	Y+9, r26	; 0x09
    1bc4:	ba 87       	std	Y+10, r27	; 0x0a
    1bc6:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
    1bca:	cb 80       	ldd	r12, Y+3	; 0x03
    1bcc:	dc 80       	ldd	r13, Y+4	; 0x04
    1bce:	ed 80       	ldd	r14, Y+5	; 0x05
    1bd0:	fe 80       	ldd	r15, Y+6	; 0x06
    1bd2:	31 e0       	ldi	r19, 0x01	; 1
    1bd4:	c3 1a       	sub	r12, r19
    1bd6:	d1 08       	sbc	r13, r1
    1bd8:	e1 08       	sbc	r14, r1
    1bda:	f1 08       	sbc	r15, r1
    1bdc:	a5 01       	movw	r20, r10
    1bde:	94 01       	movw	r18, r8
    1be0:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodsi4>
    1be4:	c2 1a       	sub	r12, r18
    1be6:	d3 0a       	sbc	r13, r19
    1be8:	e4 0a       	sbc	r14, r20
    1bea:	f5 0a       	sbc	r15, r21
    1bec:	f8 01       	movw	r30, r16
    1bee:	c4 86       	std	Z+12, r12	; 0x0c
    1bf0:	d5 86       	std	Z+13, r13	; 0x0d
    1bf2:	e6 86       	std	Z+14, r14	; 0x0e
    1bf4:	f7 86       	std	Z+15, r15	; 0x0f
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
    1bf6:	cf 80       	ldd	r12, Y+7	; 0x07
    1bf8:	d8 84       	ldd	r13, Y+8	; 0x08
    1bfa:	e9 84       	ldd	r14, Y+9	; 0x09
    1bfc:	fa 84       	ldd	r15, Y+10	; 0x0a
    1bfe:	f6 e3       	ldi	r31, 0x36	; 54
    1c00:	df 1a       	sub	r13, r31
    1c02:	f5 e6       	ldi	r31, 0x65	; 101
    1c04:	ef 0a       	sbc	r14, r31
    1c06:	f4 ec       	ldi	r31, 0xC4	; 196
    1c08:	ff 0a       	sbc	r15, r31
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	60 e4       	ldi	r22, 0x40	; 64
    1c10:	72 e4       	ldi	r23, 0x42	; 66
    1c12:	8f e0       	ldi	r24, 0x0F	; 15
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
    1c1a:	c6 1a       	sub	r12, r22
    1c1c:	d7 0a       	sbc	r13, r23
    1c1e:	e8 0a       	sbc	r14, r24
    1c20:	f9 0a       	sbc	r15, r25
    1c22:	f8 01       	movw	r30, r16
    1c24:	c0 8a       	std	Z+16, r12	; 0x10
    1c26:	d1 8a       	std	Z+17, r13	; 0x11
    1c28:	e2 8a       	std	Z+18, r14	; 0x12
    1c2a:	f3 8a       	std	Z+19, r15	; 0x13
        normalizeSecNSec(sec_offset, nsec_offset);
    1c2c:	b8 01       	movw	r22, r16
    1c2e:	60 5f       	subi	r22, 0xF0	; 240
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	c8 01       	movw	r24, r16
    1c34:	0c 96       	adiw	r24, 0x0c	; 12
    1c36:	0e 94 87 18 	call	0x310e	; 0x310e <_ZN3ros16normalizeSecNSecERmS0_>
    1c3a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
    1c3e:	f8 01       	movw	r30, r16
    1c40:	e9 57       	subi	r30, 0x79	; 121
    1c42:	fb 4f       	sbci	r31, 0xFB	; 251
    1c44:	60 83       	st	Z, r22
    1c46:	71 83       	std	Z+1, r23	; 0x01
    1c48:	82 83       	std	Z+2, r24	; 0x02
    1c4a:	93 83       	std	Z+3, r25	; 0x03
      }
    1c4c:	2a 96       	adiw	r28, 0x0a	; 10
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	08 95       	ret

00001c72 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>:
       * Logging
       */

    private:
      
      void log(char byte, const char * msg){
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc+0x6>
    1c78:	1f 92       	push	r1
    1c7a:	1f 92       	push	r1
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
    1c80:	2a ed       	ldi	r18, 0xDA	; 218
    1c82:	32 e0       	ldi	r19, 0x02	; 2
    1c84:	3a 83       	std	Y+2, r19	; 0x02
    1c86:	29 83       	std	Y+1, r18	; 0x01
        rosserial_msgs::Log l;
        l.level= byte;
    1c88:	6b 83       	std	Y+3, r22	; 0x03
        l.msg = (char*) msg;
    1c8a:	5d 83       	std	Y+5, r21	; 0x05
    1c8c:	4c 83       	std	Y+4, r20	; 0x04
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
    1c8e:	dc 01       	movw	r26, r24
    1c90:	ed 91       	ld	r30, X+
    1c92:	fc 91       	ld	r31, X
    1c94:	01 90       	ld	r0, Z+
    1c96:	f0 81       	ld	r31, Z
    1c98:	e0 2d       	mov	r30, r0
    1c9a:	ae 01       	movw	r20, r28
    1c9c:	4f 5f       	subi	r20, 0xFF	; 255
    1c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca0:	67 e0       	ldi	r22, 0x07	; 7
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	19 95       	eicall
      }
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE>:
        }
        
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
    1cb6:	af 92       	push	r10
    1cb8:	bf 92       	push	r11
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
      {
        if(id >= 100 && !configured_)
    1cca:	64 36       	cpi	r22, 0x64	; 100
    1ccc:	71 05       	cpc	r23, r1
    1cce:	3c f0       	brlt	.+14     	; 0x1cde <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	ee 57       	subi	r30, 0x7E	; 126
    1cd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cd6:	20 81       	ld	r18, Z
    1cd8:	22 23       	and	r18, r18
    1cda:	09 f4       	brne	.+2      	; 0x1cde <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    1cdc:	62 c0       	rjmp	.+196    	; 0x1da2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xec>
    1cde:	da 01       	movw	r26, r20
    1ce0:	6b 01       	movw	r12, r22
    1ce2:	ec 01       	movw	r28, r24
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	65 5e       	subi	r22, 0xE5	; 229
    1ce8:	7d 4f       	sbci	r23, 0xFD	; 253
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	01 90       	ld	r0, Z+
    1cf0:	f0 81       	ld	r31, Z
    1cf2:	e0 2d       	mov	r30, r0
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	19 95       	eicall
    1cf8:	8c 01       	movw	r16, r24

        /* setup the header */
        message_out[0] = 0xff;
    1cfa:	7e 01       	movw	r14, r28
    1cfc:	2c ee       	ldi	r18, 0xEC	; 236
    1cfe:	e2 1a       	sub	r14, r18
    1d00:	2d ef       	ldi	r18, 0xFD	; 253
    1d02:	f2 0a       	sbc	r15, r18
    1d04:	2f ef       	ldi	r18, 0xFF	; 255
    1d06:	d7 01       	movw	r26, r14
    1d08:	2c 93       	st	X, r18
        message_out[1] = PROTOCOL_VER;
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	eb 5e       	subi	r30, 0xEB	; 235
    1d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d10:	2e ef       	ldi	r18, 0xFE	; 254
    1d12:	20 83       	st	Z, r18
        message_out[2] = (uint8_t) ((uint16_t)l&255);
    1d14:	31 96       	adiw	r30, 0x01	; 1
    1d16:	80 83       	st	Z, r24
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	90 83       	st	Z, r25
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
    1d1c:	31 96       	adiw	r30, 0x01	; 1
    1d1e:	98 0f       	add	r25, r24
    1d20:	90 95       	com	r25
    1d22:	90 83       	st	Z, r25
        message_out[5] = (uint8_t) ((int16_t)id&255);
    1d24:	31 96       	adiw	r30, 0x01	; 1
    1d26:	c0 82       	st	Z, r12
        message_out[6] = (uint8_t) ((int16_t)id>>8);
    1d28:	16 96       	adiw	r26, 0x06	; 6
    1d2a:	dc 92       	st	X, r13

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    1d2c:	45 e0       	ldi	r20, 0x05	; 5
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
        for(int i =5; i<l+7; i++)
    1d34:	c8 01       	movw	r24, r16
    1d36:	07 96       	adiw	r24, 0x07	; 7
    1d38:	48 17       	cp	r20, r24
    1d3a:	59 07       	cpc	r21, r25
    1d3c:	30 f4       	brcc	.+12     	; 0x1d4a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x94>
          chk += message_out[i];
    1d3e:	61 91       	ld	r22, Z+
    1d40:	26 0f       	add	r18, r22
    1d42:	31 1d       	adc	r19, r1
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    1d44:	4f 5f       	subi	r20, 0xFF	; 255
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	f7 cf       	rjmp	.-18     	; 0x1d38 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x82>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
    1d4a:	08 5f       	subi	r16, 0xF8	; 248
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	8c 0f       	add	r24, r28
    1d50:	9d 1f       	adc	r25, r29
    1d52:	fc 01       	movw	r30, r24
    1d54:	ec 5e       	subi	r30, 0xEC	; 236
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	20 95       	com	r18
    1d5a:	20 83       	st	Z, r18

        if( l <= OUTPUT_SIZE ){
    1d5c:	01 30       	cpi	r16, 0x01	; 1
    1d5e:	b2 e0       	ldi	r27, 0x02	; 2
    1d60:	1b 07       	cpc	r17, r27
    1d62:	a8 f4       	brcc	.+42     	; 0x1d8e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xd8>
          hardware_.write(message_out, l);
    1d64:	68 01       	movw	r12, r16
    1d66:	57 01       	movw	r10, r14
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
    1d68:	c5 01       	movw	r24, r10
    1d6a:	8e 19       	sub	r24, r14
    1d6c:	9f 09       	sbc	r25, r15
    1d6e:	80 17       	cp	r24, r16
    1d70:	91 07       	cpc	r25, r17
    1d72:	cc f4       	brge	.+50     	; 0x1da6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
        iostream->write(data[i]);
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	f5 01       	movw	r30, r10
    1d7a:	61 91       	ld	r22, Z+
    1d7c:	5f 01       	movw	r10, r30
    1d7e:	dc 01       	movw	r26, r24
    1d80:	ed 91       	ld	r30, X+
    1d82:	fc 91       	ld	r31, X
    1d84:	01 90       	ld	r0, Z+
    1d86:	f0 81       	ld	r31, Z
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	19 95       	eicall
    1d8c:	ed cf       	rjmp	.-38     	; 0x1d68 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xb2>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1d8e:	4a e0       	ldi	r20, 0x0A	; 10
    1d90:	52 e0       	ldi	r21, 0x02	; 2
    1d92:	63 e0       	ldi	r22, 0x03	; 3
    1d94:	ce 01       	movw	r24, r28
    1d96:	6d df       	rcall	.-294    	; 0x1c72 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        if( l <= OUTPUT_SIZE ){
          hardware_.write(message_out, l);
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
    1d98:	cc 24       	eor	r12, r12
    1d9a:	ca 94       	dec	r12
    1d9c:	dd 24       	eor	r13, r13
    1d9e:	da 94       	dec	r13
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
	  return 0;
    1da2:	c1 2c       	mov	r12, r1
    1da4:	d1 2c       	mov	r13, r1
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
        }
      }
    1da6:	c6 01       	movw	r24, r12
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	bf 90       	pop	r11
    1dba:	af 90       	pop	r10
    1dbc:	08 95       	ret

00001dbe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>:
          }
        }
        return false;
      }

      void negotiateTopics()
    1dbe:	4f 92       	push	r4
    1dc0:	5f 92       	push	r5
    1dc2:	6f 92       	push	r6
    1dc4:	7f 92       	push	r7
    1dc6:	af 92       	push	r10
    1dc8:	bf 92       	push	r11
    1dca:	cf 92       	push	r12
    1dcc:	df 92       	push	r13
    1dce:	ef 92       	push	r14
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	66 97       	sbiw	r28, 0x16	; 22
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	8c 01       	movw	r16, r24
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    1dec:	8e ec       	ldi	r24, 0xCE	; 206
    1dee:	92 e0       	ldi	r25, 0x02	; 2
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	1c 82       	std	Y+4, r1	; 0x04
    1df6:	1b 82       	std	Y+3, r1	; 0x03
    1df8:	82 e4       	ldi	r24, 0x42	; 66
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	8f 83       	std	Y+7, r24	; 0x07
    1e04:	9a 87       	std	Y+10, r25	; 0x0a
    1e06:	89 87       	std	Y+9, r24	; 0x09
    1e08:	1b 86       	std	Y+11, r1	; 0x0b
    1e0a:	1c 86       	std	Y+12, r1	; 0x0c
    1e0c:	1d 86       	std	Y+13, r1	; 0x0d
    1e0e:	1e 86       	std	Y+14, r1	; 0x0e
    1e10:	68 01       	movw	r12, r16
    1e12:	8c ee       	ldi	r24, 0xEC	; 236
    1e14:	c8 1a       	sub	r12, r24
    1e16:	8b ef       	ldi	r24, 0xFB	; 251
    1e18:	d8 0a       	sbc	r13, r24
    1e1a:	78 01       	movw	r14, r16
    1e1c:	aa eb       	ldi	r26, 0xBA	; 186
    1e1e:	ea 1a       	sub	r14, r26
    1e20:	ab ef       	ldi	r26, 0xFB	; 251
    1e22:	fa 0a       	sbc	r15, r26
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
	    ti.buffer_size = OUTPUT_SIZE;
    1e24:	41 2c       	mov	r4, r1
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	59 2e       	mov	r5, r25
    1e2a:	61 2c       	mov	r6, r1
    1e2c:	71 2c       	mov	r7, r1
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
    1e2e:	f6 01       	movw	r30, r12
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	89 2b       	or	r24, r25
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x7c>
    1e38:	5a c0       	rjmp	.+180    	; 0x1eee <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x130>
          {
	    ReadBuffer buffer;
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	0f 96       	adiw	r24, 0x0f	; 15
    1e3e:	f4 d8       	rcall	.-3608   	; 0x1028 <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = publishers[i]->id_;
    1e40:	d6 01       	movw	r26, r12
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	85 81       	ldd	r24, Z+5	; 0x05
    1e48:	96 81       	ldd	r25, Z+6	; 0x06
    1e4a:	9c 83       	std	Y+4, r25	; 0x04
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    }
    
    // for topics
    const char * readTopicName( const Publisher * pub )
    {
      return readTopic( pub->topic_, pub->has_flash_topic_ );
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	42 81       	ldd	r20, Z+2	; 0x02
    1e54:	ce 01       	movw	r24, r28
    1e56:	0f 96       	adiw	r24, 0x0f	; 15
    1e58:	e2 d8       	rcall	.-3644   	; 0x101e <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
    1e5e:	d6 01       	movw	r26, r12
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	83 81       	ldd	r24, Z+3	; 0x03
    1e66:	94 81       	ldd	r25, Z+4	; 0x04
    1e68:	dc 01       	movw	r26, r24
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	04 80       	ldd	r0, Z+4	; 0x04
    1e70:	f5 81       	ldd	r31, Z+5	; 0x05
    1e72:	e0 2d       	mov	r30, r0
    1e74:	19 95       	eicall
    }
    
    // for md5sum / msg type
    virtual const char *  readMsgInfo( const char * msg_info )
    {
      return readFromFlash( reinterpret_cast<const __FlashStringHelper*>( msg_info ) );
    1e76:	bc 01       	movw	r22, r24
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0f 96       	adiw	r24, 0x0f	; 15
    1e7c:	90 d8       	rcall	.-3808   	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1e7e:	98 87       	std	Y+8, r25	; 0x08
    1e80:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
    1e82:	d6 01       	movw	r26, r12
    1e84:	ed 91       	ld	r30, X+
    1e86:	fc 91       	ld	r31, X
    1e88:	83 81       	ldd	r24, Z+3	; 0x03
    1e8a:	94 81       	ldd	r25, Z+4	; 0x04
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	06 80       	ldd	r0, Z+6	; 0x06
    1e94:	f7 81       	ldd	r31, Z+7	; 0x07
    1e96:	e0 2d       	mov	r30, r0
    1e98:	19 95       	eicall
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	0f 96       	adiw	r24, 0x0f	; 15
    1ea0:	7e d8       	rcall	.-3844   	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1ea2:	9a 87       	std	Y+10, r25	; 0x0a
    1ea4:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = OUTPUT_SIZE;
    1ea6:	4b 86       	std	Y+11, r4	; 0x0b
    1ea8:	5c 86       	std	Y+12, r5	; 0x0c
    1eaa:	6d 86       	std	Y+13, r6	; 0x0d
    1eac:	7e 86       	std	Y+14, r7	; 0x0e
    1eae:	d6 01       	movw	r26, r12
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
	    publish( publishers[i]->getEndpointType(), &ti );
    1eb4:	61 85       	ldd	r22, Z+9	; 0x09
    1eb6:	72 85       	ldd	r23, Z+10	; 0x0a
    1eb8:	d8 01       	movw	r26, r16
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fc 91       	ld	r31, X
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	f0 81       	ld	r31, Z
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	ae 01       	movw	r20, r28
    1ec6:	4f 5f       	subi	r20, 0xFF	; 255
    1ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eca:	c8 01       	movw	r24, r16
    1ecc:	19 95       	eicall
    1ece:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    // clean up buffer here before eventually going into log
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	19 f4       	brne	.+6      	; 0x1eda <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x11c>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1ed4:	43 e4       	ldi	r20, 0x43	; 67
    1ed6:	52 e0       	ldi	r21, 0x02	; 2
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x124>
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	29 f4       	brne	.+10     	; 0x1ee8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x12a>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1ede:	47 e5       	ldi	r20, 0x57	; 87
    1ee0:	52 e0       	ldi	r21, 0x02	; 2
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	c8 01       	movw	r24, r16
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    1ee6:	c5 de       	rcall	.-630    	; 0x1c72 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
    1ee8:	ce 01       	movw	r24, r28
    1eea:	0f 96       	adiw	r24, 0x0f	; 15
    1eec:	21 d8       	rcall	.-4030   	; 0xf30 <_ZN3ros19FlashReadOutBuffer_D1Ev>
    1eee:	b2 e0       	ldi	r27, 0x02	; 2
    1ef0:	cb 0e       	add	r12, r27
    1ef2:	d1 1c       	adc	r13, r1
      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
    1ef4:	ce 14       	cp	r12, r14
    1ef6:	df 04       	cpc	r13, r15
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x13e>
    1efa:	99 cf       	rjmp	.-206    	; 0x1e2e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x70>
    1efc:	68 01       	movw	r12, r16
    1efe:	e8 e8       	ldi	r30, 0x88	; 136
    1f00:	ce 1a       	sub	r12, r30
    1f02:	eb ef       	ldi	r30, 0xFB	; 251
    1f04:	de 0a       	sbc	r13, r30
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
	    ti.buffer_size = INPUT_SIZE;
    1f06:	41 2c       	mov	r4, r1
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	58 2e       	mov	r5, r24
    1f0c:	61 2c       	mov	r6, r1
    1f0e:	71 2c       	mov	r7, r1
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
    1f10:	d7 01       	movw	r26, r14
    1f12:	8d 91       	ld	r24, X+
    1f14:	9c 91       	ld	r25, X
    1f16:	89 2b       	or	r24, r25
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x15e>
          {
	    ReadBuffer buffer;
    1f1a:	5d c0       	rjmp	.+186    	; 0x1fd6 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x218>
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	0f 96       	adiw	r24, 0x0f	; 15
    1f20:	83 d8       	rcall	.-3834   	; 0x1028 <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = subscribers[i]->id_;
    1f22:	d7 01       	movw	r26, r14
    1f24:	ed 91       	ld	r30, X+
    1f26:	fc 91       	ld	r31, X
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    }
    
    // for topics
    const char * readTopicName( const Subscriber_ * sub )
    {
      return readTopic( sub->topic_, sub->has_flash_topic_ );
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	64 81       	ldd	r22, Z+4	; 0x04
    1f32:	75 81       	ldd	r23, Z+5	; 0x05
    1f34:	46 81       	ldd	r20, Z+6	; 0x06
    1f36:	ce 01       	movw	r24, r28
    1f38:	0f 96       	adiw	r24, 0x0f	; 15
    1f3a:	71 d8       	rcall	.-3870   	; 0x101e <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
    1f40:	f7 01       	movw	r30, r14
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	dc 01       	movw	r26, r24
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	04 80       	ldd	r0, Z+4	; 0x04
    1f4e:	f5 81       	ldd	r31, Z+5	; 0x05
    1f50:	e0 2d       	mov	r30, r0
    1f52:	19 95       	eicall
    1f54:	bc 01       	movw	r22, r24
    1f56:	ce 01       	movw	r24, r28
    1f58:	0f 96       	adiw	r24, 0x0f	; 15
    1f5a:	21 d8       	rcall	.-4030   	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1f5c:	98 87       	std	Y+8, r25	; 0x08
    1f5e:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
    1f60:	f7 01       	movw	r30, r14
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	dc 01       	movw	r26, r24
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	06 80       	ldd	r0, Z+6	; 0x06
    1f6e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f70:	e0 2d       	mov	r30, r0
    1f72:	19 95       	eicall
    1f74:	bc 01       	movw	r22, r24
    1f76:	ce 01       	movw	r24, r28
    1f78:	0f 96       	adiw	r24, 0x0f	; 15
    1f7a:	11 d8       	rcall	.-4062   	; 0xf9e <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1f7c:	9a 87       	std	Y+10, r25	; 0x0a
    1f7e:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = INPUT_SIZE;
    1f80:	4b 86       	std	Y+11, r4	; 0x0b
    1f82:	5c 86       	std	Y+12, r5	; 0x0c
    1f84:	6d 86       	std	Y+13, r6	; 0x0d
    1f86:	7e 86       	std	Y+14, r7	; 0x0e
	    publish( subscribers[i]->getEndpointType(), &ti );
    1f88:	d8 01       	movw	r26, r16
    1f8a:	ed 91       	ld	r30, X+
    1f8c:	fc 91       	ld	r31, X
    1f8e:	a0 80       	ld	r10, Z
    1f90:	b1 80       	ldd	r11, Z+1	; 0x01
    1f92:	f7 01       	movw	r30, r14
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	dc 01       	movw	r26, r24
    1f9a:	ed 91       	ld	r30, X+
    1f9c:	fc 91       	ld	r31, X
    1f9e:	02 80       	ldd	r0, Z+2	; 0x02
    1fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	19 95       	eicall
    1fa6:	ae 01       	movw	r20, r28
    1fa8:	4f 5f       	subi	r20, 0xFF	; 255
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	bc 01       	movw	r22, r24
    1fae:	c8 01       	movw	r24, r16
    1fb0:	f5 01       	movw	r30, r10
    1fb2:	19 95       	eicall
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x202>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1fba:	43 e4       	ldi	r20, 0x43	; 67
    1fbc:	52 e0       	ldi	r21, 0x02	; 2
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x20a>
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    1fc0:	82 30       	cpi	r24, 0x02	; 2
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x210>
    1fc4:	47 e5       	ldi	r20, 0x57	; 87
    1fc6:	52 e0       	ldi	r21, 0x02	; 2
    1fc8:	63 e0       	ldi	r22, 0x03	; 3
    1fca:	c8 01       	movw	r24, r16
    1fcc:	52 de       	rcall	.-860    	; 0x1c72 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    1fce:	ce 01       	movw	r24, r28
    1fd0:	0f 96       	adiw	r24, 0x0f	; 15
    1fd2:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN3ros19FlashReadOutBuffer_D1Ev>
    1fd6:	f2 e0       	ldi	r31, 0x02	; 2
    1fd8:	ef 0e       	add	r14, r31
    1fda:	f1 1c       	adc	r15, r1
	      logerror( "Buffer overflow pub" );
	    }
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
    1fdc:	ce 14       	cp	r12, r14
    1fde:	df 04       	cpc	r13, r15
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x226>
    1fe2:	96 cf       	rjmp	.-212    	; 0x1f10 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x152>
	      logerror( "Buffer overflow pub" );
	    }
	  }
        }
        
        configured_ = true;
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	ee 57       	subi	r30, 0x7E	; 126
    1fe8:	fb 4f       	sbci	r31, 0xFB	; 251
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 83       	st	Z, r24
      }
    1fee:	66 96       	adiw	r28, 0x16	; 22
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	7f 90       	pop	r7
    2010:	6f 90       	pop	r6
    2012:	5f 90       	pop	r5
    2014:	4f 90       	pop	r4
    2016:	08 95       	ret

00002018 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
    2018:	2f 92       	push	r2
    201a:	3f 92       	push	r3
    201c:	4f 92       	push	r4
    201e:	5f 92       	push	r5
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	60 97       	sbiw	r28, 0x10	; 16
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	98 8b       	std	Y+16, r25	; 0x10
    204e:	8f 87       	std	Y+15, r24	; 0x0f
    }

    unsigned long time(){return millis();}
    2050:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
    2054:	4b 01       	movw	r8, r22
    2056:	5c 01       	movw	r10, r24

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
    2058:	2f 85       	ldd	r18, Y+15	; 0x0f
    205a:	38 89       	ldd	r19, Y+16	; 0x10
    205c:	29 57       	subi	r18, 0x79	; 121
    205e:	3b 4f       	sbci	r19, 0xFB	; 251
    2060:	3e 83       	std	Y+6, r19	; 0x06
    2062:	2d 83       	std	Y+5, r18	; 0x05
    2064:	f9 01       	movw	r30, r18
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	a2 81       	ldd	r26, Z+2	; 0x02
    206c:	b3 81       	ldd	r27, Z+3	; 0x03
    206e:	a5 01       	movw	r20, r10
    2070:	94 01       	movw	r18, r8
    2072:	28 1b       	sub	r18, r24
    2074:	39 0b       	sbc	r19, r25
    2076:	4a 0b       	sbc	r20, r26
    2078:	5b 0b       	sbc	r21, r27
    207a:	da 01       	movw	r26, r20
    207c:	c9 01       	movw	r24, r18
    207e:	89 3f       	cpi	r24, 0xF9	; 249
    2080:	9a 42       	sbci	r25, 0x2A	; 42
    2082:	a1 05       	cpc	r26, r1
    2084:	b1 05       	cpc	r27, r1
    2086:	28 f0       	brcs	.+10     	; 0x2092 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x7a>
            configured_ = false;
    2088:	ef 85       	ldd	r30, Y+15	; 0x0f
    208a:	f8 89       	ldd	r31, Y+16	; 0x10
    208c:	ee 57       	subi	r30, 0x7E	; 126
    208e:	fb 4f       	sbci	r31, 0xFB	; 251
    2090:	10 82       	st	Z, r1
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
    2092:	0f 85       	ldd	r16, Y+15	; 0x0f
    2094:	18 89       	ldd	r17, Y+16	; 0x10
    2096:	08 58       	subi	r16, 0x88	; 136
    2098:	1b 4f       	sbci	r17, 0xFB	; 251
    209a:	d8 01       	movw	r26, r16
    209c:	8d 91       	ld	r24, X+
    209e:	9c 91       	ld	r25, X
    20a0:	89 2b       	or	r24, r25
    20a2:	81 f0       	breq	.+32     	; 0x20c4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xac>
          if (c_time > last_msg_timeout_time){
    20a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    20a6:	f8 89       	ldd	r31, Y+16	; 0x10
    20a8:	e5 57       	subi	r30, 0x75	; 117
    20aa:	fb 4f       	sbci	r31, 0xFB	; 251
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	a2 81       	ldd	r26, Z+2	; 0x02
    20b2:	b3 81       	ldd	r27, Z+3	; 0x03
    20b4:	88 15       	cp	r24, r8
    20b6:	99 05       	cpc	r25, r9
    20b8:	aa 05       	cpc	r26, r10
    20ba:	bb 05       	cpc	r27, r11
    20bc:	18 f4       	brcc	.+6      	; 0x20c4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xac>
            mode_ = MODE_FIRST_FF;
    20be:	f8 01       	movw	r30, r16
    20c0:	11 82       	std	Z+1, r1	; 0x01
    20c2:	10 82       	st	Z, r1
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
    20c4:	6f 84       	ldd	r6, Y+15	; 0x0f
    20c6:	78 88       	ldd	r7, Y+16	; 0x10
    20c8:	f0 e8       	ldi	r31, 0x80	; 128
    20ca:	6f 1a       	sub	r6, r31
    20cc:	fb ef       	ldi	r31, 0xFB	; 251
    20ce:	7f 0a       	sbc	r7, r31
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
              if(topic_ == TopicInfo::ID_PUBLISHER){
    20d0:	2f 85       	ldd	r18, Y+15	; 0x0f
    20d2:	38 89       	ldd	r19, Y+16	; 0x10
    20d4:	24 58       	subi	r18, 0x84	; 132
    20d6:	3b 4f       	sbci	r19, 0xFB	; 251
    20d8:	3a 83       	std	Y+2, r19	; 0x02
    20da:	29 83       	std	Y+1, r18	; 0x01
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
    20dc:	cf 84       	ldd	r12, Y+15	; 0x0f
    20de:	d8 88       	ldd	r13, Y+16	; 0x10
    20e0:	34 e1       	ldi	r19, 0x14	; 20
    20e2:	c3 0e       	add	r12, r19
    20e4:	d1 1c       	adc	r13, r1
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
    20e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    20e8:	58 89       	ldd	r21, Y+16	; 0x10
    20ea:	4e 57       	subi	r20, 0x7E	; 126
    20ec:	5b 4f       	sbci	r21, 0xFB	; 251
    20ee:	58 87       	std	Y+8, r21	; 0x08
    20f0:	4f 83       	std	Y+7, r20	; 0x07
                last_sync_receive_time = c_time;
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
    20f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f4:	98 89       	ldd	r25, Y+16	; 0x10
    20f6:	80 57       	subi	r24, 0x70	; 112
    20f8:	9b 4f       	sbci	r25, 0xFB	; 251
    20fa:	9a 87       	std	Y+10, r25	; 0x0a
    20fc:	89 87       	std	Y+9, r24	; 0x09
                  param_recieved= true;
    20fe:	af 85       	ldd	r26, Y+15	; 0x0f
    2100:	b8 89       	ldd	r27, Y+16	; 0x10
    2102:	a1 57       	subi	r26, 0x71	; 113
    2104:	bb 4f       	sbci	r27, 0xFB	; 251
    2106:	bc 87       	std	Y+12, r27	; 0x0c
    2108:	ab 87       	std	Y+11, r26	; 0x0b
            mode_++;
            checksum_ = data;               /* first byte included in checksum */
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
    210a:	ef 84       	ldd	r14, Y+15	; 0x0f
    210c:	f8 88       	ldd	r15, Y+16	; 0x10
    210e:	b6 e8       	ldi	r27, 0x86	; 134
    2110:	eb 1a       	sub	r14, r27
    2112:	bb ef       	ldi	r27, 0xFB	; 251
    2114:	fb 0a       	sbc	r15, r27
              if (configured_ == false)
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
            bytes_ = data;
            index_ = 0;
    2116:	ef 85       	ldd	r30, Y+15	; 0x0f
    2118:	f8 89       	ldd	r31, Y+16	; 0x10
    211a:	e2 58       	subi	r30, 0x82	; 130
    211c:	fb 4f       	sbci	r31, 0xFB	; 251
    211e:	fc 83       	std	Y+4, r31	; 0x04
    2120:	eb 83       	std	Y+3, r30	; 0x03
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_FIRST_FF ){
            if(data == 0xff){
              mode_++;
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    2122:	2f 85       	ldd	r18, Y+15	; 0x0f
    2124:	38 89       	ldd	r19, Y+16	; 0x10
    2126:	25 57       	subi	r18, 0x75	; 117
    2128:	3b 4f       	sbci	r19, 0xFB	; 251
    212a:	3e 87       	std	Y+14, r19	; 0x0e
    212c:	2d 87       	std	Y+13, r18	; 0x0d
    212e:	14 01       	movw	r2, r8
    2130:	25 01       	movw	r4, r10
    2132:	34 e1       	ldi	r19, 0x14	; 20
    2134:	23 0e       	add	r2, r19
    2136:	31 1c       	adc	r3, r1
    2138:	41 1c       	adc	r4, r1
    213a:	51 1c       	adc	r5, r1
    213c:	af 85       	ldd	r26, Y+15	; 0x0f
    213e:	b8 89       	ldd	r27, Y+16	; 0x10
    2140:	12 96       	adiw	r26, 0x02	; 2
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	13 97       	sbiw	r26, 0x03	; 3
      delay(3000); 
#endif
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    2148:	dc 01       	movw	r26, r24
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	02 84       	ldd	r0, Z+10	; 0x0a
    2150:	f3 85       	ldd	r31, Z+11	; 0x0b
    2152:	e0 2d       	mov	r30, r0
    2154:	19 95       	eicall
    2156:	9c 01       	movw	r18, r24

        /* while available buffer, read data */
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
    2158:	97 fd       	sbrc	r25, 7
    215a:	22 c1       	rjmp	.+580    	; 0x23a0 <__stack+0x1a1>
            break;
          checksum_ += data;
    215c:	f3 01       	movw	r30, r6
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	82 0f       	add	r24, r18
    2164:	93 1f       	adc	r25, r19
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
    216a:	d8 01       	movw	r26, r16
    216c:	4d 91       	ld	r20, X+
    216e:	5c 91       	ld	r21, X
    2170:	47 30       	cpi	r20, 0x07	; 7
    2172:	51 05       	cpc	r21, r1
    2174:	d1 f4       	brne	.+52     	; 0x21aa <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x192>
            message_in[index_++] = data;
    2176:	eb 81       	ldd	r30, Y+3	; 0x03
    2178:	fc 81       	ldd	r31, Y+4	; 0x04
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	ac 01       	movw	r20, r24
    2180:	4f 5f       	subi	r20, 0xFF	; 255
    2182:	5f 4f       	sbci	r21, 0xFF	; 255
    2184:	51 83       	std	Z+1, r21	; 0x01
    2186:	40 83       	st	Z, r20
    2188:	ef 85       	ldd	r30, Y+15	; 0x0f
    218a:	f8 89       	ldd	r31, Y+16	; 0x10
    218c:	e8 0f       	add	r30, r24
    218e:	f9 1f       	adc	r31, r25
    2190:	24 8b       	std	Z+20, r18	; 0x14
            bytes_--;
    2192:	d7 01       	movw	r26, r14
    2194:	8d 91       	ld	r24, X+
    2196:	9c 91       	ld	r25, X
    2198:	11 97       	sbiw	r26, 0x01	; 1
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	8d 93       	st	X+, r24
    219e:	9c 93       	st	X, r25
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
    21a0:	89 2b       	or	r24, r25
    21a2:	61 f6       	brne	.-104    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              mode_ = MODE_MSG_CHECKSUM;
    21a4:	88 e0       	ldi	r24, 0x08	; 8
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	30 c0       	rjmp	.+96     	; 0x220a <__stack+0xb>
          }else if( mode_ == MODE_FIRST_FF ){
    21aa:	41 15       	cp	r20, r1
    21ac:	51 05       	cpc	r21, r1
    21ae:	29 f5       	brne	.+74     	; 0x21fa <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1e2>
            if(data == 0xff){
    21b0:	2f 3f       	cpi	r18, 0xFF	; 255
    21b2:	31 05       	cpc	r19, r1
    21b4:	61 f4       	brne	.+24     	; 0x21ce <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1b6>
              mode_++;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	d8 01       	movw	r26, r16
    21bc:	8d 93       	st	X+, r24
    21be:	9c 93       	st	X, r25
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    21c0:	ed 85       	ldd	r30, Y+13	; 0x0d
    21c2:	fe 85       	ldd	r31, Y+14	; 0x0e
    21c4:	20 82       	st	Z, r2
    21c6:	31 82       	std	Z+1, r3	; 0x01
    21c8:	42 82       	std	Z+2, r4	; 0x02
    21ca:	53 82       	std	Z+3, r5	; 0x03
    21cc:	b7 cf       	rjmp	.-146    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    21ce:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	88 19       	sub	r24, r8
    21d8:	99 09       	sbc	r25, r9
    21da:	aa 09       	sbc	r26, r10
    21dc:	bb 09       	sbc	r27, r11
    21de:	06 97       	sbiw	r24, 0x06	; 6
    21e0:	a1 05       	cpc	r26, r1
    21e2:	b1 05       	cpc	r27, r1
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1d0>
    21e6:	aa cf       	rjmp	.-172    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
    21e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    21ea:	38 89       	ldd	r19, Y+16	; 0x10
    21ec:	2e 57       	subi	r18, 0x7E	; 126
    21ee:	3b 4f       	sbci	r19, 0xFB	; 251
    21f0:	d9 01       	movw	r26, r18
    21f2:	1c 92       	st	X, r1
              return -2;
    21f4:	8e ef       	ldi	r24, 0xFE	; 254
    21f6:	9f ef       	ldi	r25, 0xFF	; 255
    21f8:	fb c0       	rjmp	.+502    	; 0x23f0 <__stack+0x1f1>
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
    21fa:	41 30       	cpi	r20, 0x01	; 1
    21fc:	51 05       	cpc	r21, r1
    21fe:	a9 f4       	brne	.+42     	; 0x222a <__stack+0x2b>
            if(data == PROTOCOL_VER){
    2200:	2e 3f       	cpi	r18, 0xFE	; 254
    2202:	31 05       	cpc	r19, r1
    2204:	31 f4       	brne	.+12     	; 0x2212 <__stack+0x13>
              mode_++;
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	f8 01       	movw	r30, r16
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	95 cf       	rjmp	.-214    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }else{
              mode_ = MODE_FIRST_FF;
    2212:	d8 01       	movw	r26, r16
    2214:	1d 92       	st	X+, r1
    2216:	1c 92       	st	X, r1
              if (configured_ == false)
    2218:	ef 81       	ldd	r30, Y+7	; 0x07
    221a:	f8 85       	ldd	r31, Y+8	; 0x08
    221c:	80 81       	ld	r24, Z
    221e:	81 11       	cpse	r24, r1
    2220:	8d cf       	rjmp	.-230    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	34 dc       	rcall	.-1944   	; 0x1a90 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
    2228:	89 cf       	rjmp	.-238    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
    222a:	42 30       	cpi	r20, 0x02	; 2
    222c:	51 05       	cpc	r21, r1
    222e:	81 f4       	brne	.+32     	; 0x2250 <__stack+0x51>
            bytes_ = data;
    2230:	d7 01       	movw	r26, r14
    2232:	2d 93       	st	X+, r18
    2234:	3c 93       	st	X, r19
            index_ = 0;
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	11 82       	std	Z+1, r1	; 0x01
    223c:	10 82       	st	Z, r1
            mode_++;
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	d8 01       	movw	r26, r16
    2244:	8d 93       	st	X+, r24
    2246:	9c 93       	st	X, r25
            checksum_ = data;               /* first byte for calculating size checksum */
    2248:	f3 01       	movw	r30, r6
    224a:	31 83       	std	Z+1, r19	; 0x01
    224c:	20 83       	st	Z, r18
    224e:	76 cf       	rjmp	.-276    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
    2250:	43 30       	cpi	r20, 0x03	; 3
    2252:	51 05       	cpc	r21, r1
    2254:	69 f4       	brne	.+26     	; 0x2270 <__stack+0x71>
            bytes_ += data<<8;
    2256:	32 2f       	mov	r19, r18
    2258:	22 27       	eor	r18, r18
    225a:	d7 01       	movw	r26, r14
    225c:	8d 91       	ld	r24, X+
    225e:	9c 91       	ld	r25, X
    2260:	11 97       	sbiw	r26, 0x01	; 1
    2262:	28 0f       	add	r18, r24
    2264:	39 1f       	adc	r19, r25
    2266:	2d 93       	st	X+, r18
    2268:	3c 93       	st	X, r19
	    mode_++;
    226a:	84 e0       	ldi	r24, 0x04	; 4
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	cd cf       	rjmp	.-102    	; 0x220a <__stack+0xb>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
    2270:	44 30       	cpi	r20, 0x04	; 4
    2272:	51 05       	cpc	r21, r1
    2274:	89 f4       	brne	.+34     	; 0x2298 <__stack+0x99>
            if( (checksum_%256) == 255)
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	71 e0       	ldi	r23, 0x01	; 1
    227a:	0e 94 10 20 	call	0x4020	; 0x4020 <__divmodhi4>
    227e:	8f 3f       	cpi	r24, 0xFF	; 255
    2280:	91 05       	cpc	r25, r1
    2282:	31 f4       	brne	.+12     	; 0x2290 <__stack+0x91>
	      mode_++;
    2284:	85 e0       	ldi	r24, 0x05	; 5
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	d8 01       	movw	r26, r16
    228a:	8d 93       	st	X+, r24
    228c:	9c 93       	st	X, r25
    228e:	56 cf       	rjmp	.-340    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    2290:	f8 01       	movw	r30, r16
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	10 82       	st	Z, r1
    2296:	52 cf       	rjmp	.-348    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
    2298:	45 30       	cpi	r20, 0x05	; 5
    229a:	51 05       	cpc	r21, r1
    229c:	69 f4       	brne	.+26     	; 0x22b8 <__stack+0xb9>
            topic_ = data;
    229e:	a9 81       	ldd	r26, Y+1	; 0x01
    22a0:	ba 81       	ldd	r27, Y+2	; 0x02
    22a2:	2d 93       	st	X+, r18
    22a4:	3c 93       	st	X, r19
            mode_++;
    22a6:	46 e0       	ldi	r20, 0x06	; 6
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	f8 01       	movw	r30, r16
    22ac:	51 83       	std	Z+1, r21	; 0x01
    22ae:	40 83       	st	Z, r20
            checksum_ = data;               /* first byte included in checksum */
    22b0:	d3 01       	movw	r26, r6
    22b2:	2d 93       	st	X+, r18
    22b4:	3c 93       	st	X, r19
    22b6:	42 cf       	rjmp	.-380    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
    22b8:	46 30       	cpi	r20, 0x06	; 6
    22ba:	51 05       	cpc	r21, r1
    22bc:	99 f4       	brne	.+38     	; 0x22e4 <__stack+0xe5>
            topic_ += data<<8;
    22be:	32 2f       	mov	r19, r18
    22c0:	22 27       	eor	r18, r18
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	28 0f       	add	r18, r24
    22cc:	39 1f       	adc	r19, r25
    22ce:	31 83       	std	Z+1, r19	; 0x01
    22d0:	20 83       	st	Z, r18
            mode_ = MODE_MESSAGE;
    22d2:	e7 e0       	ldi	r30, 0x07	; 7
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	d8 01       	movw	r26, r16
    22d8:	ed 93       	st	X+, r30
    22da:	fc 93       	st	X, r31
            if(bytes_ == 0)
    22dc:	d7 01       	movw	r26, r14
    22de:	8d 91       	ld	r24, X+
    22e0:	9c 91       	ld	r25, X
    22e2:	5e cf       	rjmp	.-324    	; 0x21a0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x188>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
    22e4:	48 30       	cpi	r20, 0x08	; 8
    22e6:	51 05       	cpc	r21, r1
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0xed>
    22ea:	28 cf       	rjmp	.-432    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            mode_ = MODE_FIRST_FF;
    22ec:	f8 01       	movw	r30, r16
    22ee:	11 82       	std	Z+1, r1	; 0x01
    22f0:	10 82       	st	Z, r1
            if( (checksum_%256) == 255){
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	71 e0       	ldi	r23, 0x01	; 1
    22f6:	0e 94 10 20 	call	0x4020	; 0x4020 <__divmodhi4>
    22fa:	8f 3f       	cpi	r24, 0xFF	; 255
    22fc:	91 05       	cpc	r25, r1
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__stack+0x103>
    2300:	1d cf       	rjmp	.-454    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              if(topic_ == TopicInfo::ID_PUBLISHER){
    2302:	a9 81       	ldd	r26, Y+1	; 0x01
    2304:	ba 81       	ldd	r27, Y+2	; 0x02
    2306:	8d 91       	ld	r24, X+
    2308:	9c 91       	ld	r25, X
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	b9 f4       	brne	.+46     	; 0x233c <__stack+0x13d>
                requestSyncTime();
    230e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2310:	98 89       	ldd	r25, Y+16	; 0x10
    2312:	be db       	rcall	.-2180   	; 0x1a90 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
                negotiateTopics();
    2314:	8f 85       	ldd	r24, Y+15	; 0x0f
    2316:	98 89       	ldd	r25, Y+16	; 0x10
    2318:	52 dd       	rcall	.-1372   	; 0x1dbe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>
                last_sync_time = c_time;
    231a:	ef 85       	ldd	r30, Y+15	; 0x0f
    231c:	f8 89       	ldd	r31, Y+16	; 0x10
    231e:	ed 57       	subi	r30, 0x7D	; 125
    2320:	fb 4f       	sbci	r31, 0xFB	; 251
    2322:	80 82       	st	Z, r8
    2324:	91 82       	std	Z+1, r9	; 0x01
    2326:	a2 82       	std	Z+2, r10	; 0x02
    2328:	b3 82       	std	Z+3, r11	; 0x03
                last_sync_receive_time = c_time;
    232a:	ed 81       	ldd	r30, Y+5	; 0x05
    232c:	fe 81       	ldd	r31, Y+6	; 0x06
    232e:	80 82       	st	Z, r8
    2330:	91 82       	std	Z+1, r9	; 0x01
    2332:	a2 82       	std	Z+2, r10	; 0x02
    2334:	b3 82       	std	Z+3, r11	; 0x03
                return -1;
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	9f ef       	ldi	r25, 0xFF	; 255
    233a:	5a c0       	rjmp	.+180    	; 0x23f0 <__stack+0x1f1>
              }else if(topic_ == TopicInfo::ID_TIME){
    233c:	8a 30       	cpi	r24, 0x0A	; 10
    233e:	91 05       	cpc	r25, r1
    2340:	29 f4       	brne	.+10     	; 0x234c <__stack+0x14d>
                syncTime(message_in);
    2342:	b6 01       	movw	r22, r12
    2344:	8f 85       	ldd	r24, Y+15	; 0x0f
    2346:	98 89       	ldd	r25, Y+16	; 0x10
    2348:	db db       	rcall	.-2122   	; 0x1b00 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>
    234a:	f8 ce       	rjmp	.-528    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
    234c:	86 30       	cpi	r24, 0x06	; 6
    234e:	91 05       	cpc	r25, r1
                  req_param_resp.deserialize(message_in);
    2350:	49 f4       	brne	.+18     	; 0x2364 <__stack+0x165>
    2352:	b6 01       	movw	r22, r12
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	d4 d8       	rcall	.-3672   	; 0x1502 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                  param_recieved= true;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	ab 85       	ldd	r26, Y+11	; 0x0b
    235e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2360:	8c 93       	st	X, r24
    2362:	ec ce       	rjmp	.-552    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
    2364:	8b 30       	cpi	r24, 0x0B	; 11
    2366:	91 05       	cpc	r25, r1
    2368:	21 f4       	brne	.+8      	; 0x2372 <__stack+0x173>
                  configured_ = false;
    236a:	ef 81       	ldd	r30, Y+7	; 0x07
    236c:	f8 85       	ldd	r31, Y+8	; 0x08
    236e:	10 82       	st	Z, r1
    2370:	e5 ce       	rjmp	.-566    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
              }else{
                if(subscribers[topic_-100])
    2372:	fc 01       	movw	r30, r24
    2374:	e1 54       	subi	r30, 0x41	; 65
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	2f 85       	ldd	r18, Y+15	; 0x0f
    237e:	38 89       	ldd	r19, Y+16	; 0x10
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	09 f4       	brne	.+2      	; 0x238e <__stack+0x18f>
    238c:	d7 ce       	rjmp	.-594    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
                  subscribers[topic_-100]->callback( message_in );
    238e:	dc 01       	movw	r26, r24
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	01 90       	ld	r0, Z+
    2396:	f0 81       	ld	r31, Z
    2398:	e0 2d       	mov	r30, r0
    239a:	b6 01       	movw	r22, r12
    239c:	19 95       	eicall
    239e:	ce ce       	rjmp	.-612    	; 0x213c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x124>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
    23a0:	ef 85       	ldd	r30, Y+15	; 0x0f
    23a2:	f8 89       	ldd	r31, Y+16	; 0x10
    23a4:	ee 57       	subi	r30, 0x7E	; 126
    23a6:	fb 4f       	sbci	r31, 0xFB	; 251
    23a8:	80 81       	ld	r24, Z
    23aa:	88 23       	and	r24, r24
    23ac:	f9 f0       	breq	.+62     	; 0x23ec <__stack+0x1ed>
    23ae:	0f 85       	ldd	r16, Y+15	; 0x0f
    23b0:	18 89       	ldd	r17, Y+16	; 0x10
    23b2:	0d 57       	subi	r16, 0x7D	; 125
    23b4:	1b 4f       	sbci	r17, 0xFB	; 251
    23b6:	f8 01       	movw	r30, r16
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	a2 81       	ldd	r26, Z+2	; 0x02
    23be:	b3 81       	ldd	r27, Z+3	; 0x03
    23c0:	a5 01       	movw	r20, r10
    23c2:	94 01       	movw	r18, r8
    23c4:	28 1b       	sub	r18, r24
    23c6:	39 0b       	sbc	r19, r25
    23c8:	4a 0b       	sbc	r20, r26
    23ca:	5b 0b       	sbc	r21, r27
    23cc:	da 01       	movw	r26, r20
    23ce:	c9 01       	movw	r24, r18
    23d0:	85 3c       	cpi	r24, 0xC5	; 197
    23d2:	99 40       	sbci	r25, 0x09	; 9
    23d4:	a1 05       	cpc	r26, r1
    23d6:	b1 05       	cpc	r27, r1
          requestSyncTime();
    23d8:	48 f0       	brcs	.+18     	; 0x23ec <__stack+0x1ed>
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	98 89       	ldd	r25, Y+16	; 0x10
    23de:	58 db       	rcall	.-2384   	; 0x1a90 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
          last_sync_time = c_time;
    23e0:	d8 01       	movw	r26, r16
    23e2:	8d 92       	st	X+, r8
    23e4:	9d 92       	st	X+, r9
    23e6:	ad 92       	st	X+, r10
    23e8:	bc 92       	st	X, r11
    23ea:	13 97       	sbiw	r26, 0x03	; 3
        }

        return 0;
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
      }
    23f0:	60 96       	adiw	r28, 0x10	; 16
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	5f 90       	pop	r5
    241a:	4f 90       	pop	r4
    241c:	3f 90       	pop	r3
    241e:	2f 90       	pop	r2
    2420:	08 95       	ret

00002422 <main>:
void turnRight(DC_Motor_Driver* _motorLeft, DC_Motor_Driver* _motorRight);
void goStraight(DC_Motor_Driver* _motorLeft, DC_Motor_Driver* _motorRight);


int main()
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	c4 54       	subi	r28, 0x44	; 68
    242c:	d6 40       	sbci	r29, 0x06	; 6
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
	init();
    2438:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <init>

	uint8_t motorControlTimerId = declareTimer(20, 1, Elapsed);
    243c:	e1 2c       	mov	r14, r1
    243e:	f1 2c       	mov	r15, r1
    2440:	00 e0       	ldi	r16, 0x00	; 0
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	84 e1       	ldi	r24, 0x14	; 20
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	52 d7       	rcall	.+3748   	; 0x32f6 <_Z12declareTimerjh9timerModePFvvEjPVj>
    2452:	c1 5c       	subi	r28, 0xC1	; 193
    2454:	d9 4f       	sbci	r29, 0xF9	; 249
    2456:	88 83       	st	Y, r24
    2458:	cf 53       	subi	r28, 0x3F	; 63
    245a:	d6 40       	sbci	r29, 0x06	; 6
	startTimer(motorControlTimerId);
    245c:	8d d7       	rcall	.+3866   	; 0x3378 <_Z10startTimerh>
    245e:	20 e0       	ldi	r18, 0x00	; 0
	
	uint8_t stuckTimerId = declareTimer(6000, 0, Elapsed);
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	80 e7       	ldi	r24, 0x70	; 112
    2468:	97 e1       	ldi	r25, 0x17	; 23
    246a:	45 d7       	rcall	.+3722   	; 0x32f6 <_Z12declareTimerjh9timerModePFvvEjPVj>
    246c:	28 2e       	mov	r2, r24
    246e:	20 e0       	ldi	r18, 0x00	; 0
	//startTimer(turnTimerId);
	
	uint8_t chaosTimerId = declareTimer(59000, 0, Elapsed);
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	88 e7       	ldi	r24, 0x78	; 120
    2478:	96 ee       	ldi	r25, 0xE6	; 230
    247a:	3d d7       	rcall	.+3706   	; 0x32f6 <_Z12declareTimerjh9timerModePFvvEjPVj>
    247c:	38 2e       	mov	r3, r24
    247e:	20 e0       	ldi	r18, 0x00	; 0
	//startTimer(chaosTimerId);
	
	uint8_t ultraTimerId = declareTimer(200, 1, Elapsed);
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	35 d7       	rcall	.+3690   	; 0x32f6 <_Z12declareTimerjh9timerModePFvvEjPVj>
    248c:	c0 5c       	subi	r28, 0xC0	; 192
    248e:	d9 4f       	sbci	r29, 0xF9	; 249
    2490:	88 83       	st	Y, r24
    2492:	c0 54       	subi	r28, 0x40	; 64
    2494:	d6 40       	sbci	r29, 0x06	; 6
	startTimer(ultraTimerId);
    2496:	70 d7       	rcall	.+3808   	; 0x3378 <_Z10startTimerh>
    2498:	86 e1       	ldi	r24, 0x16	; 22

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	87 ee       	ldi	r24, 0xE7	; 231
      /* Leonardo support */
      iostream = &Serial1;
#elif defined(USE_TEENSY_HW_SERIAL) or defined(USE_STM32_HW_SERIAL)
      iostream = &Serial1;
#else
      iostream = &Serial;
    24a2:	93 e0       	ldi	r25, 0x03	; 3
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
    24a8:	80 e0       	ldi	r24, 0x00	; 0
#endif
      baud_ = 57600;
    24aa:	91 ee       	ldi	r25, 0xE1	; 225
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	af 83       	std	Y+7, r26	; 0x07
    24b6:	b8 87       	std	Y+8, r27	; 0x08
    24b8:	cd 57       	subi	r28, 0x7D	; 125
    24ba:	db 4f       	sbci	r29, 0xFB	; 251
    24bc:	18 82       	st	Y, r1
    24be:	c3 58       	subi	r28, 0x83	; 131
    24c0:	d4 40       	sbci	r29, 0x04	; 4
    24c2:	86 ee       	ldi	r24, 0xE6	; 230
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	cf 56       	subi	r28, 0x6F	; 111
    24c8:	db 4f       	sbci	r29, 0xFB	; 251
    24ca:	99 83       	std	Y+1, r25	; 0x01
    24cc:	88 83       	st	Y, r24
    24ce:	c1 59       	subi	r28, 0x91	; 145
    24d0:	d4 40       	sbci	r29, 0x04	; 4
    24d2:	cd 56       	subi	r28, 0x6D	; 109
    24d4:	db 4f       	sbci	r29, 0xFB	; 251
    24d6:	18 82       	st	Y, r1
    24d8:	19 82       	std	Y+1, r1	; 0x01
    24da:	1a 82       	std	Y+2, r1	; 0x02
    24dc:	1b 82       	std	Y+3, r1	; 0x03
    24de:	c3 59       	subi	r28, 0x93	; 147
    24e0:	d4 40       	sbci	r29, 0x04	; 4
    24e2:	c5 56       	subi	r28, 0x65	; 101
    24e4:	db 4f       	sbci	r29, 0xFB	; 251
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	18 82       	st	Y, r1
    24ea:	cb 59       	subi	r28, 0x9B	; 155
    24ec:	d4 40       	sbci	r29, 0x04	; 4
    24ee:	c3 56       	subi	r28, 0x63	; 99
    24f0:	db 4f       	sbci	r29, 0xFB	; 251
    24f2:	18 82       	st	Y, r1
    24f4:	19 82       	std	Y+1, r1	; 0x01
    24f6:	1a 82       	std	Y+2, r1	; 0x02
    24f8:	1b 82       	std	Y+3, r1	; 0x03
    24fa:	cd 59       	subi	r28, 0x9D	; 157
    24fc:	d4 40       	sbci	r29, 0x04	; 4
    24fe:	cb 55       	subi	r28, 0x5B	; 91
    2500:	db 4f       	sbci	r29, 0xFB	; 251
    2502:	19 82       	std	Y+1, r1	; 0x01
    2504:	18 82       	st	Y, r1
    2506:	c5 5a       	subi	r28, 0xA5	; 165
    2508:	d4 40       	sbci	r29, 0x04	; 4
    250a:	c9 55       	subi	r28, 0x59	; 89
    250c:	db 4f       	sbci	r29, 0xFB	; 251
    250e:	18 82       	st	Y, r1
    2510:	19 82       	std	Y+1, r1	; 0x01
    2512:	1a 82       	std	Y+2, r1	; 0x02
    2514:	1b 82       	std	Y+3, r1	; 0x03
    2516:	c7 5a       	subi	r28, 0xA7	; 167
    2518:	d4 40       	sbci	r29, 0x04	; 4
    251a:	c3 55       	subi	r28, 0x53	; 83
    251c:	db 4f       	sbci	r29, 0xFB	; 251
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	18 82       	st	Y, r1
    2522:	cd 5a       	subi	r28, 0xAD	; 173
    2524:	d4 40       	sbci	r29, 0x04	; 4
    2526:	ce 01       	movw	r24, r28
    2528:	8b 5e       	subi	r24, 0xEB	; 235
    252a:	9b 4f       	sbci	r25, 0xFB	; 251
    252c:	5e 01       	movw	r10, r28
    252e:	29 eb       	ldi	r18, 0xB9	; 185
    2530:	a2 1a       	sub	r10, r18
    2532:	2b ef       	ldi	r18, 0xFB	; 251
    2534:	b2 0a       	sbc	r11, r18
    2536:	fc 01       	movw	r30, r24
    2538:	11 92       	st	Z+, r1

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
    253a:	11 92       	st	Z+, r1
    253c:	ae 16       	cp	r10, r30
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
    253e:	bf 06       	cpc	r11, r31
    2540:	d9 f7       	brne	.-10     	; 0x2538 <main+0x116>
    2542:	4e 01       	movw	r8, r28
    2544:	37 e8       	ldi	r19, 0x87	; 135
    2546:	83 1a       	sub	r8, r19
    2548:	3b ef       	ldi	r19, 0xFB	; 251
    254a:	93 0a       	sbc	r9, r19
    254c:	f5 01       	movw	r30, r10
    254e:	11 92       	st	Z+, r1
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
    2550:	11 92       	st	Z+, r1
    2552:	8e 16       	cp	r8, r30
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
    2554:	9f 06       	cpc	r9, r31
    2556:	d9 f7       	brne	.-10     	; 0x254e <main+0x12c>
    2558:	de 01       	movw	r26, r28
    255a:	55 96       	adiw	r26, 0x15	; 21
    255c:	fe 01       	movw	r30, r28
    255e:	eb 5e       	subi	r30, 0xEB	; 235
    2560:	fd 4f       	sbci	r31, 0xFD	; 253
    2562:	1d 92       	st	X+, r1
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
    2564:	ea 17       	cp	r30, r26
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
    2566:	fb 07       	cpc	r31, r27
    2568:	e1 f7       	brne	.-8      	; 0x2562 <main+0x140>
    256a:	11 92       	st	Z+, r1
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
    256c:	e8 17       	cp	r30, r24
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
    256e:	f9 07       	cpc	r31, r25
    2570:	e1 f7       	brne	.-8      	; 0x256a <main+0x148>
    2572:	fe 01       	movw	r30, r28
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
      data(0)
    2574:	e9 5c       	subi	r30, 0xC9	; 201
    2576:	f9 4f       	sbci	r31, 0xF9	; 249
    2578:	8e ef       	ldi	r24, 0xFE	; 254
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
    2580:	12 82       	std	Z+2, r1	; 0x02
    2582:	13 82       	std	Z+3, r1	; 0x03
    2584:	14 82       	std	Z+4, r1	; 0x04
    2586:	15 82       	std	Z+5, r1	; 0x05
    2588:	2b e6       	ldi	r18, 0x6B	; 107
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        has_flash_topic_( false ),
        msg_(msg),
        endpoint_(endpoint) 
    258a:	32 e0       	ldi	r19, 0x02	; 2
    258c:	cf 5f       	subi	r28, 0xFF	; 255
    258e:	d9 4f       	sbci	r29, 0xF9	; 249
    2590:	39 83       	std	Y+1, r19	; 0x01
    2592:	28 83       	st	Y, r18
    2594:	c1 50       	subi	r28, 0x01	; 1
    2596:	d6 40       	sbci	r29, 0x06	; 6
    2598:	cd 5f       	subi	r28, 0xFD	; 253
    259a:	d9 4f       	sbci	r29, 0xF9	; 249
    259c:	18 82       	st	Y, r1
    259e:	c3 50       	subi	r28, 0x03	; 3
    25a0:	d6 40       	sbci	r29, 0x06	; 6
    25a2:	cc 5f       	subi	r28, 0xFC	; 252
    25a4:	d9 4f       	sbci	r29, 0xF9	; 249
    25a6:	f9 83       	std	Y+1, r31	; 0x01
    25a8:	e8 83       	st	Y, r30
    25aa:	c4 50       	subi	r28, 0x04	; 4
    25ac:	d6 40       	sbci	r29, 0x06	; 6
    25ae:	c6 5f       	subi	r28, 0xF6	; 246
    25b0:	d9 4f       	sbci	r29, 0xF9	; 249
    25b2:	19 82       	std	Y+1, r1	; 0x01
    25b4:	18 82       	st	Y, r1
    25b6:	ca 50       	subi	r28, 0x0A	; 10
    25b8:	d6 40       	sbci	r29, 0x06	; 6
    25ba:	bb 97       	sbiw	r30, 0x2b	; 43
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
      data(0)
    25bc:	2a e0       	ldi	r18, 0x0A	; 10
    25be:	33 e0       	ldi	r19, 0x03	; 3
    25c0:	31 83       	std	Z+1, r19	; 0x01
    25c2:	20 83       	st	Z, r18
    25c4:	12 82       	std	Z+2, r1	; 0x02
    25c6:	13 82       	std	Z+3, r1	; 0x03
    25c8:	14 82       	std	Z+4, r1	; 0x04
    25ca:	15 82       	std	Z+5, r1	; 0x05
    25cc:	16 82       	std	Z+6, r1	; 0x06
    25ce:	17 82       	std	Z+7, r1	; 0x07
    25d0:	10 86       	std	Z+8, r1	; 0x08
    25d2:	11 86       	std	Z+9, r1	; 0x09
    25d4:	2a e7       	ldi	r18, 0x7A	; 122
    25d6:	32 e0       	ldi	r19, 0x02	; 2
    25d8:	ca 50       	subi	r28, 0x0A	; 10
    25da:	da 4f       	sbci	r29, 0xFA	; 250
    25dc:	39 83       	std	Y+1, r19	; 0x01
    25de:	28 83       	st	Y, r18
    25e0:	c6 5f       	subi	r28, 0xF6	; 246
    25e2:	d5 40       	sbci	r29, 0x05	; 5
    25e4:	c8 50       	subi	r28, 0x08	; 8
    25e6:	da 4f       	sbci	r29, 0xFA	; 250
    25e8:	18 82       	st	Y, r1
    25ea:	c8 5f       	subi	r28, 0xF8	; 248
    25ec:	d5 40       	sbci	r29, 0x05	; 5
    25ee:	c7 50       	subi	r28, 0x07	; 7
    25f0:	da 4f       	sbci	r29, 0xFA	; 250
    25f2:	f9 83       	std	Y+1, r31	; 0x01
    25f4:	e8 83       	st	Y, r30
    25f6:	c9 5f       	subi	r28, 0xF9	; 249
    25f8:	d5 40       	sbci	r29, 0x05	; 5
    25fa:	c1 50       	subi	r28, 0x01	; 1
    25fc:	da 4f       	sbci	r29, 0xFA	; 250
    25fe:	19 82       	std	Y+1, r1	; 0x01
    2600:	18 82       	st	Y, r1
    2602:	cf 5f       	subi	r28, 0xFF	; 255
    2604:	d5 40       	sbci	r29, 0x05	; 5
    2606:	b5 96       	adiw	r30, 0x25	; 37
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	12 82       	std	Z+2, r1	; 0x02
    260e:	13 82       	std	Z+3, r1	; 0x03
    2610:	14 82       	std	Z+4, r1	; 0x04
    2612:	15 82       	std	Z+5, r1	; 0x05
    2614:	29 e8       	ldi	r18, 0x89	; 137
    2616:	32 e0       	ldi	r19, 0x02	; 2
    2618:	c5 51       	subi	r28, 0x15	; 21
    261a:	da 4f       	sbci	r29, 0xFA	; 250
    261c:	39 83       	std	Y+1, r19	; 0x01
    261e:	28 83       	st	Y, r18
    2620:	cb 5e       	subi	r28, 0xEB	; 235
    2622:	d5 40       	sbci	r29, 0x05	; 5
    2624:	c3 51       	subi	r28, 0x13	; 19
    2626:	da 4f       	sbci	r29, 0xFA	; 250
    2628:	18 82       	st	Y, r1
    262a:	cd 5e       	subi	r28, 0xED	; 237
    262c:	d5 40       	sbci	r29, 0x05	; 5
    262e:	c2 51       	subi	r28, 0x12	; 18
    2630:	da 4f       	sbci	r29, 0xFA	; 250
    2632:	f9 83       	std	Y+1, r31	; 0x01
    2634:	e8 83       	st	Y, r30
    2636:	ce 5e       	subi	r28, 0xEE	; 238
    2638:	d5 40       	sbci	r29, 0x05	; 5
    263a:	cc 50       	subi	r28, 0x0C	; 12
    263c:	da 4f       	sbci	r29, 0xFA	; 250
    263e:	19 82       	std	Y+1, r1	; 0x01
    2640:	18 82       	st	Y, r1
    2642:	c4 5f       	subi	r28, 0xF4	; 244
    2644:	d5 40       	sbci	r29, 0x05	; 5
    2646:	6e 01       	movw	r12, r28
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
    2648:	46 e2       	ldi	r20, 0x26	; 38
    264a:	c4 1a       	sub	r12, r20
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	d4 0a       	sbc	r13, r20
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	53 e0       	ldi	r21, 0x03	; 3
    2654:	f6 01       	movw	r30, r12
    2656:	51 83       	std	Z+1, r21	; 0x01
    2658:	40 83       	st	Z, r20
    265a:	90 87       	std	Z+8, r25	; 0x08
    265c:	87 83       	std	Z+7, r24	; 0x07
    265e:	11 86       	std	Z+9, r1	; 0x09
    2660:	12 86       	std	Z+10, r1	; 0x0a
    2662:	13 86       	std	Z+11, r1	; 0x0b
    2664:	14 86       	std	Z+12, r1	; 0x0c
    2666:	2a ea       	ldi	r18, 0xAA	; 170
    2668:	37 e0       	ldi	r19, 0x07	; 7
    266a:	36 87       	std	Z+14, r19	; 0x0e
    266c:	25 87       	std	Z+13, r18	; 0x0d
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	30 8b       	std	Z+16, r19	; 0x10
    2674:	27 87       	std	Z+15, r18	; 0x0f
    2676:	69 e9       	ldi	r22, 0x99	; 153
      {
        topic_ = topic_name;
    2678:	72 e0       	ldi	r23, 0x02	; 2
    267a:	75 83       	std	Z+5, r23	; 0x05
    267c:	64 83       	std	Z+4, r22	; 0x04
    267e:	16 82       	std	Z+6, r1	; 0x06
        has_flash_topic_ = false;
    2680:	7e 01       	movw	r14, r28
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
    2682:	f7 e3       	ldi	r31, 0x37	; 55
    2684:	ef 1a       	sub	r14, r31
    2686:	fa ef       	ldi	r31, 0xFA	; 250
    2688:	ff 0a       	sbc	r15, r31
    268a:	f7 01       	movw	r30, r14
    268c:	51 83       	std	Z+1, r21	; 0x01
    268e:	40 83       	st	Z, r20
    2690:	90 87       	std	Z+8, r25	; 0x08
    2692:	87 83       	std	Z+7, r24	; 0x07
    2694:	11 86       	std	Z+9, r1	; 0x09
    2696:	12 86       	std	Z+10, r1	; 0x0a
    2698:	13 86       	std	Z+11, r1	; 0x0b
    269a:	14 86       	std	Z+12, r1	; 0x0c
    269c:	82 eb       	ldi	r24, 0xB2	; 178
    269e:	97 e0       	ldi	r25, 0x07	; 7
    26a0:	96 87       	std	Z+14, r25	; 0x0e
    26a2:	85 87       	std	Z+13, r24	; 0x0d
    26a4:	30 8b       	std	Z+16, r19	; 0x10
    26a6:	27 87       	std	Z+15, r18	; 0x0f
    26a8:	8b ea       	ldi	r24, 0xAB	; 171
      {
        topic_ = topic_name;
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	95 83       	std	Z+5, r25	; 0x05
    26ae:	84 83       	std	Z+4, r24	; 0x04
    26b0:	16 82       	std	Z+6, r1	; 0x06
        has_flash_topic_ = false;
    26b2:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z16createEventStorev>
	std_msgs::Int32 motorLeftVelovityMsg;
	std_msgs::Int32 motorRightVelovityMsg;
	ros::Subscriber<std_msgs::Int32> motorLeftVelSub("LeftWheelVelocity", &leftWheelVelCallback);
	ros::Subscriber<std_msgs::Int32> motorRightVelSub("RightWheelVelocity", &RightWheelVelCallback);
	
	event_type mainStore = createEventStore();
    26b6:	c3 5c       	subi	r28, 0xC3	; 195
    26b8:	d9 4f       	sbci	r29, 0xF9	; 249
    26ba:	99 83       	std	Y+1, r25	; 0x01
    26bc:	88 83       	st	Y, r24
    26be:	cd 53       	subi	r28, 0x3D	; 61
    26c0:	d6 40       	sbci	r29, 0x06	; 6
    26c2:	4d 81       	ldd	r20, Y+5	; 0x05
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    26c4:	5e 81       	ldd	r21, Y+6	; 0x06
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	26 e0       	ldi	r18, 0x06	; 6
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_ZN14HardwareSerial5beginEmh>
    26d4:	f4 01       	movw	r30, r8
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
    26d6:	11 82       	std	Z+1, r1	; 0x01
    26d8:	10 82       	st	Z, r1
    26da:	c5 58       	subi	r28, 0x85	; 133
        bytes_ = 0;
    26dc:	db 4f       	sbci	r29, 0xFB	; 251
    26de:	19 82       	std	Y+1, r1	; 0x01
    26e0:	18 82       	st	Y, r1
    26e2:	cb 57       	subi	r28, 0x7B	; 123
    26e4:	d4 40       	sbci	r29, 0x04	; 4
    26e6:	c1 58       	subi	r28, 0x81	; 129
        index_ = 0;
    26e8:	db 4f       	sbci	r29, 0xFB	; 251
    26ea:	19 82       	std	Y+1, r1	; 0x01
    26ec:	18 82       	st	Y, r1
    26ee:	cf 57       	subi	r28, 0x7F	; 127
    26f0:	d4 40       	sbci	r29, 0x04	; 4
    26f2:	c3 58       	subi	r28, 0x83	; 131
        topic_ = 0;
    26f4:	db 4f       	sbci	r29, 0xFB	; 251
    26f6:	19 82       	std	Y+1, r1	; 0x01
    26f8:	18 82       	st	Y, r1
    26fa:	cd 57       	subi	r28, 0x7D	; 125
    26fc:	d4 40       	sbci	r29, 0x04	; 4

	nh.initNode();
	
	nh.advertise(motorLeftTicksPub);
    26fe:	be 01       	movw	r22, r28
    2700:	6f 5f       	subi	r22, 0xFF	; 255
    2702:	79 4f       	sbci	r23, 0xF9	; 249
    2704:	ce 01       	movw	r24, r28
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	a1 d9       	rcall	.-3262   	; 0x1a4c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
	nh.advertise(motorRightTicksPub);
    270a:	be 01       	movw	r22, r28
    270c:	65 51       	subi	r22, 0x15	; 21
    270e:	7a 4f       	sbci	r23, 0xFA	; 250
    2710:	ce 01       	movw	r24, r28
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	9b d9       	rcall	.-3274   	; 0x1a4c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
	nh.advertise(UltraDistancesPub);
    2716:	be 01       	movw	r22, r28
    2718:	6a 50       	subi	r22, 0x0A	; 10
    271a:	7a 4f       	sbci	r23, 0xFA	; 250
    271c:	ce 01       	movw	r24, r28
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	95 d9       	rcall	.-3286   	; 0x1a4c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9advertiseERNS_9PublisherE>
    2722:	f5 01       	movw	r30, r10
    2724:	80 e0       	ldi	r24, 0x00	; 0
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	21 91       	ld	r18, Z+
          if(subscribers[i] == 0){ // empty slot
    272a:	31 91       	ld	r19, Z+
    272c:	23 2b       	or	r18, r19
    272e:	99 f4       	brne	.+38     	; 0x2756 <main+0x334>
    2730:	fc 01       	movw	r30, r24
            subscribers[i] = static_cast<Subscriber_*>(&s);
    2732:	ed 5d       	subi	r30, 0xDD	; 221
    2734:	fd 4f       	sbci	r31, 0xFD	; 253
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	21 e0       	ldi	r18, 0x01	; 1
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	2c 0f       	add	r18, r28
    2740:	3d 1f       	adc	r19, r29
    2742:	e2 0f       	add	r30, r18
    2744:	f3 1f       	adc	r31, r19
    2746:	d1 82       	std	Z+1, r13	; 0x01
    2748:	c0 82       	st	Z, r12
    274a:	8c 59       	subi	r24, 0x9C	; 156
            s.id_ = i+100;
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	f6 01       	movw	r30, r12
    2750:	93 83       	std	Z+3, r25	; 0x03
    2752:	82 83       	std	Z+2, r24	; 0x02
    2754:	04 c0       	rjmp	.+8      	; 0x275e <main+0x33c>
    2756:	01 96       	adiw	r24, 0x01	; 1
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    2758:	89 31       	cpi	r24, 0x19	; 25
    275a:	91 05       	cpc	r25, r1
    275c:	29 f7       	brne	.-54     	; 0x2728 <main+0x306>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	f5 01       	movw	r30, r10
          if(subscribers[i] == 0){ // empty slot
    2764:	21 91       	ld	r18, Z+
    2766:	31 91       	ld	r19, Z+
    2768:	5f 01       	movw	r10, r30
    276a:	23 2b       	or	r18, r19
    276c:	99 f4       	brne	.+38     	; 0x2794 <main+0x372>
    276e:	fc 01       	movw	r30, r24
            subscribers[i] = static_cast<Subscriber_*>(&s);
    2770:	ed 5d       	subi	r30, 0xDD	; 221
    2772:	fd 4f       	sbci	r31, 0xFD	; 253
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	2c 0f       	add	r18, r28
    277e:	3d 1f       	adc	r19, r29
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	f1 82       	std	Z+1, r15	; 0x01
    2786:	e0 82       	st	Z, r14
    2788:	8c 59       	subi	r24, 0x9C	; 156
            s.id_ = i+100;
    278a:	9f 4f       	sbci	r25, 0xFF	; 255
    278c:	f7 01       	movw	r30, r14
    278e:	93 83       	std	Z+3, r25	; 0x03
    2790:	82 83       	std	Z+2, r24	; 0x02
    2792:	04 c0       	rjmp	.+8      	; 0x279c <main+0x37a>
      }

      /* Register a new subscriber */
      template<typename SubscriberT>
      bool subscribe(SubscriberT& s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	89 31       	cpi	r24, 0x19	; 25
    2798:	91 05       	cpc	r25, r1
    279a:	19 f7       	brne	.-58     	; 0x2762 <main+0x340>
	nh.advertise(ultraMiddlePublisher);
	nh.advertise(ultraRightPublisher);*/

	//Serial.begin(57900);

	Ultra_Sonic_Range_Finder_Driver ultraLeft = Ultra_Sonic_Range_Finder_Driver(INT_2);
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	ce 01       	movw	r24, r28
    27a0:	88 5d       	subi	r24, 0xD8	; 216
    27a2:	99 4f       	sbci	r25, 0xF9	; 249
    27a4:	2c d6       	rcall	.+3160   	; 0x33fe <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>
	Ultra_Sonic_Range_Finder_Driver ultraMiddle = Ultra_Sonic_Range_Finder_Driver(INT_3);
    27a6:	63 e0       	ldi	r22, 0x03	; 3
    27a8:	ce 01       	movw	r24, r28
    27aa:	81 5e       	subi	r24, 0xE1	; 225
    27ac:	99 4f       	sbci	r25, 0xF9	; 249
    27ae:	27 d6       	rcall	.+3150   	; 0x33fe <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>
    27b0:	65 e0       	ldi	r22, 0x05	; 5
	Ultra_Sonic_Range_Finder_Driver ultraRight = Ultra_Sonic_Range_Finder_Driver(INT_5);
    27b2:	ce 01       	movw	r24, r28
    27b4:	8a 5e       	subi	r24, 0xEA	; 234
    27b6:	99 4f       	sbci	r25, 0xF9	; 249
    27b8:	22 d6       	rcall	.+3140   	; 0x33fe <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
	
	//motorLeft.setDirection(CLOCKWISE);
	motorLeft.setPwmDutyCycle(0);
    27be:	88 e5       	ldi	r24, 0x58	; 88
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    27c6:	88 e5       	ldi	r24, 0x58	; 88
    27c8:	93 e0       	ldi	r25, 0x03	; 3
	motorLeft.startMotor();
    27ca:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	70 e0       	ldi	r23, 0x00	; 0
	//motor_0.stopMotor();
	
	//motorRight.setDirection(COUNTERCLOCKWISE);
	motorRight.setPwmDutyCycle(0);
    27d2:	82 e4       	ldi	r24, 0x42	; 66
    27d4:	93 e0       	ldi	r25, 0x03	; 3
    27d6:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    27da:	82 e4       	ldi	r24, 0x42	; 66
    27dc:	93 e0       	ldi	r25, 0x03	; 3
	motorRight.startMotor();
    27de:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN15DC_Motor_Driver10startMotorEv>
    27e2:	47 e3       	ldi	r20, 0x37	; 55
    27e4:	54 e0       	ldi	r21, 0x04	; 4
	//motor_1.stopMotor();
	
	uint8_t up = 1;
	
	Encoder_Tracker Tracker_MotorLeft = Encoder_Tracker(50, PPR_MOTOR_LEFT);
    27e6:	62 e3       	ldi	r22, 0x32	; 50
    27e8:	ce 01       	movw	r24, r28
    27ea:	86 57       	subi	r24, 0x76	; 118
    27ec:	9a 4f       	sbci	r25, 0xFA	; 250
    27ee:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN15Encoder_TrackerC1Ehj>
    27f2:	1f 92       	push	r1
    27f4:	1f 92       	push	r1
	PidController PID_MotorLeft = PidController(0.122, 0.200, 0, 20, MIN_ERROR_MOTOR_LEFT, MAX_ERROR_MOTOR_LEFT, MIN_CONTROL_VALUE_MOTOR_LEFT, MAX_CONTROL_VALUE_MOTOR_LEFT); //(0.03, 0.011, 0.0, 20, 0, 7269, 730, 7999)
    27f6:	ff e1       	ldi	r31, 0x1F	; 31
    27f8:	ff 93       	push	r31
    27fa:	2f e3       	ldi	r18, 0x3F	; 63
    27fc:	2f 93       	push	r18
    27fe:	bb 24       	eor	r11, r11
    2800:	ba 94       	dec	r11
    2802:	bf 92       	push	r11
    2804:	bf 92       	push	r11
    2806:	80 ee       	ldi	r24, 0xE0	; 224
    2808:	48 2e       	mov	r4, r24
    280a:	4f 92       	push	r4
    280c:	91 ec       	ldi	r25, 0xC1	; 193
    280e:	59 2e       	mov	r5, r25
    2810:	5f 92       	push	r5
    2812:	1f 92       	push	r1
    2814:	23 e0       	ldi	r18, 0x03	; 3
    2816:	62 2e       	mov	r6, r18
    2818:	6f 92       	push	r6
    281a:	3a e4       	ldi	r19, 0x4A	; 74
    281c:	73 2e       	mov	r7, r19
    281e:	7f 92       	push	r7
    2820:	48 ef       	ldi	r20, 0xF8	; 248
    2822:	84 2e       	mov	r8, r20
    2824:	8f 92       	push	r8
    2826:	bf 92       	push	r11
    2828:	5c ef       	ldi	r21, 0xFC	; 252
    282a:	95 2e       	mov	r9, r21
    282c:	9f 92       	push	r9
    282e:	35 eb       	ldi	r19, 0xB5	; 181
    2830:	3f 93       	push	r19
    2832:	48 e0       	ldi	r20, 0x08	; 8
    2834:	4f 93       	push	r20
    2836:	64 e1       	ldi	r22, 0x14	; 20
    2838:	a6 2e       	mov	r10, r22
    283a:	c1 2c       	mov	r12, r1
    283c:	d1 2c       	mov	r13, r1
    283e:	76 01       	movw	r14, r12
    2840:	0d ec       	ldi	r16, 0xCD	; 205
    2842:	1c ec       	ldi	r17, 0xCC	; 204
    2844:	2c e4       	ldi	r18, 0x4C	; 76
    2846:	3e e3       	ldi	r19, 0x3E	; 62
    2848:	43 e2       	ldi	r20, 0x23	; 35
    284a:	5b ed       	ldi	r21, 0xDB	; 219
    284c:	69 ef       	ldi	r22, 0xF9	; 249
    284e:	7d e3       	ldi	r23, 0x3D	; 61
    2850:	ce 01       	movw	r24, r28
    2852:	83 50       	subi	r24, 0x03	; 3
    2854:	9b 4f       	sbci	r25, 0xFB	; 251
    2856:	cf d1       	rcall	.+926    	; 0x2bf6 <_ZN13PidControllerC1Efffhllll>
    2858:	47 e3       	ldi	r20, 0x37	; 55
    285a:	54 e0       	ldi	r21, 0x04	; 4
	
	Encoder_Tracker Tracker_MotorRight = Encoder_Tracker(50, PPR_MOTOR_RIGHT);
    285c:	62 e3       	ldi	r22, 0x32	; 50
    285e:	ce 01       	movw	r24, r28
    2860:	85 5b       	subi	r24, 0xB5	; 181
    2862:	9a 4f       	sbci	r25, 0xFA	; 250
    2864:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN15Encoder_TrackerC1Ehj>
    2868:	1f 92       	push	r1
    286a:	1f 92       	push	r1
	PidController PID_MotorRight = PidController(0.122, 0.200, 0, 20, MIN_ERROR_MOTOR_RIGHT, MAX_ERROR_MOTOR_RIGHT, MIN_CONTROL_VALUE_MOTOR_RIGHT, MAX_CONTROL_VALUE_MOTOR_RIGHT); //(0.050, 0.009, 0.0, 20, 0, 7269, 730, 7999)
    286c:	5f e1       	ldi	r21, 0x1F	; 31
    286e:	5f 93       	push	r21
    2870:	6f e3       	ldi	r22, 0x3F	; 63
    2872:	6f 93       	push	r22
    2874:	bf 92       	push	r11
    2876:	bf 92       	push	r11
    2878:	4f 92       	push	r4
    287a:	5f 92       	push	r5
    287c:	1f 92       	push	r1
    287e:	6f 92       	push	r6
    2880:	7f 92       	push	r7
    2882:	8f 92       	push	r8
    2884:	bf 92       	push	r11
    2886:	9f 92       	push	r9
    2888:	85 eb       	ldi	r24, 0xB5	; 181
    288a:	8f 93       	push	r24
    288c:	98 e0       	ldi	r25, 0x08	; 8
    288e:	9f 93       	push	r25
    2890:	0d ec       	ldi	r16, 0xCD	; 205
    2892:	1c ec       	ldi	r17, 0xCC	; 204
    2894:	2c e4       	ldi	r18, 0x4C	; 76
    2896:	3e e3       	ldi	r19, 0x3E	; 62
    2898:	43 e2       	ldi	r20, 0x23	; 35
    289a:	5b ed       	ldi	r21, 0xDB	; 219
    289c:	69 ef       	ldi	r22, 0xF9	; 249
    289e:	7d e3       	ldi	r23, 0x3D	; 61
    28a0:	ce 01       	movw	r24, r28
    28a2:	81 55       	subi	r24, 0x51	; 81
    28a4:	9b 4f       	sbci	r25, 0xFB	; 251
    28a6:	a7 d1       	rcall	.+846    	; 0x2bf6 <_ZN13PidControllerC1Efffhllll>
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
	
	motorLeft.setTargetRPM(10);
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	4a e0       	ldi	r20, 0x0A	; 10
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	88 e5       	ldi	r24, 0x58	; 88
    28bc:	93 e0       	ldi	r25, 0x03	; 3
    28be:	0e 94 43 01 	call	0x286	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
    28c2:	46 ef       	ldi	r20, 0xF6	; 246
    28c4:	5f ef       	ldi	r21, 0xFF	; 255
	motorRight.setTargetRPM(-10);
    28c6:	6f ef       	ldi	r22, 0xFF	; 255
    28c8:	7f ef       	ldi	r23, 0xFF	; 255
    28ca:	82 e4       	ldi	r24, 0x42	; 66
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	0e 94 43 01 	call	0x286	; 0x286 <_ZN15DC_Motor_Driver12setTargetRPMEl>
    28d2:	15 e0       	ldi	r17, 0x05	; 5

	
	int16_t countHelp = 0;
	int16_t run = 1;
	int8_t turning = 0;
	uint8_t mode = TELEOP_MODE;
    28d4:	c1 5c       	subi	r28, 0xC1	; 193
	
	uint16_t loopCount=0;
	
	while(1)
	{
		if(timerElapsed(motorControlTimerId))
    28d6:	d9 4f       	sbci	r29, 0xF9	; 249
    28d8:	88 81       	ld	r24, Y
    28da:	cf 53       	subi	r28, 0x3F	; 63
    28dc:	d6 40       	sbci	r29, 0x06	; 6
    28de:	68 d5       	rcall	.+2768   	; 0x33b0 <_Z12timerElapsedh>
    28e0:	88 23       	and	r24, r24
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <main+0x4c4>
    28e4:	99 c0       	rjmp	.+306    	; 0x2a18 <main+0x5f6>
    28e6:	c1 5c       	subi	r28, 0xC1	; 193
		{
			loopCount++;
			clearTimerElapsed(motorControlTimerId);
    28e8:	d9 4f       	sbci	r29, 0xF9	; 249
    28ea:	88 81       	ld	r24, Y
    28ec:	cf 53       	subi	r28, 0x3F	; 63
    28ee:	d6 40       	sbci	r29, 0x06	; 6
    28f0:	68 d5       	rcall	.+2768   	; 0x33c2 <_Z17clearTimerElapsedh>
    28f2:	88 e5       	ldi	r24, 0x58	; 88
    28f4:	93 e0       	ldi	r25, 0x03	; 3
			
			int32_t ticksLeft = motorLeft.getEncoderCount();
    28f6:	0e 94 81 03 	call	0x702	; 0x702 <_ZN15DC_Motor_Driver15getEncoderCountEv>
    28fa:	4b 01       	movw	r8, r22
    28fc:	5c 01       	movw	r10, r24
    28fe:	82 e4       	ldi	r24, 0x42	; 66
    2900:	93 e0       	ldi	r25, 0x03	; 3
			int32_t ticksRight = motorRight.getEncoderCount();
    2902:	0e 94 81 03 	call	0x702	; 0x702 <_ZN15DC_Motor_Driver15getEncoderCountEv>
    2906:	2b 01       	movw	r4, r22
    2908:	3c 01       	movw	r6, r24
    290a:	b5 01       	movw	r22, r10
    290c:	a4 01       	movw	r20, r8
			Tracker_MotorLeft.Track(ticksLeft);
    290e:	ce 01       	movw	r24, r28
    2910:	86 57       	subi	r24, 0x76	; 118
    2912:	9a 4f       	sbci	r25, 0xFA	; 250
    2914:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN15Encoder_Tracker5TrackEl>
    2918:	b3 01       	movw	r22, r6
    291a:	a2 01       	movw	r20, r4
			Tracker_MotorRight.Track(ticksRight);			
    291c:	ce 01       	movw	r24, r28
    291e:	85 5b       	subi	r24, 0xB5	; 181
    2920:	9a 4f       	sbci	r25, 0xFA	; 250
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN15Encoder_Tracker5TrackEl>
    2926:	88 e5       	ldi	r24, 0x58	; 88
    2928:	93 e0       	ldi	r25, 0x03	; 3
			
			int32_t error_motor_left = motorLeft.getTargetPPM()-Tracker_MotorLeft.getPPM();
    292a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN15DC_Motor_Driver12getTargetPPMEv>
    292e:	6b 01       	movw	r12, r22
    2930:	7c 01       	movw	r14, r24
    2932:	ce 01       	movw	r24, r28
    2934:	86 57       	subi	r24, 0x76	; 118
    2936:	9a 4f       	sbci	r25, 0xFA	; 250
    2938:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN15Encoder_Tracker6getPPMEv>
    293c:	a7 01       	movw	r20, r14
    293e:	96 01       	movw	r18, r12
    2940:	26 1b       	sub	r18, r22
    2942:	37 0b       	sbc	r19, r23
    2944:	48 0b       	sbc	r20, r24
    2946:	59 0b       	sbc	r21, r25
    2948:	cf 5b       	subi	r28, 0xBF	; 191
    294a:	d9 4f       	sbci	r29, 0xF9	; 249
    294c:	28 83       	st	Y, r18
    294e:	39 83       	std	Y+1, r19	; 0x01
    2950:	4a 83       	std	Y+2, r20	; 0x02
    2952:	5b 83       	std	Y+3, r21	; 0x03
    2954:	c1 54       	subi	r28, 0x41	; 65
    2956:	d6 40       	sbci	r29, 0x06	; 6
    2958:	82 e4       	ldi	r24, 0x42	; 66
    295a:	93 e0       	ldi	r25, 0x03	; 3
			int32_t error_motor_right = motorRight.getTargetPPM()-Tracker_MotorRight.getPPM();
    295c:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN15DC_Motor_Driver12getTargetPPMEv>
    2960:	6b 01       	movw	r12, r22
    2962:	7c 01       	movw	r14, r24
    2964:	ce 01       	movw	r24, r28
    2966:	85 5b       	subi	r24, 0xB5	; 181
    2968:	9a 4f       	sbci	r25, 0xFA	; 250
    296a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN15Encoder_Tracker6getPPMEv>
    296e:	c6 1a       	sub	r12, r22
    2970:	d7 0a       	sbc	r13, r23
    2972:	e8 0a       	sbc	r14, r24
    2974:	f9 0a       	sbc	r15, r25
    2976:	cf 5b       	subi	r28, 0xBF	; 191
			
			motorLeft.setPwmDutyCycle(PID_MotorLeft.Control(error_motor_left)); //1650
    2978:	d9 4f       	sbci	r29, 0xF9	; 249
    297a:	48 81       	ld	r20, Y
    297c:	59 81       	ldd	r21, Y+1	; 0x01
    297e:	6a 81       	ldd	r22, Y+2	; 0x02
    2980:	7b 81       	ldd	r23, Y+3	; 0x03
    2982:	c1 54       	subi	r28, 0x41	; 65
    2984:	d6 40       	sbci	r29, 0x06	; 6
    2986:	ce 01       	movw	r24, r28
    2988:	83 50       	subi	r24, 0x03	; 3
    298a:	9b 4f       	sbci	r25, 0xFB	; 251
    298c:	a3 d1       	rcall	.+838    	; 0x2cd4 <_ZN13PidController7ControlEl>
    298e:	bc 01       	movw	r22, r24
    2990:	88 e5       	ldi	r24, 0x58	; 88
    2992:	93 e0       	ldi	r25, 0x03	; 3
    2994:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    2998:	b7 01       	movw	r22, r14
			motorRight.setPwmDutyCycle(PID_MotorRight.Control(error_motor_right)); //1420
    299a:	a6 01       	movw	r20, r12
    299c:	ce 01       	movw	r24, r28
    299e:	81 55       	subi	r24, 0x51	; 81
    29a0:	9b 4f       	sbci	r25, 0xFB	; 251
    29a2:	98 d1       	rcall	.+816    	; 0x2cd4 <_ZN13PidController7ControlEl>
    29a4:	bc 01       	movw	r22, r24
    29a6:	82 e4       	ldi	r24, 0x42	; 66
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN15DC_Motor_Driver15setPwmDutyCycleEi>
    29ae:	c7 5c       	subi	r28, 0xC7	; 199
    29b0:	d9 4f       	sbci	r29, 0xF9	; 249
			
			motorLeftTicksMsg.data = ticksLeft;
    29b2:	88 82       	st	Y, r8
    29b4:	99 82       	std	Y+1, r9	; 0x01
    29b6:	aa 82       	std	Y+2, r10	; 0x02
    29b8:	bb 82       	std	Y+3, r11	; 0x03
    29ba:	c9 53       	subi	r28, 0x39	; 57
    29bc:	d6 40       	sbci	r29, 0x06	; 6
    29be:	70 94       	com	r7
    29c0:	60 94       	com	r6
			motorRightTicksMsg.data = -ticksRight;
    29c2:	50 94       	com	r5
    29c4:	40 94       	com	r4
    29c6:	41 1c       	adc	r4, r1
    29c8:	51 1c       	adc	r5, r1
    29ca:	61 1c       	adc	r6, r1
    29cc:	71 1c       	adc	r7, r1
    29ce:	cd 5c       	subi	r28, 0xCD	; 205
    29d0:	d9 4f       	sbci	r29, 0xF9	; 249
    29d2:	48 82       	st	Y, r4
    29d4:	59 82       	std	Y+1, r5	; 0x01
    29d6:	6a 82       	std	Y+2, r6	; 0x02
    29d8:	7b 82       	std	Y+3, r7	; 0x03
    29da:	c3 53       	subi	r28, 0x33	; 51
    29dc:	d6 40       	sbci	r29, 0x06	; 6
    29de:	be 01       	movw	r22, r28
    29e0:	69 5c       	subi	r22, 0xC9	; 201
			
			motorLeftTicksPub.publish(&motorLeftTicksMsg);
    29e2:	79 4f       	sbci	r23, 0xF9	; 249
    29e4:	ce 01       	movw	r24, r28
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
    29e8:	99 4f       	sbci	r25, 0xF9	; 249
    29ea:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    29ee:	be 01       	movw	r22, r28
    29f0:	6f 5c       	subi	r22, 0xCF	; 207
			motorRightTicksPub.publish(&motorRightTicksMsg);
    29f2:	79 4f       	sbci	r23, 0xF9	; 249
    29f4:	ce 01       	movw	r24, r28
    29f6:	85 51       	subi	r24, 0x15	; 21
    29f8:	9a 4f       	sbci	r25, 0xFA	; 250
    29fa:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    29fe:	ce 01       	movw	r24, r28
			
			
			
			//Tracker_1.getRpm()
		
			motorLeftMsg.data = Tracker_MotorLeft.getRPM();
    2a00:	86 57       	subi	r24, 0x76	; 118
    2a02:	9a 4f       	sbci	r25, 0xFA	; 250
    2a04:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN15Encoder_Tracker6getRPMEv>
			motorRightMsg.data = Tracker_MotorRight.getRPM();
    2a08:	ce 01       	movw	r24, r28
    2a0a:	85 5b       	subi	r24, 0xB5	; 181
    2a0c:	9a 4f       	sbci	r25, 0xFA	; 250
    2a0e:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN15Encoder_Tracker6getRPMEv>
			//Serial.print(mode);
			//Serial.print("    ");
			//Serial.print(Tracker_MotorRight.getRPM());
			//Serial.write('\n');
			
			nh.spinOnce();
    2a12:	ce 01       	movw	r24, r28
    2a14:	01 96       	adiw	r24, 0x01	; 1
		}
			
			
			
		
		if (timerElapsed(ultraTimerId))
    2a16:	00 db       	rcall	.-2560   	; 0x2018 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>
    2a18:	c0 5c       	subi	r28, 0xC0	; 192
    2a1a:	d9 4f       	sbci	r29, 0xF9	; 249
    2a1c:	88 81       	ld	r24, Y
    2a1e:	c0 54       	subi	r28, 0x40	; 64
    2a20:	d6 40       	sbci	r29, 0x06	; 6
    2a22:	c6 d4       	rcall	.+2444   	; 0x33b0 <_Z12timerElapsedh>
    2a24:	88 23       	and	r24, r24
		{
			clearTimerElapsed(ultraTimerId);
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <main+0x608>
    2a28:	99 c0       	rjmp	.+306    	; 0x2b5c <main+0x73a>
    2a2a:	c0 5c       	subi	r28, 0xC0	; 192
    2a2c:	d9 4f       	sbci	r29, 0xF9	; 249
    2a2e:	88 81       	ld	r24, Y
    2a30:	c0 54       	subi	r28, 0x40	; 64
			ultraLeft.pullTrigger();
    2a32:	d6 40       	sbci	r29, 0x06	; 6
    2a34:	c6 d4       	rcall	.+2444   	; 0x33c2 <_Z17clearTimerElapsedh>
    2a36:	ce 01       	movw	r24, r28
    2a38:	88 5d       	subi	r24, 0xD8	; 216
			ultraMiddle.pullTrigger();
    2a3a:	99 4f       	sbci	r25, 0xF9	; 249
    2a3c:	5b d5       	rcall	.+2742   	; 0x34f4 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
    2a3e:	ce 01       	movw	r24, r28
    2a40:	81 5e       	subi	r24, 0xE1	; 225
			ultraRight.pullTrigger();
    2a42:	99 4f       	sbci	r25, 0xF9	; 249
    2a44:	57 d5       	rcall	.+2734   	; 0x34f4 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
    2a46:	ce 01       	movw	r24, r28
    2a48:	8a 5e       	subi	r24, 0xEA	; 234
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a4a:	99 4f       	sbci	r25, 0xF9	; 249
    2a4c:	53 d5       	rcall	.+2726   	; 0x34f4 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>
    2a4e:	35 e3       	ldi	r19, 0x35	; 53
    2a50:	3a 95       	dec	r19
			_delay_us(10);
			ultraLeft.stopTriggering();
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <main+0x62e>
    2a54:	00 00       	nop
    2a56:	ce 01       	movw	r24, r28
    2a58:	88 5d       	subi	r24, 0xD8	; 216
			ultraMiddle.stopTriggering();
    2a5a:	99 4f       	sbci	r25, 0xF9	; 249
    2a5c:	5e d5       	rcall	.+2748   	; 0x351a <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    2a5e:	ce 01       	movw	r24, r28
    2a60:	81 5e       	subi	r24, 0xE1	; 225
			ultraRight.stopTriggering();
    2a62:	99 4f       	sbci	r25, 0xF9	; 249
    2a64:	5a d5       	rcall	.+2740   	; 0x351a <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    2a66:	ce 01       	movw	r24, r28
    2a68:	8a 5e       	subi	r24, 0xEA	; 234
    2a6a:	99 4f       	sbci	r25, 0xF9	; 249
			
			int64_t distLeft = ultraLeft.getDistance();
    2a6c:	56 d5       	rcall	.+2732   	; 0x351a <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	88 5d       	subi	r24, 0xD8	; 216
    2a72:	99 4f       	sbci	r25, 0xF9	; 249
    2a74:	67 d5       	rcall	.+2766   	; 0x3544 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    2a76:	e9 2e       	mov	r14, r25
    2a78:	d8 2e       	mov	r13, r24
    2a7a:	f9 2e       	mov	r15, r25
    2a7c:	ff 0c       	add	r15, r15
    2a7e:	ff 08       	sbc	r15, r15
			int64_t distMiddle = ultraMiddle.getDistance();
    2a80:	ce 01       	movw	r24, r28
    2a82:	81 5e       	subi	r24, 0xE1	; 225
    2a84:	99 4f       	sbci	r25, 0xF9	; 249
    2a86:	5e d5       	rcall	.+2748   	; 0x3544 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    2a88:	b8 2e       	mov	r11, r24
    2a8a:	c9 2e       	mov	r12, r25
    2a8c:	ce 01       	movw	r24, r28
			int64_t distRight = ultraRight.getDistance();
    2a8e:	8a 5e       	subi	r24, 0xEA	; 234
    2a90:	99 4f       	sbci	r25, 0xF9	; 249
    2a92:	58 d5       	rcall	.+2736   	; 0x3544 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>
    2a94:	78 2e       	mov	r7, r24
    2a96:	89 2e       	mov	r8, r25
    2a98:	2b 2d       	mov	r18, r11
    2a9a:	9c 2d       	mov	r25, r12
			
			int64_t distancesUltra = distLeft;
			distancesUltra |= (distMiddle << 16);
			distancesUltra |= (distRight << 32);
			
			UltraDistancesMsg.data = distancesUltra;
    2a9c:	99 0f       	add	r25, r25
    2a9e:	99 0b       	sbc	r25, r25
    2aa0:	3c 2d       	mov	r19, r12
    2aa2:	49 2f       	mov	r20, r25
    2aa4:	59 2f       	mov	r21, r25
    2aa6:	69 2f       	mov	r22, r25
    2aa8:	79 2f       	mov	r23, r25
    2aaa:	89 2f       	mov	r24, r25
    2aac:	00 e1       	ldi	r16, 0x10	; 16
    2aae:	0e 94 80 20 	call	0x4100	; 0x4100 <__ashldi3>
    2ab2:	92 2e       	mov	r9, r18
    2ab4:	a3 2e       	mov	r10, r19
    2ab6:	b4 2e       	mov	r11, r20
    2ab8:	c5 2e       	mov	r12, r21
    2aba:	b6 2f       	mov	r27, r22
    2abc:	a7 2f       	mov	r26, r23
    2abe:	fc 01       	movw	r30, r24
    2ac0:	27 2d       	mov	r18, r7
    2ac2:	98 2d       	mov	r25, r8
    2ac4:	99 0f       	add	r25, r25
    2ac6:	99 0b       	sbc	r25, r25
    2ac8:	38 2d       	mov	r19, r8
    2aca:	49 2f       	mov	r20, r25
    2acc:	59 2f       	mov	r21, r25
    2ace:	69 2f       	mov	r22, r25
    2ad0:	79 2f       	mov	r23, r25
    2ad2:	89 2f       	mov	r24, r25
    2ad4:	00 e2       	ldi	r16, 0x20	; 32
    2ad6:	0e 94 80 20 	call	0x4100	; 0x4100 <__ashldi3>
    2ada:	92 2a       	or	r9, r18
    2adc:	a3 2a       	or	r10, r19
    2ade:	4b 29       	or	r20, r11
    2ae0:	5c 29       	or	r21, r12
    2ae2:	6b 2b       	or	r22, r27
    2ae4:	7a 2b       	or	r23, r26
    2ae6:	8e 2b       	or	r24, r30
    2ae8:	9f 2b       	or	r25, r31
    2aea:	d9 28       	or	r13, r9
    2aec:	ea 28       	or	r14, r10
    2aee:	4f 29       	or	r20, r15
    2af0:	5f 29       	or	r21, r15
    2af2:	6f 29       	or	r22, r15
    2af4:	7f 29       	or	r23, r15
    2af6:	e8 2f       	mov	r30, r24
    2af8:	ef 29       	or	r30, r15
    2afa:	f9 2a       	or	r15, r25
    2afc:	c2 5f       	subi	r28, 0xF2	; 242
    2afe:	d9 4f       	sbci	r29, 0xF9	; 249
    2b00:	d8 82       	st	Y, r13
    2b02:	ce 50       	subi	r28, 0x0E	; 14
    2b04:	d6 40       	sbci	r29, 0x06	; 6
    2b06:	c1 5f       	subi	r28, 0xF1	; 241
    2b08:	d9 4f       	sbci	r29, 0xF9	; 249
    2b0a:	e8 82       	st	Y, r14
    2b0c:	cf 50       	subi	r28, 0x0F	; 15
    2b0e:	d6 40       	sbci	r29, 0x06	; 6
    2b10:	c0 5f       	subi	r28, 0xF0	; 240
    2b12:	d9 4f       	sbci	r29, 0xF9	; 249
    2b14:	48 83       	st	Y, r20
    2b16:	c0 51       	subi	r28, 0x10	; 16
    2b18:	d6 40       	sbci	r29, 0x06	; 6
    2b1a:	cf 5e       	subi	r28, 0xEF	; 239
    2b1c:	d9 4f       	sbci	r29, 0xF9	; 249
    2b1e:	58 83       	st	Y, r21
    2b20:	c1 51       	subi	r28, 0x11	; 17
    2b22:	d6 40       	sbci	r29, 0x06	; 6
    2b24:	ce 5e       	subi	r28, 0xEE	; 238
    2b26:	d9 4f       	sbci	r29, 0xF9	; 249
    2b28:	68 83       	st	Y, r22
    2b2a:	c2 51       	subi	r28, 0x12	; 18
    2b2c:	d6 40       	sbci	r29, 0x06	; 6
    2b2e:	cd 5e       	subi	r28, 0xED	; 237
    2b30:	d9 4f       	sbci	r29, 0xF9	; 249
    2b32:	78 83       	st	Y, r23
    2b34:	c3 51       	subi	r28, 0x13	; 19
    2b36:	d6 40       	sbci	r29, 0x06	; 6
    2b38:	cc 5e       	subi	r28, 0xEC	; 236
    2b3a:	d9 4f       	sbci	r29, 0xF9	; 249
    2b3c:	e8 83       	st	Y, r30
    2b3e:	c4 51       	subi	r28, 0x14	; 20
    2b40:	d6 40       	sbci	r29, 0x06	; 6
    2b42:	cb 5e       	subi	r28, 0xEB	; 235
    2b44:	d9 4f       	sbci	r29, 0xF9	; 249
    2b46:	f8 82       	st	Y, r15
    2b48:	c5 51       	subi	r28, 0x15	; 21
			
			UltraDistancesPub.publish(&UltraDistancesMsg);
    2b4a:	d6 40       	sbci	r29, 0x06	; 6
    2b4c:	be 01       	movw	r22, r28
    2b4e:	64 5f       	subi	r22, 0xF4	; 244
    2b50:	79 4f       	sbci	r23, 0xF9	; 249
    2b52:	ce 01       	movw	r24, r28
    2b54:	8a 50       	subi	r24, 0x0A	; 10
			Serial.print('\n');*/
			
			//nh.spinOnce();*/
		}
		
			if(timerElapsed(stuckTimerId))
    2b56:	9a 4f       	sbci	r25, 0xFA	; 250
    2b58:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    2b5c:	82 2d       	mov	r24, r2
			{
				clearTimerElapsed(stuckTimerId);
    2b5e:	28 d4       	rcall	.+2128   	; 0x33b0 <_Z12timerElapsedh>
    2b60:	88 23       	and	r24, r24
    2b62:	b9 f0       	breq	.+46     	; 0x2b92 <main+0x770>
				/*if(!eventIsSet(GOT_STUCK_EVENT, &mainStore))
				{
					setEvent(GOT_STUCK_EVENT, &mainStore);
				}*/
				
				if(mode != UNSTUCK_MODE)
    2b64:	82 2d       	mov	r24, r2
    2b66:	2d d4       	rcall	.+2138   	; 0x33c2 <_Z17clearTimerElapsedh>
				{
					mode = UNSTUCK_MODE;
					turnRight(&motorLeft, &motorRight);
    2b68:	12 30       	cpi	r17, 0x02	; 2
    2b6a:	71 f0       	breq	.+28     	; 0x2b88 <main+0x766>
    2b6c:	62 e4       	ldi	r22, 0x42	; 66
    2b6e:	73 e0       	ldi	r23, 0x03	; 3
    2b70:	88 e5       	ldi	r24, 0x58	; 88
    2b72:	93 e0       	ldi	r25, 0x03	; 3
					turning = 1;
					setTimerPeriod(stuckTimerId, 4000);
    2b74:	0e 94 2c 08 	call	0x1058	; 0x1058 <_Z9turnRightP15DC_Motor_DriverS0_>
    2b78:	60 ea       	ldi	r22, 0xA0	; 160
    2b7a:	7f e0       	ldi	r23, 0x0F	; 15
					startTimer(stuckTimerId);
    2b7c:	82 2d       	mov	r24, r2
    2b7e:	2a d4       	rcall	.+2132   	; 0x33d4 <_Z14setTimerPeriodhj>
					setEvent(GOT_STUCK_EVENT, &mainStore);
				}*/
				
				if(mode != UNSTUCK_MODE)
				{
					mode = UNSTUCK_MODE;
    2b80:	82 2d       	mov	r24, r2
    2b82:	fa d3       	rcall	.+2036   	; 0x3378 <_Z10startTimerh>
					startTimer(stuckTimerId);
				}
				else
				{
					mode = AVOID_MODE;
					setTimerPeriod(stuckTimerId, 6000);
    2b84:	12 e0       	ldi	r17, 0x02	; 2
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <main+0x770>
    2b88:	60 e7       	ldi	r22, 0x70	; 112
    2b8a:	77 e1       	ldi	r23, 0x17	; 23
					setTimerPeriod(stuckTimerId, 4000);
					startTimer(stuckTimerId);
				}
				else
				{
					mode = AVOID_MODE;
    2b8c:	82 2d       	mov	r24, r2
					setTimerPeriod(stuckTimerId, 6000);
				}
			}
			
			if(timerElapsed(chaosTimerId))
    2b8e:	22 d4       	rcall	.+2116   	; 0x33d4 <_Z14setTimerPeriodhj>
    2b90:	11 e0       	ldi	r17, 0x01	; 1
    2b92:	83 2d       	mov	r24, r3
    2b94:	0d d4       	rcall	.+2074   	; 0x33b0 <_Z12timerElapsedh>
    2b96:	88 23       	and	r24, r24
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <main+0x77a>
			{
				clearTimerElapsed(chaosTimerId);
    2b9a:	9c ce       	rjmp	.-712    	; 0x28d4 <main+0x4b2>
    2b9c:	83 2d       	mov	r24, r3
    2b9e:	11 d4       	rcall	.+2082   	; 0x33c2 <_Z17clearTimerElapsedh>
				/*if(!eventIsSet(GOT_STUCK_EVENT, &mainStore))
				{
					setEvent(GOT_STUCK_EVENT, &mainStore);
				}*/
				
				if(mode != CHAOS_MODE)
    2ba0:	13 30       	cpi	r17, 0x03	; 3
    2ba2:	99 f0       	breq	.+38     	; 0x2bca <main+0x7a8>
				{
					mode = CHAOS_MODE;
					turnRight(&motorLeft, &motorRight);
    2ba4:	62 e4       	ldi	r22, 0x42	; 66
    2ba6:	73 e0       	ldi	r23, 0x03	; 3
    2ba8:	88 e5       	ldi	r24, 0x58	; 88
    2baa:	93 e0       	ldi	r25, 0x03	; 3
    2bac:	0e 94 2c 08 	call	0x1058	; 0x1058 <_Z9turnRightP15DC_Motor_DriverS0_>
					turning = 1;
					setTimerPeriod(chaosTimerId, (rand()%6000));
    2bb0:	0e 94 3b 22 	call	0x4476	; 0x4476 <rand>
    2bb4:	60 e7       	ldi	r22, 0x70	; 112
    2bb6:	77 e1       	ldi	r23, 0x17	; 23
    2bb8:	0e 94 10 20 	call	0x4020	; 0x4020 <__divmodhi4>
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	83 2d       	mov	r24, r3
    2bc0:	09 d4       	rcall	.+2066   	; 0x33d4 <_Z14setTimerPeriodhj>
    2bc2:	83 2d       	mov	r24, r3
					startTimer(chaosTimerId);
    2bc4:	d9 d3       	rcall	.+1970   	; 0x3378 <_Z10startTimerh>
    2bc6:	13 e0       	ldi	r17, 0x03	; 3
    2bc8:	85 ce       	rjmp	.-758    	; 0x28d4 <main+0x4b2>
					setEvent(GOT_STUCK_EVENT, &mainStore);
				}*/
				
				if(mode != CHAOS_MODE)
				{
					mode = CHAOS_MODE;
    2bca:	68 e7       	ldi	r22, 0x78	; 120
    2bcc:	76 ee       	ldi	r23, 0xE6	; 230
					startTimer(chaosTimerId);
				}
				else
				{
					mode = AVOID_MODE;
					setTimerPeriod(chaosTimerId, 59000);
    2bce:	83 2d       	mov	r24, r3
    2bd0:	01 d4       	rcall	.+2050   	; 0x33d4 <_Z14setTimerPeriodhj>
    2bd2:	83 2d       	mov	r24, r3
    2bd4:	d1 d3       	rcall	.+1954   	; 0x3378 <_Z10startTimerh>
    2bd6:	11 e0       	ldi	r17, 0x01	; 1
					startTimer(chaosTimerId);
    2bd8:	7d ce       	rjmp	.-774    	; 0x28d4 <main+0x4b2>

00002bda <_GLOBAL__sub_I_LeftWheelTarget_PPM>:
    2bda:	47 e3       	ldi	r20, 0x37	; 55
    2bdc:	54 e0       	ldi	r21, 0x04	; 4
					setTimerPeriod(chaosTimerId, (rand()%6000));
					startTimer(chaosTimerId);
				}
				else
				{
					mode = AVOID_MODE;
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	88 e5       	ldi	r24, 0x58	; 88
#include "Ultra_Sonic_Range_Finder_Driver.h"

int32_t LeftWheelTarget_PPM = 0;
int32_t RightWheelTarget_PPM = 0;

DC_Motor_Driver motorLeft(PWM_0, PPR_MOTOR_LEFT);	
    2be2:	93 e0       	ldi	r25, 0x03	; 3
    2be4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN15DC_Motor_DriverC1Ehj>
DC_Motor_Driver motorRight(PWM_1, PPR_MOTOR_RIGHT);
    2be8:	47 e3       	ldi	r20, 0x37	; 55
    2bea:	54 e0       	ldi	r21, 0x04	; 4
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	82 e4       	ldi	r24, 0x42	; 66
    2bf0:	93 e0       	ldi	r25, 0x03	; 3
    2bf2:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <_ZN15DC_Motor_DriverC1Ehj>

00002bf6 <_ZN13PidControllerC1Efffhllll>:


#include "PidController.h"


PidController::PidController(float _kp, float _ki, float _kd, uint8_t _period, int32_t _minError, int32_t _maxError, int32_t _minControlValue, int32_t _maxControlValue)
    2bf6:	8f 92       	push	r8
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	4c 01       	movw	r8, r24
{
	Pid_P = 0;
    2c12:	fc 01       	movw	r30, r24
    2c14:	10 86       	std	Z+8, r1	; 0x08
    2c16:	11 86       	std	Z+9, r1	; 0x09
    2c18:	12 86       	std	Z+10, r1	; 0x0a
    2c1a:	13 86       	std	Z+11, r1	; 0x0b
	Pid_D = 0;
    2c1c:	14 86       	std	Z+12, r1	; 0x0c
    2c1e:	15 86       	std	Z+13, r1	; 0x0d
    2c20:	16 86       	std	Z+14, r1	; 0x0e
    2c22:	17 86       	std	Z+15, r1	; 0x0f
	Pid_I = 0;
    2c24:	10 8a       	std	Z+16, r1	; 0x10
    2c26:	11 8a       	std	Z+17, r1	; 0x11
    2c28:	12 8a       	std	Z+18, r1	; 0x12
    2c2a:	13 8a       	std	Z+19, r1	; 0x13
	PID_Total = 0;
    2c2c:	10 82       	st	Z, r1
    2c2e:	11 82       	std	Z+1, r1	; 0x01
    2c30:	12 82       	std	Z+2, r1	; 0x02
    2c32:	13 82       	std	Z+3, r1	; 0x03
	kp = _kp;
    2c34:	44 8b       	std	Z+20, r20	; 0x14
    2c36:	55 8b       	std	Z+21, r21	; 0x15
    2c38:	66 8b       	std	Z+22, r22	; 0x16
    2c3a:	77 8b       	std	Z+23, r23	; 0x17
	kd = _kd;
    2c3c:	c0 8e       	std	Z+24, r12	; 0x18
    2c3e:	d1 8e       	std	Z+25, r13	; 0x19
    2c40:	e2 8e       	std	Z+26, r14	; 0x1a
    2c42:	f3 8e       	std	Z+27, r15	; 0x1b
	ki = _ki;
    2c44:	04 8f       	std	Z+28, r16	; 0x1c
    2c46:	15 8f       	std	Z+29, r17	; 0x1d
    2c48:	26 8f       	std	Z+30, r18	; 0x1e
    2c4a:	37 8f       	std	Z+31, r19	; 0x1f
	period = _period;
    2c4c:	a4 aa       	std	Z+52, r10	; 0x34
	MinError = _minError;
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	98 89       	ldd	r25, Y+16	; 0x10
    2c52:	a9 89       	ldd	r26, Y+17	; 0x11
    2c54:	ba 89       	ldd	r27, Y+18	; 0x12
    2c56:	84 a3       	std	Z+36, r24	; 0x24
    2c58:	95 a3       	std	Z+37, r25	; 0x25
    2c5a:	a6 a3       	std	Z+38, r26	; 0x26
    2c5c:	b7 a3       	std	Z+39, r27	; 0x27
	MaxError = _maxError;
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	ad 89       	ldd	r26, Y+21	; 0x15
    2c64:	be 89       	ldd	r27, Y+22	; 0x16
    2c66:	80 a3       	std	Z+32, r24	; 0x20
    2c68:	91 a3       	std	Z+33, r25	; 0x21
    2c6a:	a2 a3       	std	Z+34, r26	; 0x22
    2c6c:	b3 a3       	std	Z+35, r27	; 0x23
	MinControlValue = _minControlValue;
    2c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c70:	98 8d       	ldd	r25, Y+24	; 0x18
    2c72:	a9 8d       	ldd	r26, Y+25	; 0x19
    2c74:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2c76:	84 a7       	std	Z+44, r24	; 0x2c
    2c78:	95 a7       	std	Z+45, r25	; 0x2d
    2c7a:	a6 a7       	std	Z+46, r26	; 0x2e
    2c7c:	b7 a7       	std	Z+47, r27	; 0x2f
	MaxControlValue = _maxControlValue;
    2c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c82:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2c84:	be 8d       	ldd	r27, Y+30	; 0x1e
    2c86:	80 a7       	std	Z+40, r24	; 0x28
    2c88:	91 a7       	std	Z+41, r25	; 0x29
    2c8a:	a2 a7       	std	Z+42, r26	; 0x2a
    2c8c:	b3 a7       	std	Z+43, r27	; 0x2b
	
	_setPointChanged = 0;
    2c8e:	15 aa       	std	Z+53, r1	; 0x35
	
	initQueue(&Pid_D_History, Pid_D_History_Array, PID_D_QUEUE_SIZE);
    2c90:	b4 01       	movw	r22, r8
    2c92:	6a 5b       	subi	r22, 0xBA	; 186
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	42 e0       	ldi	r20, 0x02	; 2
    2c9c:	c4 01       	movw	r24, r8
    2c9e:	ce 96       	adiw	r24, 0x3e	; 62
    2ca0:	bf d1       	rcall	.+894    	; 0x3020 <_Z9initQueueP5QueuePlhS1_>
	Pid_D_N_History = PID_D_N_TARGET;
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a0 e0       	ldi	r26, 0x00	; 0
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	f4 01       	movw	r30, r8
    2cac:	86 ab       	std	Z+54, r24	; 0x36
    2cae:	97 ab       	std	Z+55, r25	; 0x37
    2cb0:	a0 af       	std	Z+56, r26	; 0x38
    2cb2:	b1 af       	std	Z+57, r27	; 0x39
	
	previous_Error = 0;
    2cb4:	14 82       	std	Z+4, r1	; 0x04
    2cb6:	15 82       	std	Z+5, r1	; 0x05
    2cb8:	16 82       	std	Z+6, r1	; 0x06
    2cba:	17 82       	std	Z+7, r1	; 0x07
	
}
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	af 90       	pop	r10
    2cce:	9f 90       	pop	r9
    2cd0:	8f 90       	pop	r8
    2cd2:	08 95       	ret

00002cd4 <_ZN13PidController7ControlEl>:




int16_t PidController::Control(int32_t error)
{
    2cd4:	3f 92       	push	r3
    2cd6:	4f 92       	push	r4
    2cd8:	5f 92       	push	r5
    2cda:	6f 92       	push	r6
    2cdc:	7f 92       	push	r7
    2cde:	8f 92       	push	r8
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	2e 97       	sbiw	r28, 0x0e	; 14
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	9e 87       	std	Y+14, r25	; 0x0e
    2d08:	8d 87       	std	Y+13, r24	; 0x0d
    2d0a:	2a 01       	movw	r4, r20
    2d0c:	3b 01       	movw	r6, r22
	int32_t errorDifference;
	if(!_setPointChanged)
    2d0e:	dc 01       	movw	r26, r24
    2d10:	d5 96       	adiw	r26, 0x35	; 53
    2d12:	8c 91       	ld	r24, X
    2d14:	d5 97       	sbiw	r26, 0x35	; 53
    2d16:	81 11       	cpse	r24, r1
    2d18:	0d c0       	rjmp	.+26     	; 0x2d34 <_ZN13PidController7ControlEl+0x60>
	{
		errorDifference = error-previous_Error;
    2d1a:	14 96       	adiw	r26, 0x04	; 4
    2d1c:	8d 91       	ld	r24, X+
    2d1e:	9d 91       	ld	r25, X+
    2d20:	0d 90       	ld	r0, X+
    2d22:	bc 91       	ld	r27, X
    2d24:	a0 2d       	mov	r26, r0
    2d26:	6a 01       	movw	r12, r20
    2d28:	7b 01       	movw	r14, r22
    2d2a:	c8 1a       	sub	r12, r24
    2d2c:	d9 0a       	sbc	r13, r25
    2d2e:	ea 0a       	sbc	r14, r26
    2d30:	fb 0a       	sbc	r15, r27
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <_ZN13PidController7ControlEl+0x66>
	}
	else
	{
		errorDifference = 0;
    2d34:	c1 2c       	mov	r12, r1
    2d36:	d1 2c       	mov	r13, r1
    2d38:	76 01       	movw	r14, r12
	}	
	
	Pid_P = kp*error;
    2d3a:	c3 01       	movw	r24, r6
    2d3c:	b2 01       	movw	r22, r4
    2d3e:	20 d6       	rcall	.+3136   	; 0x3980 <__floatsisf>
    2d40:	4b 01       	movw	r8, r22
    2d42:	5c 01       	movw	r10, r24
    2d44:	9b 01       	movw	r18, r22
    2d46:	ac 01       	movw	r20, r24
    2d48:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d4a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d4c:	64 89       	ldd	r22, Z+20	; 0x14
    2d4e:	75 89       	ldd	r23, Z+21	; 0x15
    2d50:	86 89       	ldd	r24, Z+22	; 0x16
    2d52:	97 89       	ldd	r25, Z+23	; 0x17
    2d54:	a1 d6       	rcall	.+3394   	; 0x3a98 <__mulsf3>
    2d56:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d58:	be 85       	ldd	r27, Y+14	; 0x0e
    2d5a:	18 96       	adiw	r26, 0x08	; 8
    2d5c:	6d 93       	st	X+, r22
    2d5e:	7d 93       	st	X+, r23
    2d60:	8d 93       	st	X+, r24
    2d62:	9c 93       	st	X, r25
    2d64:	1b 97       	sbiw	r26, 0x0b	; 11
	
	int32_t sum = 0;
	
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
    2d66:	8d 01       	movw	r16, r26
    2d68:	02 5c       	subi	r16, 0xC2	; 194
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	c7 01       	movw	r24, r14
    2d6e:	b6 01       	movw	r22, r12
    2d70:	07 d6       	rcall	.+3086   	; 0x3980 <__floatsisf>
    2d72:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d74:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d76:	20 8d       	ldd	r18, Z+24	; 0x18
    2d78:	31 8d       	ldd	r19, Z+25	; 0x19
    2d7a:	42 8d       	ldd	r20, Z+26	; 0x1a
    2d7c:	53 8d       	ldd	r21, Z+27	; 0x1b
    2d7e:	8c d6       	rcall	.+3352   	; 0x3a98 <__mulsf3>
    2d80:	6b 01       	movw	r12, r22
    2d82:	7c 01       	movw	r14, r24
    2d84:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d86:	be 85       	ldd	r27, Y+14	; 0x0e
    2d88:	d4 96       	adiw	r26, 0x34	; 52
    2d8a:	6c 91       	ld	r22, X
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	f6 d5       	rcall	.+3052   	; 0x3980 <__floatsisf>
    2d94:	9b 01       	movw	r18, r22
    2d96:	ac 01       	movw	r20, r24
    2d98:	c7 01       	movw	r24, r14
    2d9a:	b6 01       	movw	r22, r12
    2d9c:	56 d5       	rcall	.+2732   	; 0x384a <__divsf3>
    2d9e:	bd d5       	rcall	.+2938   	; 0x391a <__fixsfsi>
    2da0:	a8 01       	movw	r20, r16
    2da2:	67 d1       	rcall	.+718    	; 0x3072 <_Z6enqeuelP5Queue>
	

		sum = 0;
		for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2da4:	31 2c       	mov	r3, r1
	
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
	

		sum = 0;
    2da6:	c1 2c       	mov	r12, r1
    2da8:	d1 2c       	mov	r13, r1
    2daa:	76 01       	movw	r14, r12
		for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2dac:	23 2d       	mov	r18, r3
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2db6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2db8:	66 a9       	ldd	r22, Z+54	; 0x36
    2dba:	77 a9       	ldd	r23, Z+55	; 0x37
    2dbc:	80 ad       	ldd	r24, Z+56	; 0x38
    2dbe:	91 ad       	ldd	r25, Z+57	; 0x39
    2dc0:	26 17       	cp	r18, r22
    2dc2:	37 07       	cpc	r19, r23
    2dc4:	48 07       	cpc	r20, r24
    2dc6:	59 07       	cpc	r21, r25
    2dc8:	dc f4       	brge	.+54     	; 0x2e00 <_ZN13PidController7ControlEl+0x12c>
		{
			sum += ((Pid_D_N_History - i) * (Pid_D_N_History - i)) * (int32_t) getNthElement(&Pid_D_History, i);
    2dca:	62 1b       	sub	r22, r18
    2dcc:	73 0b       	sbc	r23, r19
    2dce:	84 0b       	sbc	r24, r20
    2dd0:	95 0b       	sbc	r25, r21
    2dd2:	9b 01       	movw	r18, r22
    2dd4:	ac 01       	movw	r20, r24
    2dd6:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
    2dda:	69 83       	std	Y+1, r22	; 0x01
    2ddc:	7a 83       	std	Y+2, r23	; 0x02
    2dde:	8b 83       	std	Y+3, r24	; 0x03
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	63 2d       	mov	r22, r3
    2de4:	c8 01       	movw	r24, r16
    2de6:	72 d1       	rcall	.+740    	; 0x30cc <_Z13getNthElementP5Queueh>
    2de8:	29 81       	ldd	r18, Y+1	; 0x01
    2dea:	3a 81       	ldd	r19, Y+2	; 0x02
    2dec:	4b 81       	ldd	r20, Y+3	; 0x03
    2dee:	5c 81       	ldd	r21, Y+4	; 0x04
    2df0:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
    2df4:	c6 0e       	add	r12, r22
    2df6:	d7 1e       	adc	r13, r23
    2df8:	e8 1e       	adc	r14, r24
    2dfa:	f9 1e       	adc	r15, r25
	int32_t currentPid_D = (kd*errorDifference)/period;
	enqeue(currentPid_D, &Pid_D_History);
	

		sum = 0;
		for(uint8_t i = 0; i < Pid_D_N_History; i++)
    2dfc:	33 94       	inc	r3
    2dfe:	d6 cf       	rjmp	.-84     	; 0x2dac <_ZN13PidController7ControlEl+0xd8>
		{
			sum += ((Pid_D_N_History - i) * (Pid_D_N_History - i)) * (int32_t) getNthElement(&Pid_D_History, i);
		}
		if (!_setPointChanged)
    2e00:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e02:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e04:	a5 a9       	ldd	r26, Z+53	; 0x35
    2e06:	22 ad       	ldd	r18, Z+58	; 0x3a
    2e08:	33 ad       	ldd	r19, Z+59	; 0x3b
    2e0a:	44 ad       	ldd	r20, Z+60	; 0x3c
    2e0c:	55 ad       	ldd	r21, Z+61	; 0x3d
    2e0e:	29 83       	std	Y+1, r18	; 0x01
    2e10:	3a 83       	std	Y+2, r19	; 0x02
    2e12:	4b 83       	std	Y+3, r20	; 0x03
    2e14:	5c 83       	std	Y+4, r21	; 0x04
    2e16:	a1 11       	cpse	r26, r1
		{
			Pid_D = sum/Pid_D_N_History_Sum;
    2e18:	2a c0       	rjmp	.+84     	; 0x2e6e <_ZN13PidController7ControlEl+0x19a>
    2e1a:	c7 01       	movw	r24, r14
    2e1c:	b6 01       	movw	r22, r12
    2e1e:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
    2e22:	ca 01       	movw	r24, r20
    2e24:	b9 01       	movw	r22, r18
    2e26:	ac d5       	rcall	.+2904   	; 0x3980 <__floatsisf>
    2e28:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e2a:	be 85       	ldd	r27, Y+14	; 0x0e
    2e2c:	1c 96       	adiw	r26, 0x0c	; 12
    2e2e:	6d 93       	st	X+, r22
    2e30:	7d 93       	st	X+, r23
    2e32:	8d 93       	st	X+, r24
    2e34:	9c 93       	st	X, r25
		//Pid_D = 0;

	
	if(!_setPointChanged)
    {
	    Pid_I = Pid_I + ( ki * error);
    2e36:	1f 97       	sbiw	r26, 0x0f	; 15
    2e38:	5c 96       	adiw	r26, 0x1c	; 28
    2e3a:	2d 91       	ld	r18, X+
    2e3c:	3d 91       	ld	r19, X+
    2e3e:	4d 91       	ld	r20, X+
    2e40:	5c 91       	ld	r21, X
    2e42:	5f 97       	sbiw	r26, 0x1f	; 31
    2e44:	c5 01       	movw	r24, r10
    2e46:	b4 01       	movw	r22, r8
    2e48:	27 d6       	rcall	.+3150   	; 0x3a98 <__mulsf3>
    2e4a:	9b 01       	movw	r18, r22
    2e4c:	ac 01       	movw	r20, r24
    2e4e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e50:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e52:	60 89       	ldd	r22, Z+16	; 0x10
    2e54:	71 89       	ldd	r23, Z+17	; 0x11
    2e56:	82 89       	ldd	r24, Z+18	; 0x12
    2e58:	93 89       	ldd	r25, Z+19	; 0x13
    2e5a:	93 d4       	rcall	.+2342   	; 0x3782 <__addsf3>
    2e5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e5e:	be 85       	ldd	r27, Y+14	; 0x0e
    2e60:	50 96       	adiw	r26, 0x10	; 16
    2e62:	6d 93       	st	X+, r22
    2e64:	7d 93       	st	X+, r23
    2e66:	8d 93       	st	X+, r24
    2e68:	9c 93       	st	X, r25
    2e6a:	53 97       	sbiw	r26, 0x13	; 19
    2e6c:	2a c0       	rjmp	.+84     	; 0x2ec2 <_ZN13PidController7ControlEl+0x1ee>
		{
			Pid_D = sum/Pid_D_N_History_Sum;
		} 
		else
		{
			Pid_D = sum/(Pid_D_N_History_Sum-Pid_D_N_History*Pid_D_N_History);
    2e6e:	9b 01       	movw	r18, r22
    2e70:	ac 01       	movw	r20, r24
    2e72:	0e 94 01 20 	call	0x4002	; 0x4002 <__mulsi3>
    2e76:	29 81       	ldd	r18, Y+1	; 0x01
    2e78:	3a 81       	ldd	r19, Y+2	; 0x02
    2e7a:	4b 81       	ldd	r20, Y+3	; 0x03
    2e7c:	5c 81       	ldd	r21, Y+4	; 0x04
    2e7e:	26 1b       	sub	r18, r22
    2e80:	37 0b       	sbc	r19, r23
    2e82:	48 0b       	sbc	r20, r24
    2e84:	59 0b       	sbc	r21, r25
    2e86:	c7 01       	movw	r24, r14
    2e88:	b6 01       	movw	r22, r12
    2e8a:	0e 94 45 20 	call	0x408a	; 0x408a <__divmodsi4>
    2e8e:	ca 01       	movw	r24, r20
    2e90:	b9 01       	movw	r22, r18
    2e92:	76 d5       	rcall	.+2796   	; 0x3980 <__floatsisf>
    2e94:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e96:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e98:	64 87       	std	Z+12, r22	; 0x0c
    2e9a:	75 87       	std	Z+13, r23	; 0x0d
    2e9c:	86 87       	std	Z+14, r24	; 0x0e
    {
	    Pid_I = Pid_I + ( ki * error);
    }
	else
	{
		Pid_I = ki * error;
    2e9e:	97 87       	std	Z+15, r25	; 0x0f
    2ea0:	a5 01       	movw	r20, r10
    2ea2:	94 01       	movw	r18, r8
    2ea4:	64 8d       	ldd	r22, Z+28	; 0x1c
    2ea6:	75 8d       	ldd	r23, Z+29	; 0x1d
    2ea8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2eaa:	97 8d       	ldd	r25, Z+31	; 0x1f
    2eac:	f5 d5       	rcall	.+3050   	; 0x3a98 <__mulsf3>
    2eae:	ad 85       	ldd	r26, Y+13	; 0x0d
    2eb0:	be 85       	ldd	r27, Y+14	; 0x0e
    2eb2:	50 96       	adiw	r26, 0x10	; 16
    2eb4:	6d 93       	st	X+, r22
    2eb6:	7d 93       	st	X+, r23
    2eb8:	8d 93       	st	X+, r24
    2eba:	9c 93       	st	X, r25
		_setPointChanged = 0;
    2ebc:	53 97       	sbiw	r26, 0x13	; 19
    2ebe:	d5 96       	adiw	r26, 0x35	; 53
	}

	
	PID_Total = Pid_P + Pid_D + Pid_I;
    2ec0:	1c 92       	st	X, r1
    2ec2:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ec4:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ec6:	24 85       	ldd	r18, Z+12	; 0x0c
    2ec8:	35 85       	ldd	r19, Z+13	; 0x0d
    2eca:	46 85       	ldd	r20, Z+14	; 0x0e
    2ecc:	57 85       	ldd	r21, Z+15	; 0x0f
    2ece:	60 85       	ldd	r22, Z+8	; 0x08
    2ed0:	71 85       	ldd	r23, Z+9	; 0x09
    2ed2:	82 85       	ldd	r24, Z+10	; 0x0a
    2ed4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ed6:	55 d4       	rcall	.+2218   	; 0x3782 <__addsf3>
    2ed8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2eda:	be 85       	ldd	r27, Y+14	; 0x0e
    2edc:	50 96       	adiw	r26, 0x10	; 16
    2ede:	2d 91       	ld	r18, X+
    2ee0:	3d 91       	ld	r19, X+
    2ee2:	4d 91       	ld	r20, X+
    2ee4:	5c 91       	ld	r21, X
    2ee6:	53 97       	sbiw	r26, 0x13	; 19
    2ee8:	4c d4       	rcall	.+2200   	; 0x3782 <__addsf3>
    2eea:	17 d5       	rcall	.+2606   	; 0x391a <__fixsfsi>
    2eec:	ed 85       	ldd	r30, Y+13	; 0x0d
    2eee:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ef0:	60 83       	st	Z, r22
    2ef2:	71 83       	std	Z+1, r23	; 0x01
    2ef4:	82 83       	std	Z+2, r24	; 0x02
    2ef6:	93 83       	std	Z+3, r25	; 0x03
	
	
	if(PID_Total < MinError)
    2ef8:	24 a1       	ldd	r18, Z+36	; 0x24
    2efa:	35 a1       	ldd	r19, Z+37	; 0x25
    2efc:	46 a1       	ldd	r20, Z+38	; 0x26
    2efe:	57 a1       	ldd	r21, Z+39	; 0x27
    2f00:	29 83       	std	Y+1, r18	; 0x01
    2f02:	3a 83       	std	Y+2, r19	; 0x02
    2f04:	4b 83       	std	Y+3, r20	; 0x03
    2f06:	5c 83       	std	Y+4, r21	; 0x04
    2f08:	62 17       	cp	r22, r18
    2f0a:	73 07       	cpc	r23, r19
    2f0c:	84 07       	cpc	r24, r20
    2f0e:	95 07       	cpc	r25, r21
    2f10:	24 f4       	brge	.+8      	; 0x2f1a <_ZN13PidController7ControlEl+0x246>
	{
		PID_Total = MinError;
    2f12:	20 83       	st	Z, r18
    2f14:	31 83       	std	Z+1, r19	; 0x01
    2f16:	42 83       	std	Z+2, r20	; 0x02
    2f18:	53 83       	std	Z+3, r21	; 0x03
	}
	if(PID_Total > MaxError)
    2f1a:	ad 85       	ldd	r26, Y+13	; 0x0d
    2f1c:	be 85       	ldd	r27, Y+14	; 0x0e
    2f1e:	90 96       	adiw	r26, 0x20	; 32
    2f20:	2d 91       	ld	r18, X+
    2f22:	3d 91       	ld	r19, X+
    2f24:	4d 91       	ld	r20, X+
    2f26:	5c 91       	ld	r21, X
    2f28:	93 97       	sbiw	r26, 0x23	; 35
    2f2a:	2d 83       	std	Y+5, r18	; 0x05
    2f2c:	3e 83       	std	Y+6, r19	; 0x06
    2f2e:	4f 83       	std	Y+7, r20	; 0x07
    2f30:	58 87       	std	Y+8, r21	; 0x08
    2f32:	8d 91       	ld	r24, X+
    2f34:	9d 91       	ld	r25, X+
    2f36:	0d 90       	ld	r0, X+
    2f38:	bc 91       	ld	r27, X
    2f3a:	a0 2d       	mov	r26, r0
    2f3c:	28 17       	cp	r18, r24
    2f3e:	39 07       	cpc	r19, r25
    2f40:	4a 07       	cpc	r20, r26
    2f42:	5b 07       	cpc	r21, r27
	{
		PID_Total = MaxError;
    2f44:	34 f4       	brge	.+12     	; 0x2f52 <_ZN13PidController7ControlEl+0x27e>
    2f46:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f48:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f4a:	20 83       	st	Z, r18
    2f4c:	31 83       	std	Z+1, r19	; 0x01
	}

	int16_t PID_Mapped = map(PID_Total, MinError, MaxError, MinControlValue, MaxControlValue);
    2f4e:	42 83       	std	Z+2, r20	; 0x02
    2f50:	53 83       	std	Z+3, r21	; 0x03
    2f52:	ad 85       	ldd	r26, Y+13	; 0x0d
    2f54:	be 85       	ldd	r27, Y+14	; 0x0e
    2f56:	9c 96       	adiw	r26, 0x2c	; 44
    2f58:	6d 91       	ld	r22, X+
    2f5a:	7d 91       	ld	r23, X+
    2f5c:	8d 91       	ld	r24, X+
    2f5e:	9c 91       	ld	r25, X
    2f60:	9f 97       	sbiw	r26, 0x2f	; 47
    2f62:	0e d5       	rcall	.+2588   	; 0x3980 <__floatsisf>
    2f64:	5b 01       	movw	r10, r22
    2f66:	6c 01       	movw	r12, r24
    2f68:	6d 81       	ldd	r22, Y+5	; 0x05
    2f6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6e:	98 85       	ldd	r25, Y+8	; 0x08
    2f70:	07 d5       	rcall	.+2574   	; 0x3980 <__floatsisf>
    2f72:	6d 83       	std	Y+5, r22	; 0x05
    2f74:	7e 83       	std	Y+6, r23	; 0x06
    2f76:	8f 83       	std	Y+7, r24	; 0x07
    2f78:	98 87       	std	Y+8, r25	; 0x08
    2f7a:	69 81       	ldd	r22, Y+1	; 0x01
    2f7c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	fe d4       	rcall	.+2556   	; 0x3980 <__floatsisf>
    2f84:	69 83       	std	Y+1, r22	; 0x01
    2f86:	7a 83       	std	Y+2, r23	; 0x02
    2f88:	8b 83       	std	Y+3, r24	; 0x03
    2f8a:	9c 83       	std	Y+4, r25	; 0x04
    2f8c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f8e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f90:	60 81       	ld	r22, Z
    2f92:	71 81       	ldd	r23, Z+1	; 0x01
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	f3 d4       	rcall	.+2534   	; 0x3980 <__floatsisf>
    2f9a:	69 87       	std	Y+9, r22	; 0x09
    2f9c:	7a 87       	std	Y+10, r23	; 0x0a
    2f9e:	8b 87       	std	Y+11, r24	; 0x0b
    2fa0:	9c 87       	std	Y+12, r25	; 0x0c
    2fa2:	ad 85       	ldd	r26, Y+13	; 0x0d
    2fa4:	be 85       	ldd	r27, Y+14	; 0x0e
    2fa6:	98 96       	adiw	r26, 0x28	; 40
    2fa8:	6d 91       	ld	r22, X+
    2faa:	7d 91       	ld	r23, X+
    2fac:	8d 91       	ld	r24, X+
    2fae:	9c 91       	ld	r25, X
    2fb0:	9b 97       	sbiw	r26, 0x2b	; 43
    2fb2:	e6 d4       	rcall	.+2508   	; 0x3980 <__floatsisf>
    2fb4:	9f 93       	push	r25
    2fb6:	8f 93       	push	r24
    2fb8:	7f 93       	push	r23
    2fba:	6f 93       	push	r22
    2fbc:	ed 80       	ldd	r14, Y+5	; 0x05
    2fbe:	fe 80       	ldd	r15, Y+6	; 0x06
    2fc0:	0f 81       	ldd	r16, Y+7	; 0x07
    2fc2:	18 85       	ldd	r17, Y+8	; 0x08
    2fc4:	29 81       	ldd	r18, Y+1	; 0x01
    2fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc8:	4b 81       	ldd	r20, Y+3	; 0x03
    2fca:	5c 81       	ldd	r21, Y+4	; 0x04
    2fcc:	69 85       	ldd	r22, Y+9	; 0x09
    2fce:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fd4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_Z3mapfffff>
	previous_Error = error;
    2fd8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fda:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fdc:	44 82       	std	Z+4, r4	; 0x04
    2fde:	55 82       	std	Z+5, r5	; 0x05
    2fe0:	66 82       	std	Z+6, r6	; 0x06
	return PID_Mapped;
    2fe2:	77 82       	std	Z+7, r7	; 0x07
    2fe4:	9a d4       	rcall	.+2356   	; 0x391a <__fixsfsi>
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
}
    2fee:	cb 01       	movw	r24, r22
    2ff0:	2e 96       	adiw	r28, 0x0e	; 14
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	9f 90       	pop	r9
    3012:	8f 90       	pop	r8
    3014:	7f 90       	pop	r7
    3016:	6f 90       	pop	r6
    3018:	5f 90       	pop	r5
    301a:	4f 90       	pop	r4
    301c:	3f 90       	pop	r3
    301e:	08 95       	ret

00003020 <_Z9initQueueP5QueuePlhS1_>:
	{
		sum += queuePtr->queueArray[i];
	}
	
	return (uint16_t) (sum / queuePtr->size);
}
    3020:	fc 01       	movw	r30, r24
    3022:	40 83       	st	Z, r20
    3024:	11 82       	std	Z+1, r1	; 0x01
    3026:	12 82       	std	Z+2, r1	; 0x02
    3028:	41 50       	subi	r20, 0x01	; 1
    302a:	43 83       	std	Z+3, r20	; 0x03
    302c:	75 83       	std	Z+5, r23	; 0x05
    302e:	64 83       	std	Z+4, r22	; 0x04
    3030:	37 83       	std	Z+7, r19	; 0x07
    3032:	26 83       	std	Z+6, r18	; 0x06
    3034:	08 95       	ret

00003036 <_Z7dequeueP5Queue>:
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	fc 01       	movw	r30, r24
    303c:	22 81       	ldd	r18, Z+2	; 0x02
    303e:	82 2f       	mov	r24, r18
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a4 81       	ldd	r26, Z+4	; 0x04
    3044:	b5 81       	ldd	r27, Z+5	; 0x05
    3046:	34 e0       	ldi	r19, 0x04	; 4
    3048:	23 9f       	mul	r18, r19
    304a:	a0 0d       	add	r26, r0
    304c:	b1 1d       	adc	r27, r1
    304e:	11 24       	eor	r1, r1
    3050:	0d 91       	ld	r16, X+
    3052:	1d 91       	ld	r17, X+
    3054:	2d 91       	ld	r18, X+
    3056:	3c 91       	ld	r19, X
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	60 81       	ld	r22, Z
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	e0 d7       	rcall	.+4032   	; 0x4020 <__divmodhi4>
    3060:	82 83       	std	Z+2, r24	; 0x02
    3062:	81 81       	ldd	r24, Z+1	; 0x01
    3064:	81 50       	subi	r24, 0x01	; 1
    3066:	81 83       	std	Z+1, r24	; 0x01
    3068:	c9 01       	movw	r24, r18
    306a:	b8 01       	movw	r22, r16
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <_Z6enqeuelP5Queue>:
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	6b 01       	movw	r12, r22
    3080:	7c 01       	movw	r14, r24
    3082:	ea 01       	movw	r28, r20
    3084:	99 81       	ldd	r25, Y+1	; 0x01
    3086:	88 81       	ld	r24, Y
    3088:	98 13       	cpse	r25, r24
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <_Z6enqeuelP5Queue+0x1e>
    308c:	ca 01       	movw	r24, r20
    308e:	d3 df       	rcall	.-90     	; 0x3036 <_Z7dequeueP5Queue>
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	01 96       	adiw	r24, 0x01	; 1
    3096:	68 81       	ld	r22, Y
    3098:	70 e0       	ldi	r23, 0x00	; 0
    309a:	c2 d7       	rcall	.+3972   	; 0x4020 <__divmodhi4>
    309c:	8b 83       	std	Y+3, r24	; 0x03
    309e:	99 27       	eor	r25, r25
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	ec 81       	ldd	r30, Y+4	; 0x04
    30aa:	fd 81       	ldd	r31, Y+5	; 0x05
    30ac:	e8 0f       	add	r30, r24
    30ae:	f9 1f       	adc	r31, r25
    30b0:	c0 82       	st	Z, r12
    30b2:	d1 82       	std	Z+1, r13	; 0x01
    30b4:	e2 82       	std	Z+2, r14	; 0x02
    30b6:	f3 82       	std	Z+3, r15	; 0x03
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	08 95       	ret

000030cc <_Z13getNthElementP5Queueh>:

int32_t getNthElement(Queue* queuePtr, uint8_t n)
{
    30cc:	fc 01       	movw	r30, r24
	if (queuePtr->size > n)
    30ce:	81 81       	ldd	r24, Z+1	; 0x01
    30d0:	68 17       	cp	r22, r24
    30d2:	c8 f4       	brcc	.+50     	; 0x3106 <_Z13getNthElementP5Queueh+0x3a>
	{
		return queuePtr->queueArray[(queuePtr->rear + queuePtr->capacity - n)%queuePtr->capacity];
    30d4:	20 81       	ld	r18, Z
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	83 81       	ldd	r24, Z+3	; 0x03
    30da:	a9 01       	movw	r20, r18
    30dc:	48 0f       	add	r20, r24
    30de:	51 1d       	adc	r21, r1
    30e0:	ca 01       	movw	r24, r20
    30e2:	86 1b       	sub	r24, r22
    30e4:	91 09       	sbc	r25, r1
    30e6:	b9 01       	movw	r22, r18
    30e8:	9b d7       	rcall	.+3894   	; 0x4020 <__divmodhi4>
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	04 80       	ldd	r0, Z+4	; 0x04
    30f4:	f5 81       	ldd	r31, Z+5	; 0x05
    30f6:	e0 2d       	mov	r30, r0
    30f8:	e8 0f       	add	r30, r24
    30fa:	f9 1f       	adc	r31, r25
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	08 95       	ret
	}
	else return 0;
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	cb 01       	movw	r24, r22
}
    310c:	08 95       	ret

0000310e <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	8c 01       	movw	r16, r24
    3120:	eb 01       	movw	r28, r22
    uint32_t nsec_part= nsec % 1000000000UL;
    3122:	68 81       	ld	r22, Y
    3124:	79 81       	ldd	r23, Y+1	; 0x01
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3a ec       	ldi	r19, 0xCA	; 202
    312e:	4a e9       	ldi	r20, 0x9A	; 154
    3130:	5b e3       	ldi	r21, 0x3B	; 59
    3132:	89 d7       	rcall	.+3858   	; 0x4046 <__udivmodsi4>
    3134:	f8 01       	movw	r30, r16
    3136:	c0 80       	ld	r12, Z
    3138:	d1 80       	ldd	r13, Z+1	; 0x01
    313a:	e2 80       	ldd	r14, Z+2	; 0x02
    313c:	f3 80       	ldd	r15, Z+3	; 0x03
    313e:	c2 0e       	add	r12, r18
    3140:	d3 1e       	adc	r13, r19
    3142:	e4 1e       	adc	r14, r20
    3144:	f5 1e       	adc	r15, r21
    3146:	c0 82       	st	Z, r12
    3148:	d1 82       	std	Z+1, r13	; 0x01
    314a:	e2 82       	std	Z+2, r14	; 0x02
    314c:	f3 82       	std	Z+3, r15	; 0x03
    nsec = nsec_part;
    314e:	68 83       	st	Y, r22
    3150:	79 83       	std	Y+1, r23	; 0x01
    3152:	8a 83       	std	Y+2, r24	; 0x02
    3154:	9b 83       	std	Y+3, r25	; 0x03
  }
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	08 95       	ret

00003168 <_Z12initMilliISRv>:
}

 uint8_t timerIsActive(uint8_t timerId)
 {
	 return timers[timerId].isActive;
 }
    3168:	85 e0       	ldi	r24, 0x05	; 5
    316a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    316e:	e1 eb       	ldi	r30, 0xB1	; 177
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	88 7f       	andi	r24, 0xF8	; 248
    3176:	80 83       	st	Z, r24
    3178:	80 81       	ld	r24, Z
    317a:	84 60       	ori	r24, 0x04	; 4
    317c:	80 83       	st	Z, r24
    317e:	e0 e7       	ldi	r30, 0x70	; 112
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	81 60       	ori	r24, 0x01	; 1
    3186:	80 83       	st	Z, r24
    3188:	78 94       	sei
    318a:	08 95       	ret

0000318c <__vector_15>:
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	0b b6       	in	r0, 0x3b	; 59
    3198:	0f 92       	push	r0
    319a:	cf 92       	push	r12
    319c:	df 92       	push	r13
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	2f 93       	push	r18
    31a8:	3f 93       	push	r19
    31aa:	4f 93       	push	r20
    31ac:	5f 93       	push	r21
    31ae:	6f 93       	push	r22
    31b0:	7f 93       	push	r23
    31b2:	8f 93       	push	r24
    31b4:	9f 93       	push	r25
    31b6:	af 93       	push	r26
    31b8:	bf 93       	push	r27
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	85 e0       	ldi	r24, 0x05	; 5
    31c4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    31c8:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZL9global_ms>
    31cc:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <_ZL9global_ms+0x1>
    31d0:	a0 91 70 03 	lds	r26, 0x0370	; 0x800370 <_ZL9global_ms+0x2>
    31d4:	b0 91 71 03 	lds	r27, 0x0371	; 0x800371 <_ZL9global_ms+0x3>
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	a1 1d       	adc	r26, r1
    31dc:	b1 1d       	adc	r27, r1
    31de:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_ZL9global_ms>
    31e2:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <_ZL9global_ms+0x1>
    31e6:	a0 93 70 03 	sts	0x0370, r26	; 0x800370 <_ZL9global_ms+0x2>
    31ea:	b0 93 71 03 	sts	0x0371, r27	; 0x800371 <_ZL9global_ms+0x3>
    31ee:	c8 e8       	ldi	r28, 0x88	; 136
    31f0:	d3 e0       	ldi	r29, 0x03	; 3
    31f2:	02 e7       	ldi	r16, 0x72	; 114
    31f4:	13 e0       	ldi	r17, 0x03	; 3
    31f6:	e1 2c       	mov	r14, r1
    31f8:	f1 2c       	mov	r15, r1
    31fa:	8d e0       	ldi	r24, 0x0D	; 13
    31fc:	d8 2e       	mov	r13, r24
    31fe:	cc 24       	eor	r12, r12
    3200:	c3 94       	inc	r12
    3202:	88 81       	ld	r24, Y
    3204:	8f 3f       	cpi	r24, 0xFF	; 255
    3206:	09 f4       	brne	.+2      	; 0x320a <__vector_15+0x7e>
    3208:	5b c0       	rjmp	.+182    	; 0x32c0 <__vector_15+0x134>
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	88 23       	and	r24, r24
    320e:	09 f4       	brne	.+2      	; 0x3212 <__vector_15+0x86>
    3210:	50 c0       	rjmp	.+160    	; 0x32b2 <__vector_15+0x126>
    3212:	f8 01       	movw	r30, r16
    3214:	80 81       	ld	r24, Z
    3216:	91 81       	ldd	r25, Z+1	; 0x01
    3218:	a2 81       	ldd	r26, Z+2	; 0x02
    321a:	b3 81       	ldd	r27, Z+3	; 0x03
    321c:	01 96       	adiw	r24, 0x01	; 1
    321e:	a1 1d       	adc	r26, r1
    3220:	b1 1d       	adc	r27, r1
    3222:	80 83       	st	Z, r24
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	a2 83       	std	Z+2, r26	; 0x02
    3228:	b3 83       	std	Z+3, r27	; 0x03
    322a:	4b 81       	ldd	r20, Y+3	; 0x03
    322c:	5c 81       	ldd	r21, Y+4	; 0x04
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	84 17       	cp	r24, r20
    3234:	95 07       	cpc	r25, r21
    3236:	a6 07       	cpc	r26, r22
    3238:	b7 07       	cpc	r27, r23
    323a:	d9 f5       	brne	.+118    	; 0x32b2 <__vector_15+0x126>
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	10 82       	st	Z, r1
    3242:	11 82       	std	Z+1, r1	; 0x01
    3244:	12 82       	std	Z+2, r1	; 0x02
    3246:	13 82       	std	Z+3, r1	; 0x03
    3248:	8e 81       	ldd	r24, Y+6	; 0x06
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	29 f1       	breq	.+74     	; 0x3298 <__vector_15+0x10c>
    324e:	d8 f0       	brcs	.+54     	; 0x3286 <__vector_15+0xfa>
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	99 f0       	breq	.+38     	; 0x327a <__vector_15+0xee>
    3254:	83 30       	cpi	r24, 0x03	; 3
    3256:	69 f5       	brne	.+90     	; 0x32b2 <__vector_15+0x126>
    3258:	de 9c       	mul	r13, r14
    325a:	f0 01       	movw	r30, r0
    325c:	df 9c       	mul	r13, r15
    325e:	f0 0d       	add	r31, r0
    3260:	11 24       	eor	r1, r1
    3262:	e8 57       	subi	r30, 0x78	; 120
    3264:	fc 4f       	sbci	r31, 0xFC	; 252
    3266:	81 85       	ldd	r24, Z+9	; 0x09
    3268:	92 85       	ldd	r25, Z+10	; 0x0a
    326a:	6b 85       	ldd	r22, Y+11	; 0x0b
    326c:	7c 85       	ldd	r23, Y+12	; 0x0c
    326e:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z8setEventjPVj>
    3272:	ef 81       	ldd	r30, Y+7	; 0x07
    3274:	f8 85       	ldd	r31, Y+8	; 0x08
    3276:	19 95       	eicall
    3278:	1c c0       	rjmp	.+56     	; 0x32b2 <__vector_15+0x126>
    327a:	f8 94       	cli
    327c:	ef 81       	ldd	r30, Y+7	; 0x07
    327e:	f8 85       	ldd	r31, Y+8	; 0x08
    3280:	19 95       	eicall
    3282:	78 94       	sei
    3284:	16 c0       	rjmp	.+44     	; 0x32b2 <__vector_15+0x126>
    3286:	de 9c       	mul	r13, r14
    3288:	f0 01       	movw	r30, r0
    328a:	df 9c       	mul	r13, r15
    328c:	f0 0d       	add	r31, r0
    328e:	11 24       	eor	r1, r1
    3290:	e8 57       	subi	r30, 0x78	; 120
    3292:	fc 4f       	sbci	r31, 0xFC	; 252
    3294:	c2 82       	std	Z+2, r12	; 0x02
    3296:	0d c0       	rjmp	.+26     	; 0x32b2 <__vector_15+0x126>
    3298:	de 9c       	mul	r13, r14
    329a:	f0 01       	movw	r30, r0
    329c:	df 9c       	mul	r13, r15
    329e:	f0 0d       	add	r31, r0
    32a0:	11 24       	eor	r1, r1
    32a2:	e8 57       	subi	r30, 0x78	; 120
    32a4:	fc 4f       	sbci	r31, 0xFC	; 252
    32a6:	81 85       	ldd	r24, Z+9	; 0x09
    32a8:	92 85       	ldd	r25, Z+10	; 0x0a
    32aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ae:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z8setEventjPVj>
    32b2:	ff ef       	ldi	r31, 0xFF	; 255
    32b4:	ef 1a       	sub	r14, r31
    32b6:	ff 0a       	sbc	r15, r31
    32b8:	2d 96       	adiw	r28, 0x0d	; 13
    32ba:	0c 5f       	subi	r16, 0xFC	; 252
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	a1 cf       	rjmp	.-190    	; 0x3202 <__vector_15+0x76>
    32c0:	ff 91       	pop	r31
    32c2:	ef 91       	pop	r30
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	bf 91       	pop	r27
    32ca:	af 91       	pop	r26
    32cc:	9f 91       	pop	r25
    32ce:	8f 91       	pop	r24
    32d0:	7f 91       	pop	r23
    32d2:	6f 91       	pop	r22
    32d4:	5f 91       	pop	r21
    32d6:	4f 91       	pop	r20
    32d8:	3f 91       	pop	r19
    32da:	2f 91       	pop	r18
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	0f 90       	pop	r0
    32ea:	0b be       	out	0x3b, r0	; 59
    32ec:	0f 90       	pop	r0
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	0f 90       	pop	r0
    32f2:	1f 90       	pop	r1
    32f4:	18 95       	reti

000032f6 <_Z12declareTimerjh9timerModePFvvEjPVj>:
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	1f 92       	push	r1
    3304:	1f 92       	push	r1
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	dc 01       	movw	r26, r24
    330c:	1a 83       	std	Y+2, r17	; 0x02
    330e:	09 83       	std	Y+1, r16	; 0x01
    3310:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <timerStructInitialized>
    3314:	81 11       	cpse	r24, r1
    3316:	0d c0       	rjmp	.+26     	; 0x3332 <_Z12declareTimerjh9timerModePFvvEjPVj+0x3c>
    3318:	e8 e8       	ldi	r30, 0x88	; 136
    331a:	f3 e0       	ldi	r31, 0x03	; 3
    331c:	8f ef       	ldi	r24, 0xFF	; 255
    331e:	80 83       	st	Z, r24
    3320:	11 82       	std	Z+1, r1	; 0x01
    3322:	3d 96       	adiw	r30, 0x0d	; 13
    3324:	93 e0       	ldi	r25, 0x03	; 3
    3326:	e9 3c       	cpi	r30, 0xC9	; 201
    3328:	f9 07       	cpc	r31, r25
    332a:	c9 f7       	brne	.-14     	; 0x331e <_Z12declareTimerjh9timerModePFvvEjPVj+0x28>
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timerStructInitialized>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	9d e0       	ldi	r25, 0x0D	; 13
    3336:	98 9f       	mul	r25, r24
    3338:	f0 01       	movw	r30, r0
    333a:	11 24       	eor	r1, r1
    333c:	e8 57       	subi	r30, 0x78	; 120
    333e:	fc 4f       	sbci	r31, 0xFC	; 252
    3340:	50 81       	ld	r21, Z
    3342:	5f 3f       	cpi	r21, 0xFF	; 255
    3344:	11 f0       	breq	.+4      	; 0x334a <_Z12declareTimerjh9timerModePFvvEjPVj+0x54>
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	f6 cf       	rjmp	.-20     	; 0x3336 <_Z12declareTimerjh9timerModePFvvEjPVj+0x40>
    334a:	80 83       	st	Z, r24
    334c:	12 82       	std	Z+2, r1	; 0x02
    334e:	30 87       	std	Z+8, r19	; 0x08
    3350:	27 83       	std	Z+7, r18	; 0x07
    3352:	29 81       	ldd	r18, Y+1	; 0x01
    3354:	3a 81       	ldd	r19, Y+2	; 0x02
    3356:	32 87       	std	Z+10, r19	; 0x0a
    3358:	21 87       	std	Z+9, r18	; 0x09
    335a:	f4 86       	std	Z+12, r15	; 0x0c
    335c:	e3 86       	std	Z+11, r14	; 0x0b
    335e:	46 83       	std	Z+6, r20	; 0x06
    3360:	b4 83       	std	Z+4, r27	; 0x04
    3362:	a3 83       	std	Z+3, r26	; 0x03
    3364:	65 83       	std	Z+5, r22	; 0x05
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	ff 90       	pop	r15
    3374:	ef 90       	pop	r14
    3376:	08 95       	ret

00003378 <_Z10startTimerh>:
    3378:	cf 93       	push	r28
    337a:	c8 2f       	mov	r28, r24
    337c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timerInitialized>
    3380:	81 11       	cpse	r24, r1
    3382:	0c c0       	rjmp	.+24     	; 0x339c <_Z10startTimerh+0x24>
    3384:	f1 de       	rcall	.-542    	; 0x3168 <_Z12initMilliISRv>
    3386:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZL9global_ms>
    338a:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <_ZL9global_ms+0x1>
    338e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <_ZL9global_ms+0x2>
    3392:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <_ZL9global_ms+0x3>
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <timerInitialized>
    339c:	8d e0       	ldi	r24, 0x0D	; 13
    339e:	c8 9f       	mul	r28, r24
    33a0:	f0 01       	movw	r30, r0
    33a2:	11 24       	eor	r1, r1
    33a4:	e8 57       	subi	r30, 0x78	; 120
    33a6:	fc 4f       	sbci	r31, 0xFC	; 252
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	81 83       	std	Z+1, r24	; 0x01
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <_Z12timerElapsedh>:
    33b0:	2d e0       	ldi	r18, 0x0D	; 13
    33b2:	82 9f       	mul	r24, r18
    33b4:	c0 01       	movw	r24, r0
    33b6:	11 24       	eor	r1, r1
    33b8:	fc 01       	movw	r30, r24
    33ba:	e8 57       	subi	r30, 0x78	; 120
    33bc:	fc 4f       	sbci	r31, 0xFC	; 252
    33be:	82 81       	ldd	r24, Z+2	; 0x02
    33c0:	08 95       	ret

000033c2 <_Z17clearTimerElapsedh>:
    33c2:	2d e0       	ldi	r18, 0x0D	; 13
    33c4:	82 9f       	mul	r24, r18
    33c6:	c0 01       	movw	r24, r0
    33c8:	11 24       	eor	r1, r1
    33ca:	fc 01       	movw	r30, r24
    33cc:	e8 57       	subi	r30, 0x78	; 120
    33ce:	fc 4f       	sbci	r31, 0xFC	; 252
    33d0:	12 82       	std	Z+2, r1	; 0x02
    33d2:	08 95       	ret

000033d4 <_Z14setTimerPeriodhj>:
 
 void setTimerPeriod(uint8_t timerId, uint16_t _period)
 {
	 cli();
    33d4:	f8 94       	cli
	 timers[timerId].period = _period;
    33d6:	9d e0       	ldi	r25, 0x0D	; 13
    33d8:	89 9f       	mul	r24, r25
    33da:	f0 01       	movw	r30, r0
    33dc:	11 24       	eor	r1, r1
    33de:	e8 57       	subi	r30, 0x78	; 120
    33e0:	fc 4f       	sbci	r31, 0xFC	; 252
    33e2:	74 83       	std	Z+4, r23	; 0x04
    33e4:	63 83       	std	Z+3, r22	; 0x03
	 sei();
    33e6:	78 94       	sei
    33e8:	08 95       	ret

000033ea <_Z13getGolabal_msv>:
 }
 
uint32_t getGolabal_ms()
 {
	 cli();
    33ea:	f8 94       	cli
	 return global_ms;
    33ec:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <_ZL9global_ms>
    33f0:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <_ZL9global_ms+0x1>
    33f4:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <_ZL9global_ms+0x2>
    33f8:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <_ZL9global_ms+0x3>
	 sei();
    33fc:	08 95       	ret

000033fe <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh>:
	
	(*EICRx) |= (1<<ISCn0);
	EIMSK |= (1<<INTx0);	
	
	TCCR1B |= (1<<CS12);
}
    33fe:	fc 01       	movw	r30, r24
    3400:	63 30       	cpi	r22, 0x03	; 3
    3402:	59 f1       	breq	.+86     	; 0x345a <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0x5c>
    3404:	65 30       	cpi	r22, 0x05	; 5
    3406:	09 f4       	brne	.+2      	; 0x340a <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xc>
    3408:	4c c0       	rjmp	.+152    	; 0x34a2 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xa4>
    340a:	62 30       	cpi	r22, 0x02	; 2
    340c:	09 f0       	breq	.+2      	; 0x3410 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0x12>
    340e:	71 c0       	rjmp	.+226    	; 0x34f2 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xf4>
    3410:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    341a:	52 98       	cbi	0x0a, 2	; 10
    341c:	8b e0       	ldi	r24, 0x0B	; 11
    341e:	91 e0       	ldi	r25, 0x01	; 1
    3420:	97 83       	std	Z+7, r25	; 0x07
    3422:	86 83       	std	Z+6, r24	; 0x06
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 87       	std	Z+8, r24	; 0x08
    3428:	85 ee       	ldi	r24, 0xE5	; 229
    342a:	93 e0       	ldi	r25, 0x03	; 3
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	8f ef       	ldi	r24, 0xFF	; 255
    3432:	9f ef       	ldi	r25, 0xFF	; 255
    3434:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <CurrentDistance_INT_2+0x1>
    3438:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <CurrentDistance_INT_2>
    343c:	8d ed       	ldi	r24, 0xDD	; 221
    343e:	93 e0       	ldi	r25, 0x03	; 3
    3440:	93 83       	std	Z+3, r25	; 0x03
    3442:	82 83       	std	Z+2, r24	; 0x02
    3444:	81 ed       	ldi	r24, 0xD1	; 209
    3446:	93 e0       	ldi	r25, 0x03	; 3
    3448:	95 83       	std	Z+5, r25	; 0x05
    344a:	84 83       	std	Z+4, r24	; 0x04
    344c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3450:	80 61       	ori	r24, 0x10	; 16
    3452:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3456:	ea 9a       	sbi	0x1d, 2	; 29
    3458:	47 c0       	rjmp	.+142    	; 0x34e8 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xea>
    345a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    345e:	88 60       	ori	r24, 0x08	; 8
    3460:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    3464:	53 98       	cbi	0x0a, 3	; 10
    3466:	8b e0       	ldi	r24, 0x0B	; 11
    3468:	91 e0       	ldi	r25, 0x01	; 1
    346a:	97 83       	std	Z+7, r25	; 0x07
    346c:	86 83       	std	Z+6, r24	; 0x06
    346e:	60 87       	std	Z+8, r22	; 0x08
    3470:	83 ee       	ldi	r24, 0xE3	; 227
    3472:	93 e0       	ldi	r25, 0x03	; 3
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	80 83       	st	Z, r24
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	9f ef       	ldi	r25, 0xFF	; 255
    347c:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <CurrentDistance_INT_3+0x1>
    3480:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <CurrentDistance_INT_3>
    3484:	89 ed       	ldi	r24, 0xD9	; 217
    3486:	93 e0       	ldi	r25, 0x03	; 3
    3488:	93 83       	std	Z+3, r25	; 0x03
    348a:	82 83       	std	Z+2, r24	; 0x02
    348c:	8d ec       	ldi	r24, 0xCD	; 205
    348e:	93 e0       	ldi	r25, 0x03	; 3
    3490:	95 83       	std	Z+5, r25	; 0x05
    3492:	84 83       	std	Z+4, r24	; 0x04
    3494:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3498:	80 64       	ori	r24, 0x40	; 64
    349a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    349e:	eb 9a       	sbi	0x1d, 3	; 29
    34a0:	23 c0       	rjmp	.+70     	; 0x34e8 <_ZN31Ultra_Sonic_Range_Finder_DriverC1Eh+0xea>
    34a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    34a6:	80 62       	ori	r24, 0x20	; 32
    34a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    34ac:	6d 98       	cbi	0x0d, 5	; 13
    34ae:	8b e0       	ldi	r24, 0x0B	; 11
    34b0:	91 e0       	ldi	r25, 0x01	; 1
    34b2:	97 83       	std	Z+7, r25	; 0x07
    34b4:	86 83       	std	Z+6, r24	; 0x06
    34b6:	60 87       	std	Z+8, r22	; 0x08
    34b8:	81 ee       	ldi	r24, 0xE1	; 225
    34ba:	93 e0       	ldi	r25, 0x03	; 3
    34bc:	91 83       	std	Z+1, r25	; 0x01
    34be:	80 83       	st	Z, r24
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	9f ef       	ldi	r25, 0xFF	; 255
    34c4:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <CurrentDistance_INT_5+0x1>
    34c8:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <CurrentDistance_INT_5>
    34cc:	85 ed       	ldi	r24, 0xD5	; 213
    34ce:	93 e0       	ldi	r25, 0x03	; 3
    34d0:	93 83       	std	Z+3, r25	; 0x03
    34d2:	82 83       	std	Z+2, r24	; 0x02
    34d4:	89 ec       	ldi	r24, 0xC9	; 201
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	95 83       	std	Z+5, r25	; 0x05
    34da:	84 83       	std	Z+4, r24	; 0x04
    34dc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    34e0:	84 60       	ori	r24, 0x04	; 4
    34e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    34e6:	ed 9a       	sbi	0x1d, 5	; 29
    34e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    34ec:	84 60       	ori	r24, 0x04	; 4
    34ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    34f2:	08 95       	ret

000034f4 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv>:

void Ultra_Sonic_Range_Finder_Driver::pullTrigger()
{
    34f4:	dc 01       	movw	r26, r24
	*(this->PORTx_Trigger) |= (1<<this->PORTxN_Trigger);
    34f6:	16 96       	adiw	r26, 0x06	; 6
    34f8:	ed 91       	ld	r30, X+
    34fa:	fc 91       	ld	r31, X
    34fc:	17 97       	sbiw	r26, 0x07	; 7
    34fe:	40 81       	ld	r20, Z
    3500:	21 e0       	ldi	r18, 0x01	; 1
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	c9 01       	movw	r24, r18
    3506:	18 96       	adiw	r26, 0x08	; 8
    3508:	0c 90       	ld	r0, X
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv+0x1c>
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	0a 94       	dec	r0
    3512:	e2 f7       	brpl	.-8      	; 0x350c <_ZN31Ultra_Sonic_Range_Finder_Driver11pullTriggerEv+0x18>
    3514:	84 2b       	or	r24, r20
    3516:	80 83       	st	Z, r24
    3518:	08 95       	ret

0000351a <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv>:
}

void Ultra_Sonic_Range_Finder_Driver::stopTriggering()
{
	*(this->PORTx_Trigger) &= ~(1<<this->PORTxN_Trigger);
    351a:	dc 01       	movw	r26, r24
    351c:	16 96       	adiw	r26, 0x06	; 6
    351e:	ed 91       	ld	r30, X+
    3520:	fc 91       	ld	r31, X
    3522:	17 97       	sbiw	r26, 0x07	; 7
    3524:	40 81       	ld	r20, Z
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	b9 01       	movw	r22, r18
    352c:	18 96       	adiw	r26, 0x08	; 8
    352e:	0c 90       	ld	r0, X
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv+0x1c>
    3532:	66 0f       	add	r22, r22
    3534:	77 1f       	adc	r23, r23
    3536:	0a 94       	dec	r0
    3538:	e2 f7       	brpl	.-8      	; 0x3532 <_ZN31Ultra_Sonic_Range_Finder_Driver14stopTriggeringEv+0x18>
    353a:	cb 01       	movw	r24, r22
    353c:	80 95       	com	r24
    353e:	84 23       	and	r24, r20
    3540:	80 83       	st	Z, r24
    3542:	08 95       	ret

00003544 <_ZN31Ultra_Sonic_Range_Finder_Driver11getDistanceEv>:
}

int16_t Ultra_Sonic_Range_Finder_Driver::getDistance()
{
	cli();
    3544:	f8 94       	cli
	int16_t dist = *(this->CurrentDistance);
    3546:	dc 01       	movw	r26, r24
    3548:	ed 91       	ld	r30, X+
    354a:	fc 91       	ld	r31, X
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
	sei();
    3550:	78 94       	sei
	return dist;
}
    3552:	08 95       	ret

00003554 <_Z12Echo_INT_ISRPVhhPViPVmS4_>:

void Echo_INT_ISR(volatile uint8_t* PINx_Echo, uint8_t PINxN_Echo, volatile int16_t* _CurrentDistance, volatile uint32_t* _BurstSent_TimerTimestamp, volatile uint32_t* _BurstSent_MsTimestamp)
{
    3554:	4f 92       	push	r4
    3556:	5f 92       	push	r5
    3558:	6f 92       	push	r6
    355a:	7f 92       	push	r7
    355c:	8f 92       	push	r8
    355e:	9f 92       	push	r9
    3560:	af 92       	push	r10
    3562:	bf 92       	push	r11
    3564:	cf 92       	push	r12
    3566:	df 92       	push	r13
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	6c 01       	movw	r12, r24
    3576:	76 2e       	mov	r7, r22
    3578:	7a 01       	movw	r14, r20
    357a:	e9 01       	movw	r28, r18
	uint32_t TimerTimestamp = TCNT1;
    357c:	80 90 84 00 	lds	r8, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    3580:	90 90 85 00 	lds	r9, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    3584:	a1 2c       	mov	r10, r1
    3586:	b1 2c       	mov	r11, r1
	uint32_t msTimestamp = getGolabal_ms();
    3588:	30 df       	rcall	.-416    	; 0x33ea <_Z13getGolabal_msv>
	
	if ((*PINx_Echo) & (1<<PINxN_Echo))
    358a:	f6 01       	movw	r30, r12
    358c:	20 81       	ld	r18, Z
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x42>
    3592:	35 95       	asr	r19
    3594:	27 95       	ror	r18
    3596:	7a 94       	dec	r7
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x3e>
    359a:	20 ff       	sbrs	r18, 0
    359c:	0a c0       	rjmp	.+20     	; 0x35b2 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x5e>
	{
		*_BurstSent_TimerTimestamp = TimerTimestamp;
    359e:	88 82       	st	Y, r8
    35a0:	99 82       	std	Y+1, r9	; 0x01
    35a2:	aa 82       	std	Y+2, r10	; 0x02
    35a4:	bb 82       	std	Y+3, r11	; 0x03
		*_BurstSent_MsTimestamp = msTimestamp;
    35a6:	f8 01       	movw	r30, r16
    35a8:	60 83       	st	Z, r22
    35aa:	71 83       	std	Z+1, r23	; 0x01
    35ac:	82 83       	std	Z+2, r24	; 0x02
    35ae:	93 83       	std	Z+3, r25	; 0x03
    35b0:	3a c0       	rjmp	.+116    	; 0x3626 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xd2>
	}
	else
	{
		if(TimerTimestamp < (*_BurstSent_TimerTimestamp))
    35b2:	48 80       	ld	r4, Y
    35b4:	59 80       	ldd	r5, Y+1	; 0x01
    35b6:	6a 80       	ldd	r6, Y+2	; 0x02
    35b8:	7b 80       	ldd	r7, Y+3	; 0x03
    35ba:	84 14       	cp	r8, r4
    35bc:	95 04       	cpc	r9, r5
    35be:	a6 04       	cpc	r10, r6
    35c0:	b7 04       	cpc	r11, r7
    35c2:	30 f4       	brcc	.+12     	; 0x35d0 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0x7c>
		{
			TimerTimestamp = TIMER_1_TOP + TimerTimestamp + 1;
    35c4:	fa e9       	ldi	r31, 0x9A	; 154
    35c6:	8f 0e       	add	r8, r31
    35c8:	f9 e1       	ldi	r31, 0x19	; 25
    35ca:	9f 1e       	adc	r9, r31
    35cc:	a1 1c       	adc	r10, r1
    35ce:	b1 1c       	adc	r11, r1
		}
		
		uint32_t TravelTime_us = (TimerTimestamp - (*_BurstSent_TimerTimestamp))*16; // 1 timer tick = 16us
    35d0:	48 80       	ld	r4, Y
    35d2:	59 80       	ldd	r5, Y+1	; 0x01
    35d4:	6a 80       	ldd	r6, Y+2	; 0x02
    35d6:	7b 80       	ldd	r7, Y+3	; 0x03
		uint32_t TravelTime_ms = msTimestamp - (*_BurstSent_MsTimestamp);
    35d8:	f8 01       	movw	r30, r16
    35da:	00 81       	ld	r16, Z
    35dc:	11 81       	ldd	r17, Z+1	; 0x01
    35de:	22 81       	ldd	r18, Z+2	; 0x02
    35e0:	33 81       	ldd	r19, Z+3	; 0x03
		if(TravelTime_ms > 8)
    35e2:	ab 01       	movw	r20, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	40 1b       	sub	r20, r16
    35e8:	51 0b       	sbc	r21, r17
    35ea:	62 0b       	sbc	r22, r18
    35ec:	73 0b       	sbc	r23, r19
    35ee:	49 30       	cpi	r20, 0x09	; 9
    35f0:	51 05       	cpc	r21, r1
    35f2:	61 05       	cpc	r22, r1
    35f4:	71 05       	cpc	r23, r1
    35f6:	30 f0       	brcs	.+12     	; 0x3604 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xb0>
		{
			(*_CurrentDistance) = 1000;
    35f8:	88 ee       	ldi	r24, 0xE8	; 232
    35fa:	93 e0       	ldi	r25, 0x03	; 3
    35fc:	f7 01       	movw	r30, r14
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	11 c0       	rjmp	.+34     	; 0x3626 <_Z12Echo_INT_ISRPVhhPViPVmS4_+0xd2>
		}
		else
		{
			(*_CurrentDistance) = ((TravelTime_us*10)/58)/10;
    3604:	a5 01       	movw	r20, r10
    3606:	94 01       	movw	r18, r8
    3608:	24 19       	sub	r18, r4
    360a:	35 09       	sbc	r19, r5
    360c:	46 09       	sbc	r20, r6
    360e:	57 09       	sbc	r21, r7
    3610:	a0 ea       	ldi	r26, 0xA0	; 160
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	65 d5       	rcall	.+2762   	; 0x40e0 <__muluhisi3>
    3616:	24 e4       	ldi	r18, 0x44	; 68
    3618:	32 e0       	ldi	r19, 0x02	; 2
    361a:	40 e0       	ldi	r20, 0x00	; 0
    361c:	50 e0       	ldi	r21, 0x00	; 0
    361e:	13 d5       	rcall	.+2598   	; 0x4046 <__udivmodsi4>
    3620:	f7 01       	movw	r30, r14
    3622:	31 83       	std	Z+1, r19	; 0x01
    3624:	20 83       	st	Z, r18
			
	}	
	//(*_CurrentDistance) = ((TravelTime*10)/58)/10;
	
	//(*_CurrentDistance) = (TravelTime * 625) / 58000;
}
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	cf 90       	pop	r12
    3636:	bf 90       	pop	r11
    3638:	af 90       	pop	r10
    363a:	9f 90       	pop	r9
    363c:	8f 90       	pop	r8
    363e:	7f 90       	pop	r7
    3640:	6f 90       	pop	r6
    3642:	5f 90       	pop	r5
    3644:	4f 90       	pop	r4
    3646:	08 95       	ret

00003648 <__vector_3>:


ISR(INT2_vect)
{
    3648:	1f 92       	push	r1
    364a:	0f 92       	push	r0
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	0f 92       	push	r0
    3650:	11 24       	eor	r1, r1
    3652:	0b b6       	in	r0, 0x3b	; 59
    3654:	0f 92       	push	r0
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	2f 93       	push	r18
    365c:	3f 93       	push	r19
    365e:	4f 93       	push	r20
    3660:	5f 93       	push	r21
    3662:	6f 93       	push	r22
    3664:	7f 93       	push	r23
    3666:	8f 93       	push	r24
    3668:	9f 93       	push	r25
    366a:	af 93       	push	r26
    366c:	bf 93       	push	r27
    366e:	ef 93       	push	r30
    3670:	ff 93       	push	r31
	Echo_INT_ISR(&PIND, PIND2, &CurrentDistance_INT_2, &BurstSent_Timestamp_INT_2, &BurstSent_Timestamp_Ms_INT_2);
    3672:	01 ed       	ldi	r16, 0xD1	; 209
    3674:	13 e0       	ldi	r17, 0x03	; 3
    3676:	2d ed       	ldi	r18, 0xDD	; 221
    3678:	33 e0       	ldi	r19, 0x03	; 3
    367a:	45 ee       	ldi	r20, 0xE5	; 229
    367c:	53 e0       	ldi	r21, 0x03	; 3
    367e:	62 e0       	ldi	r22, 0x02	; 2
    3680:	89 e2       	ldi	r24, 0x29	; 41
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	67 df       	rcall	.-306    	; 0x3554 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
}
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	bf 91       	pop	r27
    368c:	af 91       	pop	r26
    368e:	9f 91       	pop	r25
    3690:	8f 91       	pop	r24
    3692:	7f 91       	pop	r23
    3694:	6f 91       	pop	r22
    3696:	5f 91       	pop	r21
    3698:	4f 91       	pop	r20
    369a:	3f 91       	pop	r19
    369c:	2f 91       	pop	r18
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	0f 90       	pop	r0
    36a4:	0b be       	out	0x3b, r0	; 59
    36a6:	0f 90       	pop	r0
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	0f 90       	pop	r0
    36ac:	1f 90       	pop	r1
    36ae:	18 95       	reti

000036b0 <__vector_4>:

ISR(INT3_vect)
{
    36b0:	1f 92       	push	r1
    36b2:	0f 92       	push	r0
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	0f 92       	push	r0
    36b8:	11 24       	eor	r1, r1
    36ba:	0b b6       	in	r0, 0x3b	; 59
    36bc:	0f 92       	push	r0
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	2f 93       	push	r18
    36c4:	3f 93       	push	r19
    36c6:	4f 93       	push	r20
    36c8:	5f 93       	push	r21
    36ca:	6f 93       	push	r22
    36cc:	7f 93       	push	r23
    36ce:	8f 93       	push	r24
    36d0:	9f 93       	push	r25
    36d2:	af 93       	push	r26
    36d4:	bf 93       	push	r27
    36d6:	ef 93       	push	r30
    36d8:	ff 93       	push	r31
	Echo_INT_ISR(&PIND, PIND3, &CurrentDistance_INT_3, &BurstSent_Timestamp_INT_3, &BurstSent_Timestamp_Ms_INT_3);
    36da:	0d ec       	ldi	r16, 0xCD	; 205
    36dc:	13 e0       	ldi	r17, 0x03	; 3
    36de:	29 ed       	ldi	r18, 0xD9	; 217
    36e0:	33 e0       	ldi	r19, 0x03	; 3
    36e2:	43 ee       	ldi	r20, 0xE3	; 227
    36e4:	53 e0       	ldi	r21, 0x03	; 3
    36e6:	63 e0       	ldi	r22, 0x03	; 3
    36e8:	89 e2       	ldi	r24, 0x29	; 41
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	33 df       	rcall	.-410    	; 0x3554 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
}
    36ee:	ff 91       	pop	r31
    36f0:	ef 91       	pop	r30
    36f2:	bf 91       	pop	r27
    36f4:	af 91       	pop	r26
    36f6:	9f 91       	pop	r25
    36f8:	8f 91       	pop	r24
    36fa:	7f 91       	pop	r23
    36fc:	6f 91       	pop	r22
    36fe:	5f 91       	pop	r21
    3700:	4f 91       	pop	r20
    3702:	3f 91       	pop	r19
    3704:	2f 91       	pop	r18
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	0f 90       	pop	r0
    370c:	0b be       	out	0x3b, r0	; 59
    370e:	0f 90       	pop	r0
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	0f 90       	pop	r0
    3714:	1f 90       	pop	r1
    3716:	18 95       	reti

00003718 <__vector_6>:

ISR(INT5_vect)
{
    3718:	1f 92       	push	r1
    371a:	0f 92       	push	r0
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	0f 92       	push	r0
    3720:	11 24       	eor	r1, r1
    3722:	0b b6       	in	r0, 0x3b	; 59
    3724:	0f 92       	push	r0
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	ef 93       	push	r30
    3740:	ff 93       	push	r31
	Echo_INT_ISR(&PINE, PINE5, &CurrentDistance_INT_5, &BurstSent_Timestamp_INT_5, &BurstSent_Timestamp_Ms_INT_5);
    3742:	09 ec       	ldi	r16, 0xC9	; 201
    3744:	13 e0       	ldi	r17, 0x03	; 3
    3746:	25 ed       	ldi	r18, 0xD5	; 213
    3748:	33 e0       	ldi	r19, 0x03	; 3
    374a:	41 ee       	ldi	r20, 0xE1	; 225
    374c:	53 e0       	ldi	r21, 0x03	; 3
    374e:	65 e0       	ldi	r22, 0x05	; 5
    3750:	8c e2       	ldi	r24, 0x2C	; 44
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	ff de       	rcall	.-514    	; 0x3554 <_Z12Echo_INT_ISRPVhhPViPVmS4_>
    3756:	ff 91       	pop	r31
    3758:	ef 91       	pop	r30
    375a:	bf 91       	pop	r27
    375c:	af 91       	pop	r26
    375e:	9f 91       	pop	r25
    3760:	8f 91       	pop	r24
    3762:	7f 91       	pop	r23
    3764:	6f 91       	pop	r22
    3766:	5f 91       	pop	r21
    3768:	4f 91       	pop	r20
    376a:	3f 91       	pop	r19
    376c:	2f 91       	pop	r18
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	0f 90       	pop	r0
    3774:	0b be       	out	0x3b, r0	; 59
    3776:	0f 90       	pop	r0
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	0f 90       	pop	r0
    377c:	1f 90       	pop	r1
    377e:	18 95       	reti

00003780 <__subsf3>:
    3780:	50 58       	subi	r21, 0x80	; 128

00003782 <__addsf3>:
    3782:	bb 27       	eor	r27, r27
    3784:	aa 27       	eor	r26, r26
    3786:	0e d0       	rcall	.+28     	; 0x37a4 <__addsf3x>
    3788:	4d c1       	rjmp	.+666    	; 0x3a24 <__fp_round>
    378a:	3e d1       	rcall	.+636    	; 0x3a08 <__fp_pscA>
    378c:	30 f0       	brcs	.+12     	; 0x379a <__addsf3+0x18>
    378e:	43 d1       	rcall	.+646    	; 0x3a16 <__fp_pscB>
    3790:	20 f0       	brcs	.+8      	; 0x379a <__addsf3+0x18>
    3792:	31 f4       	brne	.+12     	; 0x37a0 <__addsf3+0x1e>
    3794:	9f 3f       	cpi	r25, 0xFF	; 255
    3796:	11 f4       	brne	.+4      	; 0x379c <__addsf3+0x1a>
    3798:	1e f4       	brtc	.+6      	; 0x37a0 <__addsf3+0x1e>
    379a:	33 c1       	rjmp	.+614    	; 0x3a02 <__fp_nan>
    379c:	0e f4       	brtc	.+2      	; 0x37a0 <__addsf3+0x1e>
    379e:	e0 95       	com	r30
    37a0:	e7 fb       	bst	r30, 7
    37a2:	29 c1       	rjmp	.+594    	; 0x39f6 <__fp_inf>

000037a4 <__addsf3x>:
    37a4:	e9 2f       	mov	r30, r25
    37a6:	4f d1       	rcall	.+670    	; 0x3a46 <__fp_split3>
    37a8:	80 f3       	brcs	.-32     	; 0x378a <__addsf3+0x8>
    37aa:	ba 17       	cp	r27, r26
    37ac:	62 07       	cpc	r22, r18
    37ae:	73 07       	cpc	r23, r19
    37b0:	84 07       	cpc	r24, r20
    37b2:	95 07       	cpc	r25, r21
    37b4:	18 f0       	brcs	.+6      	; 0x37bc <__addsf3x+0x18>
    37b6:	71 f4       	brne	.+28     	; 0x37d4 <__addsf3x+0x30>
    37b8:	9e f5       	brtc	.+102    	; 0x3820 <__addsf3x+0x7c>
    37ba:	67 c1       	rjmp	.+718    	; 0x3a8a <__fp_zero>
    37bc:	0e f4       	brtc	.+2      	; 0x37c0 <__addsf3x+0x1c>
    37be:	e0 95       	com	r30
    37c0:	0b 2e       	mov	r0, r27
    37c2:	ba 2f       	mov	r27, r26
    37c4:	a0 2d       	mov	r26, r0
    37c6:	0b 01       	movw	r0, r22
    37c8:	b9 01       	movw	r22, r18
    37ca:	90 01       	movw	r18, r0
    37cc:	0c 01       	movw	r0, r24
    37ce:	ca 01       	movw	r24, r20
    37d0:	a0 01       	movw	r20, r0
    37d2:	11 24       	eor	r1, r1
    37d4:	ff 27       	eor	r31, r31
    37d6:	59 1b       	sub	r21, r25
    37d8:	99 f0       	breq	.+38     	; 0x3800 <__addsf3x+0x5c>
    37da:	59 3f       	cpi	r21, 0xF9	; 249
    37dc:	50 f4       	brcc	.+20     	; 0x37f2 <__addsf3x+0x4e>
    37de:	50 3e       	cpi	r21, 0xE0	; 224
    37e0:	68 f1       	brcs	.+90     	; 0x383c <__addsf3x+0x98>
    37e2:	1a 16       	cp	r1, r26
    37e4:	f0 40       	sbci	r31, 0x00	; 0
    37e6:	a2 2f       	mov	r26, r18
    37e8:	23 2f       	mov	r18, r19
    37ea:	34 2f       	mov	r19, r20
    37ec:	44 27       	eor	r20, r20
    37ee:	58 5f       	subi	r21, 0xF8	; 248
    37f0:	f3 cf       	rjmp	.-26     	; 0x37d8 <__addsf3x+0x34>
    37f2:	46 95       	lsr	r20
    37f4:	37 95       	ror	r19
    37f6:	27 95       	ror	r18
    37f8:	a7 95       	ror	r26
    37fa:	f0 40       	sbci	r31, 0x00	; 0
    37fc:	53 95       	inc	r21
    37fe:	c9 f7       	brne	.-14     	; 0x37f2 <__addsf3x+0x4e>
    3800:	7e f4       	brtc	.+30     	; 0x3820 <__addsf3x+0x7c>
    3802:	1f 16       	cp	r1, r31
    3804:	ba 0b       	sbc	r27, r26
    3806:	62 0b       	sbc	r22, r18
    3808:	73 0b       	sbc	r23, r19
    380a:	84 0b       	sbc	r24, r20
    380c:	ba f0       	brmi	.+46     	; 0x383c <__addsf3x+0x98>
    380e:	91 50       	subi	r25, 0x01	; 1
    3810:	a1 f0       	breq	.+40     	; 0x383a <__addsf3x+0x96>
    3812:	ff 0f       	add	r31, r31
    3814:	bb 1f       	adc	r27, r27
    3816:	66 1f       	adc	r22, r22
    3818:	77 1f       	adc	r23, r23
    381a:	88 1f       	adc	r24, r24
    381c:	c2 f7       	brpl	.-16     	; 0x380e <__addsf3x+0x6a>
    381e:	0e c0       	rjmp	.+28     	; 0x383c <__addsf3x+0x98>
    3820:	ba 0f       	add	r27, r26
    3822:	62 1f       	adc	r22, r18
    3824:	73 1f       	adc	r23, r19
    3826:	84 1f       	adc	r24, r20
    3828:	48 f4       	brcc	.+18     	; 0x383c <__addsf3x+0x98>
    382a:	87 95       	ror	r24
    382c:	77 95       	ror	r23
    382e:	67 95       	ror	r22
    3830:	b7 95       	ror	r27
    3832:	f7 95       	ror	r31
    3834:	9e 3f       	cpi	r25, 0xFE	; 254
    3836:	08 f0       	brcs	.+2      	; 0x383a <__addsf3x+0x96>
    3838:	b3 cf       	rjmp	.-154    	; 0x37a0 <__addsf3+0x1e>
    383a:	93 95       	inc	r25
    383c:	88 0f       	add	r24, r24
    383e:	08 f0       	brcs	.+2      	; 0x3842 <__addsf3x+0x9e>
    3840:	99 27       	eor	r25, r25
    3842:	ee 0f       	add	r30, r30
    3844:	97 95       	ror	r25
    3846:	87 95       	ror	r24
    3848:	08 95       	ret

0000384a <__divsf3>:
    384a:	0c d0       	rcall	.+24     	; 0x3864 <__divsf3x>
    384c:	eb c0       	rjmp	.+470    	; 0x3a24 <__fp_round>
    384e:	e3 d0       	rcall	.+454    	; 0x3a16 <__fp_pscB>
    3850:	40 f0       	brcs	.+16     	; 0x3862 <__divsf3+0x18>
    3852:	da d0       	rcall	.+436    	; 0x3a08 <__fp_pscA>
    3854:	30 f0       	brcs	.+12     	; 0x3862 <__divsf3+0x18>
    3856:	21 f4       	brne	.+8      	; 0x3860 <__divsf3+0x16>
    3858:	5f 3f       	cpi	r21, 0xFF	; 255
    385a:	19 f0       	breq	.+6      	; 0x3862 <__divsf3+0x18>
    385c:	cc c0       	rjmp	.+408    	; 0x39f6 <__fp_inf>
    385e:	51 11       	cpse	r21, r1
    3860:	15 c1       	rjmp	.+554    	; 0x3a8c <__fp_szero>
    3862:	cf c0       	rjmp	.+414    	; 0x3a02 <__fp_nan>

00003864 <__divsf3x>:
    3864:	f0 d0       	rcall	.+480    	; 0x3a46 <__fp_split3>
    3866:	98 f3       	brcs	.-26     	; 0x384e <__divsf3+0x4>

00003868 <__divsf3_pse>:
    3868:	99 23       	and	r25, r25
    386a:	c9 f3       	breq	.-14     	; 0x385e <__divsf3+0x14>
    386c:	55 23       	and	r21, r21
    386e:	b1 f3       	breq	.-20     	; 0x385c <__divsf3+0x12>
    3870:	95 1b       	sub	r25, r21
    3872:	55 0b       	sbc	r21, r21
    3874:	bb 27       	eor	r27, r27
    3876:	aa 27       	eor	r26, r26
    3878:	62 17       	cp	r22, r18
    387a:	73 07       	cpc	r23, r19
    387c:	84 07       	cpc	r24, r20
    387e:	38 f0       	brcs	.+14     	; 0x388e <__divsf3_pse+0x26>
    3880:	9f 5f       	subi	r25, 0xFF	; 255
    3882:	5f 4f       	sbci	r21, 0xFF	; 255
    3884:	22 0f       	add	r18, r18
    3886:	33 1f       	adc	r19, r19
    3888:	44 1f       	adc	r20, r20
    388a:	aa 1f       	adc	r26, r26
    388c:	a9 f3       	breq	.-22     	; 0x3878 <__divsf3_pse+0x10>
    388e:	33 d0       	rcall	.+102    	; 0x38f6 <__divsf3_pse+0x8e>
    3890:	0e 2e       	mov	r0, r30
    3892:	3a f0       	brmi	.+14     	; 0x38a2 <__divsf3_pse+0x3a>
    3894:	e0 e8       	ldi	r30, 0x80	; 128
    3896:	30 d0       	rcall	.+96     	; 0x38f8 <__divsf3_pse+0x90>
    3898:	91 50       	subi	r25, 0x01	; 1
    389a:	50 40       	sbci	r21, 0x00	; 0
    389c:	e6 95       	lsr	r30
    389e:	00 1c       	adc	r0, r0
    38a0:	ca f7       	brpl	.-14     	; 0x3894 <__divsf3_pse+0x2c>
    38a2:	29 d0       	rcall	.+82     	; 0x38f6 <__divsf3_pse+0x8e>
    38a4:	fe 2f       	mov	r31, r30
    38a6:	27 d0       	rcall	.+78     	; 0x38f6 <__divsf3_pse+0x8e>
    38a8:	66 0f       	add	r22, r22
    38aa:	77 1f       	adc	r23, r23
    38ac:	88 1f       	adc	r24, r24
    38ae:	bb 1f       	adc	r27, r27
    38b0:	26 17       	cp	r18, r22
    38b2:	37 07       	cpc	r19, r23
    38b4:	48 07       	cpc	r20, r24
    38b6:	ab 07       	cpc	r26, r27
    38b8:	b0 e8       	ldi	r27, 0x80	; 128
    38ba:	09 f0       	breq	.+2      	; 0x38be <__divsf3_pse+0x56>
    38bc:	bb 0b       	sbc	r27, r27
    38be:	80 2d       	mov	r24, r0
    38c0:	bf 01       	movw	r22, r30
    38c2:	ff 27       	eor	r31, r31
    38c4:	93 58       	subi	r25, 0x83	; 131
    38c6:	5f 4f       	sbci	r21, 0xFF	; 255
    38c8:	2a f0       	brmi	.+10     	; 0x38d4 <__divsf3_pse+0x6c>
    38ca:	9e 3f       	cpi	r25, 0xFE	; 254
    38cc:	51 05       	cpc	r21, r1
    38ce:	68 f0       	brcs	.+26     	; 0x38ea <__divsf3_pse+0x82>
    38d0:	92 c0       	rjmp	.+292    	; 0x39f6 <__fp_inf>
    38d2:	dc c0       	rjmp	.+440    	; 0x3a8c <__fp_szero>
    38d4:	5f 3f       	cpi	r21, 0xFF	; 255
    38d6:	ec f3       	brlt	.-6      	; 0x38d2 <__divsf3_pse+0x6a>
    38d8:	98 3e       	cpi	r25, 0xE8	; 232
    38da:	dc f3       	brlt	.-10     	; 0x38d2 <__divsf3_pse+0x6a>
    38dc:	86 95       	lsr	r24
    38de:	77 95       	ror	r23
    38e0:	67 95       	ror	r22
    38e2:	b7 95       	ror	r27
    38e4:	f7 95       	ror	r31
    38e6:	9f 5f       	subi	r25, 0xFF	; 255
    38e8:	c9 f7       	brne	.-14     	; 0x38dc <__divsf3_pse+0x74>
    38ea:	88 0f       	add	r24, r24
    38ec:	91 1d       	adc	r25, r1
    38ee:	96 95       	lsr	r25
    38f0:	87 95       	ror	r24
    38f2:	97 f9       	bld	r25, 7
    38f4:	08 95       	ret
    38f6:	e1 e0       	ldi	r30, 0x01	; 1
    38f8:	66 0f       	add	r22, r22
    38fa:	77 1f       	adc	r23, r23
    38fc:	88 1f       	adc	r24, r24
    38fe:	bb 1f       	adc	r27, r27
    3900:	62 17       	cp	r22, r18
    3902:	73 07       	cpc	r23, r19
    3904:	84 07       	cpc	r24, r20
    3906:	ba 07       	cpc	r27, r26
    3908:	20 f0       	brcs	.+8      	; 0x3912 <__divsf3_pse+0xaa>
    390a:	62 1b       	sub	r22, r18
    390c:	73 0b       	sbc	r23, r19
    390e:	84 0b       	sbc	r24, r20
    3910:	ba 0b       	sbc	r27, r26
    3912:	ee 1f       	adc	r30, r30
    3914:	88 f7       	brcc	.-30     	; 0x38f8 <__divsf3_pse+0x90>
    3916:	e0 95       	com	r30
    3918:	08 95       	ret

0000391a <__fixsfsi>:
    391a:	04 d0       	rcall	.+8      	; 0x3924 <__fixunssfsi>
    391c:	68 94       	set
    391e:	b1 11       	cpse	r27, r1
    3920:	b5 c0       	rjmp	.+362    	; 0x3a8c <__fp_szero>
    3922:	08 95       	ret

00003924 <__fixunssfsi>:
    3924:	98 d0       	rcall	.+304    	; 0x3a56 <__fp_splitA>
    3926:	88 f0       	brcs	.+34     	; 0x394a <__fixunssfsi+0x26>
    3928:	9f 57       	subi	r25, 0x7F	; 127
    392a:	90 f0       	brcs	.+36     	; 0x3950 <__fixunssfsi+0x2c>
    392c:	b9 2f       	mov	r27, r25
    392e:	99 27       	eor	r25, r25
    3930:	b7 51       	subi	r27, 0x17	; 23
    3932:	a0 f0       	brcs	.+40     	; 0x395c <__fixunssfsi+0x38>
    3934:	d1 f0       	breq	.+52     	; 0x396a <__fixunssfsi+0x46>
    3936:	66 0f       	add	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	88 1f       	adc	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	1a f0       	brmi	.+6      	; 0x3946 <__fixunssfsi+0x22>
    3940:	ba 95       	dec	r27
    3942:	c9 f7       	brne	.-14     	; 0x3936 <__fixunssfsi+0x12>
    3944:	12 c0       	rjmp	.+36     	; 0x396a <__fixunssfsi+0x46>
    3946:	b1 30       	cpi	r27, 0x01	; 1
    3948:	81 f0       	breq	.+32     	; 0x396a <__fixunssfsi+0x46>
    394a:	9f d0       	rcall	.+318    	; 0x3a8a <__fp_zero>
    394c:	b1 e0       	ldi	r27, 0x01	; 1
    394e:	08 95       	ret
    3950:	9c c0       	rjmp	.+312    	; 0x3a8a <__fp_zero>
    3952:	67 2f       	mov	r22, r23
    3954:	78 2f       	mov	r23, r24
    3956:	88 27       	eor	r24, r24
    3958:	b8 5f       	subi	r27, 0xF8	; 248
    395a:	39 f0       	breq	.+14     	; 0x396a <__fixunssfsi+0x46>
    395c:	b9 3f       	cpi	r27, 0xF9	; 249
    395e:	cc f3       	brlt	.-14     	; 0x3952 <__fixunssfsi+0x2e>
    3960:	86 95       	lsr	r24
    3962:	77 95       	ror	r23
    3964:	67 95       	ror	r22
    3966:	b3 95       	inc	r27
    3968:	d9 f7       	brne	.-10     	; 0x3960 <__fixunssfsi+0x3c>
    396a:	3e f4       	brtc	.+14     	; 0x397a <__fixunssfsi+0x56>
    396c:	90 95       	com	r25
    396e:	80 95       	com	r24
    3970:	70 95       	com	r23
    3972:	61 95       	neg	r22
    3974:	7f 4f       	sbci	r23, 0xFF	; 255
    3976:	8f 4f       	sbci	r24, 0xFF	; 255
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	08 95       	ret

0000397c <__floatunsisf>:
    397c:	e8 94       	clt
    397e:	09 c0       	rjmp	.+18     	; 0x3992 <__floatsisf+0x12>

00003980 <__floatsisf>:
    3980:	97 fb       	bst	r25, 7
    3982:	3e f4       	brtc	.+14     	; 0x3992 <__floatsisf+0x12>
    3984:	90 95       	com	r25
    3986:	80 95       	com	r24
    3988:	70 95       	com	r23
    398a:	61 95       	neg	r22
    398c:	7f 4f       	sbci	r23, 0xFF	; 255
    398e:	8f 4f       	sbci	r24, 0xFF	; 255
    3990:	9f 4f       	sbci	r25, 0xFF	; 255
    3992:	99 23       	and	r25, r25
    3994:	a9 f0       	breq	.+42     	; 0x39c0 <__floatsisf+0x40>
    3996:	f9 2f       	mov	r31, r25
    3998:	96 e9       	ldi	r25, 0x96	; 150
    399a:	bb 27       	eor	r27, r27
    399c:	93 95       	inc	r25
    399e:	f6 95       	lsr	r31
    39a0:	87 95       	ror	r24
    39a2:	77 95       	ror	r23
    39a4:	67 95       	ror	r22
    39a6:	b7 95       	ror	r27
    39a8:	f1 11       	cpse	r31, r1
    39aa:	f8 cf       	rjmp	.-16     	; 0x399c <__floatsisf+0x1c>
    39ac:	fa f4       	brpl	.+62     	; 0x39ec <__floatsisf+0x6c>
    39ae:	bb 0f       	add	r27, r27
    39b0:	11 f4       	brne	.+4      	; 0x39b6 <__floatsisf+0x36>
    39b2:	60 ff       	sbrs	r22, 0
    39b4:	1b c0       	rjmp	.+54     	; 0x39ec <__floatsisf+0x6c>
    39b6:	6f 5f       	subi	r22, 0xFF	; 255
    39b8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ba:	8f 4f       	sbci	r24, 0xFF	; 255
    39bc:	9f 4f       	sbci	r25, 0xFF	; 255
    39be:	16 c0       	rjmp	.+44     	; 0x39ec <__floatsisf+0x6c>
    39c0:	88 23       	and	r24, r24
    39c2:	11 f0       	breq	.+4      	; 0x39c8 <__floatsisf+0x48>
    39c4:	96 e9       	ldi	r25, 0x96	; 150
    39c6:	11 c0       	rjmp	.+34     	; 0x39ea <__floatsisf+0x6a>
    39c8:	77 23       	and	r23, r23
    39ca:	21 f0       	breq	.+8      	; 0x39d4 <__floatsisf+0x54>
    39cc:	9e e8       	ldi	r25, 0x8E	; 142
    39ce:	87 2f       	mov	r24, r23
    39d0:	76 2f       	mov	r23, r22
    39d2:	05 c0       	rjmp	.+10     	; 0x39de <__floatsisf+0x5e>
    39d4:	66 23       	and	r22, r22
    39d6:	71 f0       	breq	.+28     	; 0x39f4 <__floatsisf+0x74>
    39d8:	96 e8       	ldi	r25, 0x86	; 134
    39da:	86 2f       	mov	r24, r22
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	2a f0       	brmi	.+10     	; 0x39ec <__floatsisf+0x6c>
    39e2:	9a 95       	dec	r25
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 1f       	adc	r24, r24
    39ea:	da f7       	brpl	.-10     	; 0x39e2 <__floatsisf+0x62>
    39ec:	88 0f       	add	r24, r24
    39ee:	96 95       	lsr	r25
    39f0:	87 95       	ror	r24
    39f2:	97 f9       	bld	r25, 7
    39f4:	08 95       	ret

000039f6 <__fp_inf>:
    39f6:	97 f9       	bld	r25, 7
    39f8:	9f 67       	ori	r25, 0x7F	; 127
    39fa:	80 e8       	ldi	r24, 0x80	; 128
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	08 95       	ret

00003a02 <__fp_nan>:
    3a02:	9f ef       	ldi	r25, 0xFF	; 255
    3a04:	80 ec       	ldi	r24, 0xC0	; 192
    3a06:	08 95       	ret

00003a08 <__fp_pscA>:
    3a08:	00 24       	eor	r0, r0
    3a0a:	0a 94       	dec	r0
    3a0c:	16 16       	cp	r1, r22
    3a0e:	17 06       	cpc	r1, r23
    3a10:	18 06       	cpc	r1, r24
    3a12:	09 06       	cpc	r0, r25
    3a14:	08 95       	ret

00003a16 <__fp_pscB>:
    3a16:	00 24       	eor	r0, r0
    3a18:	0a 94       	dec	r0
    3a1a:	12 16       	cp	r1, r18
    3a1c:	13 06       	cpc	r1, r19
    3a1e:	14 06       	cpc	r1, r20
    3a20:	05 06       	cpc	r0, r21
    3a22:	08 95       	ret

00003a24 <__fp_round>:
    3a24:	09 2e       	mov	r0, r25
    3a26:	03 94       	inc	r0
    3a28:	00 0c       	add	r0, r0
    3a2a:	11 f4       	brne	.+4      	; 0x3a30 <__fp_round+0xc>
    3a2c:	88 23       	and	r24, r24
    3a2e:	52 f0       	brmi	.+20     	; 0x3a44 <__fp_round+0x20>
    3a30:	bb 0f       	add	r27, r27
    3a32:	40 f4       	brcc	.+16     	; 0x3a44 <__fp_round+0x20>
    3a34:	bf 2b       	or	r27, r31
    3a36:	11 f4       	brne	.+4      	; 0x3a3c <__fp_round+0x18>
    3a38:	60 ff       	sbrs	r22, 0
    3a3a:	04 c0       	rjmp	.+8      	; 0x3a44 <__fp_round+0x20>
    3a3c:	6f 5f       	subi	r22, 0xFF	; 255
    3a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a40:	8f 4f       	sbci	r24, 0xFF	; 255
    3a42:	9f 4f       	sbci	r25, 0xFF	; 255
    3a44:	08 95       	ret

00003a46 <__fp_split3>:
    3a46:	57 fd       	sbrc	r21, 7
    3a48:	90 58       	subi	r25, 0x80	; 128
    3a4a:	44 0f       	add	r20, r20
    3a4c:	55 1f       	adc	r21, r21
    3a4e:	59 f0       	breq	.+22     	; 0x3a66 <__fp_splitA+0x10>
    3a50:	5f 3f       	cpi	r21, 0xFF	; 255
    3a52:	71 f0       	breq	.+28     	; 0x3a70 <__fp_splitA+0x1a>
    3a54:	47 95       	ror	r20

00003a56 <__fp_splitA>:
    3a56:	88 0f       	add	r24, r24
    3a58:	97 fb       	bst	r25, 7
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	61 f0       	breq	.+24     	; 0x3a76 <__fp_splitA+0x20>
    3a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    3a60:	79 f0       	breq	.+30     	; 0x3a80 <__fp_splitA+0x2a>
    3a62:	87 95       	ror	r24
    3a64:	08 95       	ret
    3a66:	12 16       	cp	r1, r18
    3a68:	13 06       	cpc	r1, r19
    3a6a:	14 06       	cpc	r1, r20
    3a6c:	55 1f       	adc	r21, r21
    3a6e:	f2 cf       	rjmp	.-28     	; 0x3a54 <__fp_split3+0xe>
    3a70:	46 95       	lsr	r20
    3a72:	f1 df       	rcall	.-30     	; 0x3a56 <__fp_splitA>
    3a74:	08 c0       	rjmp	.+16     	; 0x3a86 <__fp_splitA+0x30>
    3a76:	16 16       	cp	r1, r22
    3a78:	17 06       	cpc	r1, r23
    3a7a:	18 06       	cpc	r1, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	f1 cf       	rjmp	.-30     	; 0x3a62 <__fp_splitA+0xc>
    3a80:	86 95       	lsr	r24
    3a82:	71 05       	cpc	r23, r1
    3a84:	61 05       	cpc	r22, r1
    3a86:	08 94       	sec
    3a88:	08 95       	ret

00003a8a <__fp_zero>:
    3a8a:	e8 94       	clt

00003a8c <__fp_szero>:
    3a8c:	bb 27       	eor	r27, r27
    3a8e:	66 27       	eor	r22, r22
    3a90:	77 27       	eor	r23, r23
    3a92:	cb 01       	movw	r24, r22
    3a94:	97 f9       	bld	r25, 7
    3a96:	08 95       	ret

00003a98 <__mulsf3>:
    3a98:	0b d0       	rcall	.+22     	; 0x3ab0 <__mulsf3x>
    3a9a:	c4 cf       	rjmp	.-120    	; 0x3a24 <__fp_round>
    3a9c:	b5 df       	rcall	.-150    	; 0x3a08 <__fp_pscA>
    3a9e:	28 f0       	brcs	.+10     	; 0x3aaa <__mulsf3+0x12>
    3aa0:	ba df       	rcall	.-140    	; 0x3a16 <__fp_pscB>
    3aa2:	18 f0       	brcs	.+6      	; 0x3aaa <__mulsf3+0x12>
    3aa4:	95 23       	and	r25, r21
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <__mulsf3+0x12>
    3aa8:	a6 cf       	rjmp	.-180    	; 0x39f6 <__fp_inf>
    3aaa:	ab cf       	rjmp	.-170    	; 0x3a02 <__fp_nan>
    3aac:	11 24       	eor	r1, r1
    3aae:	ee cf       	rjmp	.-36     	; 0x3a8c <__fp_szero>

00003ab0 <__mulsf3x>:
    3ab0:	ca df       	rcall	.-108    	; 0x3a46 <__fp_split3>
    3ab2:	a0 f3       	brcs	.-24     	; 0x3a9c <__mulsf3+0x4>

00003ab4 <__mulsf3_pse>:
    3ab4:	95 9f       	mul	r25, r21
    3ab6:	d1 f3       	breq	.-12     	; 0x3aac <__mulsf3+0x14>
    3ab8:	95 0f       	add	r25, r21
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	55 1f       	adc	r21, r21
    3abe:	62 9f       	mul	r22, r18
    3ac0:	f0 01       	movw	r30, r0
    3ac2:	72 9f       	mul	r23, r18
    3ac4:	bb 27       	eor	r27, r27
    3ac6:	f0 0d       	add	r31, r0
    3ac8:	b1 1d       	adc	r27, r1
    3aca:	63 9f       	mul	r22, r19
    3acc:	aa 27       	eor	r26, r26
    3ace:	f0 0d       	add	r31, r0
    3ad0:	b1 1d       	adc	r27, r1
    3ad2:	aa 1f       	adc	r26, r26
    3ad4:	64 9f       	mul	r22, r20
    3ad6:	66 27       	eor	r22, r22
    3ad8:	b0 0d       	add	r27, r0
    3ada:	a1 1d       	adc	r26, r1
    3adc:	66 1f       	adc	r22, r22
    3ade:	82 9f       	mul	r24, r18
    3ae0:	22 27       	eor	r18, r18
    3ae2:	b0 0d       	add	r27, r0
    3ae4:	a1 1d       	adc	r26, r1
    3ae6:	62 1f       	adc	r22, r18
    3ae8:	73 9f       	mul	r23, r19
    3aea:	b0 0d       	add	r27, r0
    3aec:	a1 1d       	adc	r26, r1
    3aee:	62 1f       	adc	r22, r18
    3af0:	83 9f       	mul	r24, r19
    3af2:	a0 0d       	add	r26, r0
    3af4:	61 1d       	adc	r22, r1
    3af6:	22 1f       	adc	r18, r18
    3af8:	74 9f       	mul	r23, r20
    3afa:	33 27       	eor	r19, r19
    3afc:	a0 0d       	add	r26, r0
    3afe:	61 1d       	adc	r22, r1
    3b00:	23 1f       	adc	r18, r19
    3b02:	84 9f       	mul	r24, r20
    3b04:	60 0d       	add	r22, r0
    3b06:	21 1d       	adc	r18, r1
    3b08:	82 2f       	mov	r24, r18
    3b0a:	76 2f       	mov	r23, r22
    3b0c:	6a 2f       	mov	r22, r26
    3b0e:	11 24       	eor	r1, r1
    3b10:	9f 57       	subi	r25, 0x7F	; 127
    3b12:	50 40       	sbci	r21, 0x00	; 0
    3b14:	8a f0       	brmi	.+34     	; 0x3b38 <__mulsf3_pse+0x84>
    3b16:	e1 f0       	breq	.+56     	; 0x3b50 <__mulsf3_pse+0x9c>
    3b18:	88 23       	and	r24, r24
    3b1a:	4a f0       	brmi	.+18     	; 0x3b2e <__mulsf3_pse+0x7a>
    3b1c:	ee 0f       	add	r30, r30
    3b1e:	ff 1f       	adc	r31, r31
    3b20:	bb 1f       	adc	r27, r27
    3b22:	66 1f       	adc	r22, r22
    3b24:	77 1f       	adc	r23, r23
    3b26:	88 1f       	adc	r24, r24
    3b28:	91 50       	subi	r25, 0x01	; 1
    3b2a:	50 40       	sbci	r21, 0x00	; 0
    3b2c:	a9 f7       	brne	.-22     	; 0x3b18 <__mulsf3_pse+0x64>
    3b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    3b30:	51 05       	cpc	r21, r1
    3b32:	70 f0       	brcs	.+28     	; 0x3b50 <__mulsf3_pse+0x9c>
    3b34:	60 cf       	rjmp	.-320    	; 0x39f6 <__fp_inf>
    3b36:	aa cf       	rjmp	.-172    	; 0x3a8c <__fp_szero>
    3b38:	5f 3f       	cpi	r21, 0xFF	; 255
    3b3a:	ec f3       	brlt	.-6      	; 0x3b36 <__mulsf3_pse+0x82>
    3b3c:	98 3e       	cpi	r25, 0xE8	; 232
    3b3e:	dc f3       	brlt	.-10     	; 0x3b36 <__mulsf3_pse+0x82>
    3b40:	86 95       	lsr	r24
    3b42:	77 95       	ror	r23
    3b44:	67 95       	ror	r22
    3b46:	b7 95       	ror	r27
    3b48:	f7 95       	ror	r31
    3b4a:	e7 95       	ror	r30
    3b4c:	9f 5f       	subi	r25, 0xFF	; 255
    3b4e:	c1 f7       	brne	.-16     	; 0x3b40 <__mulsf3_pse+0x8c>
    3b50:	fe 2b       	or	r31, r30
    3b52:	88 0f       	add	r24, r24
    3b54:	91 1d       	adc	r25, r1
    3b56:	96 95       	lsr	r25
    3b58:	87 95       	ror	r24
    3b5a:	97 f9       	bld	r25, 7
    3b5c:	08 95       	ret

00003b5e <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3b5e:	fc 01       	movw	r30, r24
    3b60:	91 8d       	ldd	r25, Z+25	; 0x19
    3b62:	22 8d       	ldd	r18, Z+26	; 0x1a
    3b64:	89 2f       	mov	r24, r25
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	80 5c       	subi	r24, 0xC0	; 192
    3b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6c:	82 1b       	sub	r24, r18
    3b6e:	91 09       	sbc	r25, r1
    3b70:	8f 73       	andi	r24, 0x3F	; 63
    3b72:	99 27       	eor	r25, r25
    3b74:	08 95       	ret

00003b76 <_ZN14HardwareSerial4peekEv>:
    3b76:	fc 01       	movw	r30, r24
    3b78:	91 8d       	ldd	r25, Z+25	; 0x19
    3b7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b7c:	98 17       	cp	r25, r24
    3b7e:	31 f0       	breq	.+12     	; 0x3b8c <_ZN14HardwareSerial4peekEv+0x16>
    3b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b82:	e8 0f       	add	r30, r24
    3b84:	f1 1d       	adc	r31, r1
    3b86:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	08 95       	ret
    3b8c:	8f ef       	ldi	r24, 0xFF	; 255
    3b8e:	9f ef       	ldi	r25, 0xFF	; 255
    3b90:	08 95       	ret

00003b92 <_ZN14HardwareSerial4readEv>:
    3b92:	fc 01       	movw	r30, r24
    3b94:	91 8d       	ldd	r25, Z+25	; 0x19
    3b96:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b98:	98 17       	cp	r25, r24
    3b9a:	61 f0       	breq	.+24     	; 0x3bb4 <_ZN14HardwareSerial4readEv+0x22>
    3b9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b9e:	df 01       	movw	r26, r30
    3ba0:	a8 0f       	add	r26, r24
    3ba2:	b1 1d       	adc	r27, r1
    3ba4:	5d 96       	adiw	r26, 0x1d	; 29
    3ba6:	8c 91       	ld	r24, X
    3ba8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3baa:	9f 5f       	subi	r25, 0xFF	; 255
    3bac:	9f 73       	andi	r25, 0x3F	; 63
    3bae:	92 8f       	std	Z+26, r25	; 0x1a
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	08 95       	ret
    3bb4:	8f ef       	ldi	r24, 0xFF	; 255
    3bb6:	9f ef       	ldi	r25, 0xFF	; 255
    3bb8:	08 95       	ret

00003bba <_ZN14HardwareSerial17availableForWriteEv>:
    3bba:	fc 01       	movw	r30, r24
    3bbc:	53 8d       	ldd	r21, Z+27	; 0x1b
    3bbe:	44 8d       	ldd	r20, Z+28	; 0x1c
    3bc0:	25 2f       	mov	r18, r21
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	84 2f       	mov	r24, r20
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	82 1b       	sub	r24, r18
    3bca:	93 0b       	sbc	r25, r19
    3bcc:	54 17       	cp	r21, r20
    3bce:	10 f0       	brcs	.+4      	; 0x3bd4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3bd0:	cf 96       	adiw	r24, 0x3f	; 63
    3bd2:	08 95       	ret
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	08 95       	ret

00003bd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3bd8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3bda:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bdc:	df 01       	movw	r26, r30
    3bde:	a8 0f       	add	r26, r24
    3be0:	b1 1d       	adc	r27, r1
    3be2:	a3 5a       	subi	r26, 0xA3	; 163
    3be4:	bf 4f       	sbci	r27, 0xFF	; 255
    3be6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3be8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	8f 73       	andi	r24, 0x3F	; 63
    3bf0:	99 27       	eor	r25, r25
    3bf2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3bf4:	a6 89       	ldd	r26, Z+22	; 0x16
    3bf6:	b7 89       	ldd	r27, Z+23	; 0x17
    3bf8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3bfa:	a0 89       	ldd	r26, Z+16	; 0x10
    3bfc:	b1 89       	ldd	r27, Z+17	; 0x11
    3bfe:	8c 91       	ld	r24, X
    3c00:	83 70       	andi	r24, 0x03	; 3
    3c02:	80 64       	ori	r24, 0x40	; 64
    3c04:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3c06:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c08:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c0a:	98 13       	cpse	r25, r24
    3c0c:	06 c0       	rjmp	.+12     	; 0x3c1a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3c0e:	02 88       	ldd	r0, Z+18	; 0x12
    3c10:	f3 89       	ldd	r31, Z+19	; 0x13
    3c12:	e0 2d       	mov	r30, r0
    3c14:	80 81       	ld	r24, Z
    3c16:	8f 7d       	andi	r24, 0xDF	; 223
    3c18:	80 83       	st	Z, r24
    3c1a:	08 95       	ret

00003c1c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	ec 01       	movw	r28, r24
  _written = true;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3c2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c32:	98 13       	cpse	r25, r24
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <_ZN14HardwareSerial5writeEh+0x24>
    3c36:	e8 89       	ldd	r30, Y+16	; 0x10
    3c38:	f9 89       	ldd	r31, Y+17	; 0x11
    3c3a:	80 81       	ld	r24, Z
    3c3c:	85 fd       	sbrc	r24, 5
    3c3e:	25 c0       	rjmp	.+74     	; 0x3c8a <_ZN14HardwareSerial5writeEh+0x6e>
    3c40:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3c42:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3c44:	10 e0       	ldi	r17, 0x00	; 0
    3c46:	0f 5f       	subi	r16, 0xFF	; 255
    3c48:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4a:	0f 73       	andi	r16, 0x3F	; 63
    3c4c:	11 27       	eor	r17, r17
    3c4e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3c50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c52:	e8 12       	cpse	r14, r24
    3c54:	0b c0       	rjmp	.+22     	; 0x3c6c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	07 fc       	sbrc	r0, 7
    3c5a:	fa cf       	rjmp	.-12     	; 0x3c50 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3c5c:	e8 89       	ldd	r30, Y+16	; 0x10
    3c5e:	f9 89       	ldd	r31, Y+17	; 0x11
    3c60:	80 81       	ld	r24, Z
    3c62:	85 ff       	sbrs	r24, 5
    3c64:	f5 cf       	rjmp	.-22     	; 0x3c50 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3c66:	ce 01       	movw	r24, r28
    3c68:	b7 df       	rcall	.-146    	; 0x3bd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3c6a:	f2 cf       	rjmp	.-28     	; 0x3c50 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3c6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e8 0f       	add	r30, r24
    3c72:	f1 1d       	adc	r31, r1
    3c74:	e3 5a       	subi	r30, 0xA3	; 163
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3c7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3c7c:	f8 94       	cli
    _tx_buffer_head = i;
    3c7e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3c80:	ea 89       	ldd	r30, Y+18	; 0x12
    3c82:	fb 89       	ldd	r31, Y+19	; 0x13
    3c84:	80 81       	ld	r24, Z
    3c86:	80 62       	ori	r24, 0x20	; 32
    3c88:	0a c0       	rjmp	.+20     	; 0x3c9e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3c8a:	9f b7       	in	r25, 0x3f	; 63
    3c8c:	f8 94       	cli
      *_udr = c;
    3c8e:	ee 89       	ldd	r30, Y+22	; 0x16
    3c90:	ff 89       	ldd	r31, Y+23	; 0x17
    3c92:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3c94:	e8 89       	ldd	r30, Y+16	; 0x10
    3c96:	f9 89       	ldd	r31, Y+17	; 0x11
    3c98:	80 81       	ld	r24, Z
    3c9a:	83 70       	andi	r24, 0x03	; 3
    3c9c:	80 64       	ori	r24, 0x40	; 64
    3c9e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3ca0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	ff 90       	pop	r15
    3cb0:	ef 90       	pop	r14
    3cb2:	08 95       	ret

00003cb4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3cba:	88 8d       	ldd	r24, Y+24	; 0x18
    3cbc:	88 23       	and	r24, r24
    3cbe:	c1 f0       	breq	.+48     	; 0x3cf0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3cc0:	ea 89       	ldd	r30, Y+18	; 0x12
    3cc2:	fb 89       	ldd	r31, Y+19	; 0x13
    3cc4:	80 81       	ld	r24, Z
    3cc6:	85 fd       	sbrc	r24, 5
    3cc8:	05 c0       	rjmp	.+10     	; 0x3cd4 <_ZN14HardwareSerial5flushEv+0x20>
    3cca:	a8 89       	ldd	r26, Y+16	; 0x10
    3ccc:	b9 89       	ldd	r27, Y+17	; 0x11
    3cce:	8c 91       	ld	r24, X
    3cd0:	86 fd       	sbrc	r24, 6
    3cd2:	0e c0       	rjmp	.+28     	; 0x3cf0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	07 fc       	sbrc	r0, 7
    3cd8:	f5 cf       	rjmp	.-22     	; 0x3cc4 <_ZN14HardwareSerial5flushEv+0x10>
    3cda:	80 81       	ld	r24, Z
    3cdc:	85 ff       	sbrs	r24, 5
    3cde:	f2 cf       	rjmp	.-28     	; 0x3cc4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3ce0:	a8 89       	ldd	r26, Y+16	; 0x10
    3ce2:	b9 89       	ldd	r27, Y+17	; 0x11
    3ce4:	8c 91       	ld	r24, X
    3ce6:	85 ff       	sbrs	r24, 5
    3ce8:	ed cf       	rjmp	.-38     	; 0x3cc4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3cea:	ce 01       	movw	r24, r28
    3cec:	75 df       	rcall	.-278    	; 0x3bd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3cee:	e8 cf       	rjmp	.-48     	; 0x3cc0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret

00003cf6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3cf6:	cf 92       	push	r12
    3cf8:	df 92       	push	r13
    3cfa:	ef 92       	push	r14
    3cfc:	ff 92       	push	r15
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	ec 01       	movw	r28, r24
    3d06:	6a 01       	movw	r12, r20
    3d08:	7b 01       	movw	r14, r22
    3d0a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3d0c:	e8 89       	ldd	r30, Y+16	; 0x10
    3d0e:	f9 89       	ldd	r31, Y+17	; 0x11
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3d14:	41 15       	cp	r20, r1
    3d16:	51 4e       	sbci	r21, 0xE1	; 225
    3d18:	61 05       	cpc	r22, r1
    3d1a:	71 05       	cpc	r23, r1
    3d1c:	a9 f0       	breq	.+42     	; 0x3d48 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	79 e0       	ldi	r23, 0x09	; 9
    3d22:	8d e3       	ldi	r24, 0x3D	; 61
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a7 01       	movw	r20, r14
    3d28:	96 01       	movw	r18, r12
    3d2a:	8d d1       	rcall	.+794    	; 0x4046 <__udivmodsi4>
    3d2c:	da 01       	movw	r26, r20
    3d2e:	c9 01       	movw	r24, r18
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	a1 09       	sbc	r26, r1
    3d34:	b1 09       	sbc	r27, r1
    3d36:	b6 95       	lsr	r27
    3d38:	a7 95       	ror	r26
    3d3a:	97 95       	ror	r25
    3d3c:	87 95       	ror	r24
    3d3e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3d40:	21 15       	cp	r18, r1
    3d42:	80 e1       	ldi	r24, 0x10	; 16
    3d44:	38 07       	cpc	r19, r24
    3d46:	a0 f0       	brcs	.+40     	; 0x3d70 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    3d48:	e8 89       	ldd	r30, Y+16	; 0x10
    3d4a:	f9 89       	ldd	r31, Y+17	; 0x11
    3d4c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3d4e:	60 e8       	ldi	r22, 0x80	; 128
    3d50:	74 e8       	ldi	r23, 0x84	; 132
    3d52:	8e e1       	ldi	r24, 0x1E	; 30
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	a7 01       	movw	r20, r14
    3d58:	96 01       	movw	r18, r12
    3d5a:	75 d1       	rcall	.+746    	; 0x4046 <__udivmodsi4>
    3d5c:	da 01       	movw	r26, r20
    3d5e:	c9 01       	movw	r24, r18
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	a1 09       	sbc	r26, r1
    3d64:	b1 09       	sbc	r27, r1
    3d66:	b6 95       	lsr	r27
    3d68:	a7 95       	ror	r26
    3d6a:	97 95       	ror	r25
    3d6c:	87 95       	ror	r24
    3d6e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3d70:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d72:	fd 85       	ldd	r31, Y+13	; 0x0d
    3d74:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3d76:	ee 85       	ldd	r30, Y+14	; 0x0e
    3d78:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d7a:	20 83       	st	Z, r18

  _written = false;
    3d7c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3d7e:	ec 89       	ldd	r30, Y+20	; 0x14
    3d80:	fd 89       	ldd	r31, Y+21	; 0x15
    3d82:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3d84:	ea 89       	ldd	r30, Y+18	; 0x12
    3d86:	fb 89       	ldd	r31, Y+19	; 0x13
    3d88:	80 81       	ld	r24, Z
    3d8a:	80 61       	ori	r24, 0x10	; 16
    3d8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3d8e:	ea 89       	ldd	r30, Y+18	; 0x12
    3d90:	fb 89       	ldd	r31, Y+19	; 0x13
    3d92:	80 81       	ld	r24, Z
    3d94:	88 60       	ori	r24, 0x08	; 8
    3d96:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3d98:	ea 89       	ldd	r30, Y+18	; 0x12
    3d9a:	fb 89       	ldd	r31, Y+19	; 0x13
    3d9c:	80 81       	ld	r24, Z
    3d9e:	80 68       	ori	r24, 0x80	; 128
    3da0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3da2:	ea 89       	ldd	r30, Y+18	; 0x12
    3da4:	fb 89       	ldd	r31, Y+19	; 0x13
    3da6:	80 81       	ld	r24, Z
    3da8:	8f 7d       	andi	r24, 0xDF	; 223
    3daa:	80 83       	st	Z, r24
}
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	ff 90       	pop	r15
    3db4:	ef 90       	pop	r14
    3db6:	df 90       	pop	r13
    3db8:	cf 90       	pop	r12
    3dba:	08 95       	ret

00003dbc <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    3dbc:	1f 92       	push	r1
    3dbe:	0f 92       	push	r0
    3dc0:	0f b6       	in	r0, 0x3f	; 63
    3dc2:	0f 92       	push	r0
    3dc4:	11 24       	eor	r1, r1
    3dc6:	0b b6       	in	r0, 0x3b	; 59
    3dc8:	0f 92       	push	r0
    3dca:	2f 93       	push	r18
    3dcc:	8f 93       	push	r24
    3dce:	9f 93       	push	r25
    3dd0:	ef 93       	push	r30
    3dd2:	ff 93       	push	r31
    3dd4:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <Serial+0x10>
    3dd8:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <Serial+0x11>
    3ddc:	80 81       	ld	r24, Z
    3dde:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <Serial+0x16>
    3de2:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <Serial+0x17>
    3de6:	82 fd       	sbrc	r24, 2
    3de8:	12 c0       	rjmp	.+36     	; 0x3e0e <__vector_25+0x52>
    3dea:	90 81       	ld	r25, Z
    3dec:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <Serial+0x19>
    3df0:	8f 5f       	subi	r24, 0xFF	; 255
    3df2:	8f 73       	andi	r24, 0x3F	; 63
    3df4:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <Serial+0x1a>
    3df8:	82 17       	cp	r24, r18
    3dfa:	51 f0       	breq	.+20     	; 0x3e10 <__vector_25+0x54>
    3dfc:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <Serial+0x19>
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	e9 51       	subi	r30, 0x19	; 25
    3e04:	fc 4f       	sbci	r31, 0xFC	; 252
    3e06:	95 8f       	std	Z+29, r25	; 0x1d
    3e08:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Serial+0x19>
    3e0c:	01 c0       	rjmp	.+2      	; 0x3e10 <__vector_25+0x54>
    3e0e:	80 81       	ld	r24, Z
    3e10:	ff 91       	pop	r31
    3e12:	ef 91       	pop	r30
    3e14:	9f 91       	pop	r25
    3e16:	8f 91       	pop	r24
    3e18:	2f 91       	pop	r18
    3e1a:	0f 90       	pop	r0
    3e1c:	0b be       	out	0x3b, r0	; 59
    3e1e:	0f 90       	pop	r0
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	0f 90       	pop	r0
    3e24:	1f 90       	pop	r1
    3e26:	18 95       	reti

00003e28 <__vector_26>:
    3e28:	1f 92       	push	r1
    3e2a:	0f 92       	push	r0
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	0f 92       	push	r0
    3e30:	11 24       	eor	r1, r1
    3e32:	0b b6       	in	r0, 0x3b	; 59
    3e34:	0f 92       	push	r0
    3e36:	2f 93       	push	r18
    3e38:	3f 93       	push	r19
    3e3a:	4f 93       	push	r20
    3e3c:	5f 93       	push	r21
    3e3e:	6f 93       	push	r22
    3e40:	7f 93       	push	r23
    3e42:	8f 93       	push	r24
    3e44:	9f 93       	push	r25
    3e46:	af 93       	push	r26
    3e48:	bf 93       	push	r27
    3e4a:	ef 93       	push	r30
    3e4c:	ff 93       	push	r31
    3e4e:	87 ee       	ldi	r24, 0xE7	; 231
    3e50:	93 e0       	ldi	r25, 0x03	; 3
    3e52:	c2 de       	rcall	.-636    	; 0x3bd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e54:	ff 91       	pop	r31
    3e56:	ef 91       	pop	r30
    3e58:	bf 91       	pop	r27
    3e5a:	af 91       	pop	r26
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	7f 91       	pop	r23
    3e62:	6f 91       	pop	r22
    3e64:	5f 91       	pop	r21
    3e66:	4f 91       	pop	r20
    3e68:	3f 91       	pop	r19
    3e6a:	2f 91       	pop	r18
    3e6c:	0f 90       	pop	r0
    3e6e:	0b be       	out	0x3b, r0	; 59
    3e70:	0f 90       	pop	r0
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	0f 90       	pop	r0
    3e76:	1f 90       	pop	r1
    3e78:	18 95       	reti

00003e7a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3e7a:	e7 ee       	ldi	r30, 0xE7	; 231
    3e7c:	f3 e0       	ldi	r31, 0x03	; 3
    3e7e:	13 82       	std	Z+3, r1	; 0x03
    3e80:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3e82:	88 ee       	ldi	r24, 0xE8	; 232
    3e84:	93 e0       	ldi	r25, 0x03	; 3
    3e86:	a0 e0       	ldi	r26, 0x00	; 0
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	84 83       	std	Z+4, r24	; 0x04
    3e8c:	95 83       	std	Z+5, r25	; 0x05
    3e8e:	a6 83       	std	Z+6, r26	; 0x06
    3e90:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3e92:	8c e2       	ldi	r24, 0x2C	; 44
    3e94:	93 e0       	ldi	r25, 0x03	; 3
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	80 83       	st	Z, r24
    3e9a:	85 ec       	ldi	r24, 0xC5	; 197
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	95 87       	std	Z+13, r25	; 0x0d
    3ea0:	84 87       	std	Z+12, r24	; 0x0c
    3ea2:	84 ec       	ldi	r24, 0xC4	; 196
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	97 87       	std	Z+15, r25	; 0x0f
    3ea8:	86 87       	std	Z+14, r24	; 0x0e
    3eaa:	80 ec       	ldi	r24, 0xC0	; 192
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	91 8b       	std	Z+17, r25	; 0x11
    3eb0:	80 8b       	std	Z+16, r24	; 0x10
    3eb2:	81 ec       	ldi	r24, 0xC1	; 193
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	93 8b       	std	Z+19, r25	; 0x13
    3eb8:	82 8b       	std	Z+18, r24	; 0x12
    3eba:	82 ec       	ldi	r24, 0xC2	; 194
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	95 8b       	std	Z+21, r25	; 0x15
    3ec0:	84 8b       	std	Z+20, r24	; 0x14
    3ec2:	86 ec       	ldi	r24, 0xC6	; 198
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	97 8b       	std	Z+23, r25	; 0x17
    3ec8:	86 8b       	std	Z+22, r24	; 0x16
    3eca:	11 8e       	std	Z+25, r1	; 0x19
    3ecc:	12 8e       	std	Z+26, r1	; 0x1a
    3ece:	13 8e       	std	Z+27, r1	; 0x1b
    3ed0:	14 8e       	std	Z+28, r1	; 0x1c
    3ed2:	08 95       	ret

00003ed4 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    3ed4:	68 c1       	rjmp	.+720    	; 0x41a6 <malloc>

00003ed6 <_ZdlPv>:
    3ed6:	ff c1       	rjmp	.+1022   	; 0x42d6 <free>

00003ed8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	6c 01       	movw	r12, r24
    3eea:	7a 01       	movw	r14, r20
    3eec:	8b 01       	movw	r16, r22
  size_t n = 0;
    3eee:	c0 e0       	ldi	r28, 0x00	; 0
    3ef0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    3ef2:	ce 15       	cp	r28, r14
    3ef4:	df 05       	cpc	r29, r15
    3ef6:	81 f0       	breq	.+32     	; 0x3f18 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    3ef8:	d8 01       	movw	r26, r16
    3efa:	6d 91       	ld	r22, X+
    3efc:	8d 01       	movw	r16, r26
    3efe:	d6 01       	movw	r26, r12
    3f00:	ed 91       	ld	r30, X+
    3f02:	fc 91       	ld	r31, X
    3f04:	01 90       	ld	r0, Z+
    3f06:	f0 81       	ld	r31, Z
    3f08:	e0 2d       	mov	r30, r0
    3f0a:	c6 01       	movw	r24, r12
    3f0c:	19 95       	eicall
    3f0e:	89 2b       	or	r24, r25
    3f10:	11 f0       	breq	.+4      	; 0x3f16 <_ZN5Print5writeEPKhj+0x3e>
    3f12:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3f14:	ee cf       	rjmp	.-36     	; 0x3ef2 <_ZN5Print5writeEPKhj+0x1a>
    3f16:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    3f18:	c7 01       	movw	r24, r14
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	df 90       	pop	r13
    3f28:	cf 90       	pop	r12
    3f2a:	08 95       	ret

00003f2c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3f2c:	1f 92       	push	r1
    3f2e:	0f 92       	push	r0
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	0f 92       	push	r0
    3f34:	11 24       	eor	r1, r1
    3f36:	2f 93       	push	r18
    3f38:	3f 93       	push	r19
    3f3a:	8f 93       	push	r24
    3f3c:	9f 93       	push	r25
    3f3e:	af 93       	push	r26
    3f40:	bf 93       	push	r27
    3f42:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <timer0_millis>
    3f46:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <timer0_millis+0x1>
    3f4a:	a0 91 87 04 	lds	r26, 0x0487	; 0x800487 <timer0_millis+0x2>
    3f4e:	b0 91 88 04 	lds	r27, 0x0488	; 0x800488 <timer0_millis+0x3>
    3f52:	30 91 84 04 	lds	r19, 0x0484	; 0x800484 <timer0_fract>
    3f56:	23 e0       	ldi	r18, 0x03	; 3
    3f58:	23 0f       	add	r18, r19
    3f5a:	2d 37       	cpi	r18, 0x7D	; 125
    3f5c:	20 f4       	brcc	.+8      	; 0x3f66 <__vector_23+0x3a>
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	a1 1d       	adc	r26, r1
    3f62:	b1 1d       	adc	r27, r1
    3f64:	05 c0       	rjmp	.+10     	; 0x3f70 <__vector_23+0x44>
    3f66:	26 e8       	ldi	r18, 0x86	; 134
    3f68:	23 0f       	add	r18, r19
    3f6a:	02 96       	adiw	r24, 0x02	; 2
    3f6c:	a1 1d       	adc	r26, r1
    3f6e:	b1 1d       	adc	r27, r1
    3f70:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <timer0_fract>
    3f74:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <timer0_millis>
    3f78:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <timer0_millis+0x1>
    3f7c:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <timer0_millis+0x2>
    3f80:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <timer0_millis+0x3>
    3f84:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <timer0_overflow_count>
    3f88:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <timer0_overflow_count+0x1>
    3f8c:	a0 91 8b 04 	lds	r26, 0x048B	; 0x80048b <timer0_overflow_count+0x2>
    3f90:	b0 91 8c 04 	lds	r27, 0x048C	; 0x80048c <timer0_overflow_count+0x3>
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	a1 1d       	adc	r26, r1
    3f98:	b1 1d       	adc	r27, r1
    3f9a:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <timer0_overflow_count>
    3f9e:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <timer0_overflow_count+0x1>
    3fa2:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <timer0_overflow_count+0x2>
    3fa6:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <timer0_overflow_count+0x3>
    3faa:	bf 91       	pop	r27
    3fac:	af 91       	pop	r26
    3fae:	9f 91       	pop	r25
    3fb0:	8f 91       	pop	r24
    3fb2:	3f 91       	pop	r19
    3fb4:	2f 91       	pop	r18
    3fb6:	0f 90       	pop	r0
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	0f 90       	pop	r0
    3fbc:	1f 90       	pop	r1
    3fbe:	18 95       	reti

00003fc0 <millis>:
    3fc0:	2f b7       	in	r18, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <timer0_millis>
    3fc8:	70 91 86 04 	lds	r23, 0x0486	; 0x800486 <timer0_millis+0x1>
    3fcc:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <timer0_millis+0x2>
    3fd0:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <timer0_millis+0x3>
    3fd4:	2f bf       	out	0x3f, r18	; 63
    3fd6:	08 95       	ret

00003fd8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3fd8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3fda:	84 b5       	in	r24, 0x24	; 36
    3fdc:	82 60       	ori	r24, 0x02	; 2
    3fde:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3fe0:	84 b5       	in	r24, 0x24	; 36
    3fe2:	81 60       	ori	r24, 0x01	; 1
    3fe4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3fe6:	85 b5       	in	r24, 0x25	; 37
    3fe8:	82 60       	ori	r24, 0x02	; 2
    3fea:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3fec:	85 b5       	in	r24, 0x25	; 37
    3fee:	81 60       	ori	r24, 0x01	; 1
    3ff0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3ff2:	ee e6       	ldi	r30, 0x6E	; 110
    3ff4:	f0 e0       	ldi	r31, 0x00	; 0
    3ff6:	80 81       	ld	r24, Z
    3ff8:	81 60       	ori	r24, 0x01	; 1
    3ffa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3ffc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    4000:	08 95       	ret

00004002 <__mulsi3>:
    4002:	db 01       	movw	r26, r22
    4004:	8f 93       	push	r24
    4006:	9f 93       	push	r25
    4008:	6b d0       	rcall	.+214    	; 0x40e0 <__muluhisi3>
    400a:	bf 91       	pop	r27
    400c:	af 91       	pop	r26
    400e:	a2 9f       	mul	r26, r18
    4010:	80 0d       	add	r24, r0
    4012:	91 1d       	adc	r25, r1
    4014:	a3 9f       	mul	r26, r19
    4016:	90 0d       	add	r25, r0
    4018:	b2 9f       	mul	r27, r18
    401a:	90 0d       	add	r25, r0
    401c:	11 24       	eor	r1, r1
    401e:	08 95       	ret

00004020 <__divmodhi4>:
    4020:	97 fb       	bst	r25, 7
    4022:	07 2e       	mov	r0, r23
    4024:	16 f4       	brtc	.+4      	; 0x402a <__divmodhi4+0xa>
    4026:	00 94       	com	r0
    4028:	06 d0       	rcall	.+12     	; 0x4036 <__divmodhi4_neg1>
    402a:	77 fd       	sbrc	r23, 7
    402c:	08 d0       	rcall	.+16     	; 0x403e <__divmodhi4_neg2>
    402e:	9f d0       	rcall	.+318    	; 0x416e <__udivmodhi4>
    4030:	07 fc       	sbrc	r0, 7
    4032:	05 d0       	rcall	.+10     	; 0x403e <__divmodhi4_neg2>
    4034:	3e f4       	brtc	.+14     	; 0x4044 <__divmodhi4_exit>

00004036 <__divmodhi4_neg1>:
    4036:	90 95       	com	r25
    4038:	81 95       	neg	r24
    403a:	9f 4f       	sbci	r25, 0xFF	; 255
    403c:	08 95       	ret

0000403e <__divmodhi4_neg2>:
    403e:	70 95       	com	r23
    4040:	61 95       	neg	r22
    4042:	7f 4f       	sbci	r23, 0xFF	; 255

00004044 <__divmodhi4_exit>:
    4044:	08 95       	ret

00004046 <__udivmodsi4>:
    4046:	a1 e2       	ldi	r26, 0x21	; 33
    4048:	1a 2e       	mov	r1, r26
    404a:	aa 1b       	sub	r26, r26
    404c:	bb 1b       	sub	r27, r27
    404e:	fd 01       	movw	r30, r26
    4050:	0d c0       	rjmp	.+26     	; 0x406c <__udivmodsi4_ep>

00004052 <__udivmodsi4_loop>:
    4052:	aa 1f       	adc	r26, r26
    4054:	bb 1f       	adc	r27, r27
    4056:	ee 1f       	adc	r30, r30
    4058:	ff 1f       	adc	r31, r31
    405a:	a2 17       	cp	r26, r18
    405c:	b3 07       	cpc	r27, r19
    405e:	e4 07       	cpc	r30, r20
    4060:	f5 07       	cpc	r31, r21
    4062:	20 f0       	brcs	.+8      	; 0x406c <__udivmodsi4_ep>
    4064:	a2 1b       	sub	r26, r18
    4066:	b3 0b       	sbc	r27, r19
    4068:	e4 0b       	sbc	r30, r20
    406a:	f5 0b       	sbc	r31, r21

0000406c <__udivmodsi4_ep>:
    406c:	66 1f       	adc	r22, r22
    406e:	77 1f       	adc	r23, r23
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	1a 94       	dec	r1
    4076:	69 f7       	brne	.-38     	; 0x4052 <__udivmodsi4_loop>
    4078:	60 95       	com	r22
    407a:	70 95       	com	r23
    407c:	80 95       	com	r24
    407e:	90 95       	com	r25
    4080:	9b 01       	movw	r18, r22
    4082:	ac 01       	movw	r20, r24
    4084:	bd 01       	movw	r22, r26
    4086:	cf 01       	movw	r24, r30
    4088:	08 95       	ret

0000408a <__divmodsi4>:
    408a:	05 2e       	mov	r0, r21
    408c:	97 fb       	bst	r25, 7
    408e:	16 f4       	brtc	.+4      	; 0x4094 <__divmodsi4+0xa>
    4090:	00 94       	com	r0
    4092:	0f d0       	rcall	.+30     	; 0x40b2 <__negsi2>
    4094:	57 fd       	sbrc	r21, 7
    4096:	05 d0       	rcall	.+10     	; 0x40a2 <__divmodsi4_neg2>
    4098:	d6 df       	rcall	.-84     	; 0x4046 <__udivmodsi4>
    409a:	07 fc       	sbrc	r0, 7
    409c:	02 d0       	rcall	.+4      	; 0x40a2 <__divmodsi4_neg2>
    409e:	46 f4       	brtc	.+16     	; 0x40b0 <__divmodsi4_exit>
    40a0:	08 c0       	rjmp	.+16     	; 0x40b2 <__negsi2>

000040a2 <__divmodsi4_neg2>:
    40a2:	50 95       	com	r21
    40a4:	40 95       	com	r20
    40a6:	30 95       	com	r19
    40a8:	21 95       	neg	r18
    40aa:	3f 4f       	sbci	r19, 0xFF	; 255
    40ac:	4f 4f       	sbci	r20, 0xFF	; 255
    40ae:	5f 4f       	sbci	r21, 0xFF	; 255

000040b0 <__divmodsi4_exit>:
    40b0:	08 95       	ret

000040b2 <__negsi2>:
    40b2:	90 95       	com	r25
    40b4:	80 95       	com	r24
    40b6:	70 95       	com	r23
    40b8:	61 95       	neg	r22
    40ba:	7f 4f       	sbci	r23, 0xFF	; 255
    40bc:	8f 4f       	sbci	r24, 0xFF	; 255
    40be:	9f 4f       	sbci	r25, 0xFF	; 255
    40c0:	08 95       	ret

000040c2 <__umulhisi3>:
    40c2:	a2 9f       	mul	r26, r18
    40c4:	b0 01       	movw	r22, r0
    40c6:	b3 9f       	mul	r27, r19
    40c8:	c0 01       	movw	r24, r0
    40ca:	a3 9f       	mul	r26, r19
    40cc:	70 0d       	add	r23, r0
    40ce:	81 1d       	adc	r24, r1
    40d0:	11 24       	eor	r1, r1
    40d2:	91 1d       	adc	r25, r1
    40d4:	b2 9f       	mul	r27, r18
    40d6:	70 0d       	add	r23, r0
    40d8:	81 1d       	adc	r24, r1
    40da:	11 24       	eor	r1, r1
    40dc:	91 1d       	adc	r25, r1
    40de:	08 95       	ret

000040e0 <__muluhisi3>:
    40e0:	f0 df       	rcall	.-32     	; 0x40c2 <__umulhisi3>
    40e2:	a5 9f       	mul	r26, r21
    40e4:	90 0d       	add	r25, r0
    40e6:	b4 9f       	mul	r27, r20
    40e8:	90 0d       	add	r25, r0
    40ea:	a4 9f       	mul	r26, r20
    40ec:	80 0d       	add	r24, r0
    40ee:	91 1d       	adc	r25, r1
    40f0:	11 24       	eor	r1, r1
    40f2:	08 95       	ret

000040f4 <__mulshisi3>:
    40f4:	b7 ff       	sbrs	r27, 7
    40f6:	f4 cf       	rjmp	.-24     	; 0x40e0 <__muluhisi3>

000040f8 <__mulohisi3>:
    40f8:	f3 df       	rcall	.-26     	; 0x40e0 <__muluhisi3>
    40fa:	82 1b       	sub	r24, r18
    40fc:	93 0b       	sbc	r25, r19
    40fe:	08 95       	ret

00004100 <__ashldi3>:
    4100:	0f 93       	push	r16
    4102:	08 30       	cpi	r16, 0x08	; 8
    4104:	90 f0       	brcs	.+36     	; 0x412a <__ashldi3+0x2a>
    4106:	98 2f       	mov	r25, r24
    4108:	87 2f       	mov	r24, r23
    410a:	76 2f       	mov	r23, r22
    410c:	65 2f       	mov	r22, r21
    410e:	54 2f       	mov	r21, r20
    4110:	43 2f       	mov	r20, r19
    4112:	32 2f       	mov	r19, r18
    4114:	22 27       	eor	r18, r18
    4116:	08 50       	subi	r16, 0x08	; 8
    4118:	f4 cf       	rjmp	.-24     	; 0x4102 <__ashldi3+0x2>
    411a:	22 0f       	add	r18, r18
    411c:	33 1f       	adc	r19, r19
    411e:	44 1f       	adc	r20, r20
    4120:	55 1f       	adc	r21, r21
    4122:	66 1f       	adc	r22, r22
    4124:	77 1f       	adc	r23, r23
    4126:	88 1f       	adc	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	0a 95       	dec	r16
    412c:	b2 f7       	brpl	.-20     	; 0x411a <__ashldi3+0x1a>
    412e:	0f 91       	pop	r16
    4130:	08 95       	ret

00004132 <__ashrdi3>:
    4132:	97 fb       	bst	r25, 7
    4134:	10 f8       	bld	r1, 0

00004136 <__lshrdi3>:
    4136:	16 94       	lsr	r1
    4138:	00 08       	sbc	r0, r0
    413a:	0f 93       	push	r16
    413c:	08 30       	cpi	r16, 0x08	; 8
    413e:	98 f0       	brcs	.+38     	; 0x4166 <__lshrdi3+0x30>
    4140:	08 50       	subi	r16, 0x08	; 8
    4142:	23 2f       	mov	r18, r19
    4144:	34 2f       	mov	r19, r20
    4146:	45 2f       	mov	r20, r21
    4148:	56 2f       	mov	r21, r22
    414a:	67 2f       	mov	r22, r23
    414c:	78 2f       	mov	r23, r24
    414e:	89 2f       	mov	r24, r25
    4150:	90 2d       	mov	r25, r0
    4152:	f4 cf       	rjmp	.-24     	; 0x413c <__lshrdi3+0x6>
    4154:	05 94       	asr	r0
    4156:	97 95       	ror	r25
    4158:	87 95       	ror	r24
    415a:	77 95       	ror	r23
    415c:	67 95       	ror	r22
    415e:	57 95       	ror	r21
    4160:	47 95       	ror	r20
    4162:	37 95       	ror	r19
    4164:	27 95       	ror	r18
    4166:	0a 95       	dec	r16
    4168:	aa f7       	brpl	.-22     	; 0x4154 <__lshrdi3+0x1e>
    416a:	0f 91       	pop	r16
    416c:	08 95       	ret

0000416e <__udivmodhi4>:
    416e:	aa 1b       	sub	r26, r26
    4170:	bb 1b       	sub	r27, r27
    4172:	51 e1       	ldi	r21, 0x11	; 17
    4174:	07 c0       	rjmp	.+14     	; 0x4184 <__udivmodhi4_ep>

00004176 <__udivmodhi4_loop>:
    4176:	aa 1f       	adc	r26, r26
    4178:	bb 1f       	adc	r27, r27
    417a:	a6 17       	cp	r26, r22
    417c:	b7 07       	cpc	r27, r23
    417e:	10 f0       	brcs	.+4      	; 0x4184 <__udivmodhi4_ep>
    4180:	a6 1b       	sub	r26, r22
    4182:	b7 0b       	sbc	r27, r23

00004184 <__udivmodhi4_ep>:
    4184:	88 1f       	adc	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	5a 95       	dec	r21
    418a:	a9 f7       	brne	.-22     	; 0x4176 <__udivmodhi4_loop>
    418c:	80 95       	com	r24
    418e:	90 95       	com	r25
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	08 95       	ret

00004196 <__tablejump2__>:
    4196:	ee 0f       	add	r30, r30
    4198:	ff 1f       	adc	r31, r31
    419a:	88 1f       	adc	r24, r24
    419c:	8b bf       	out	0x3b, r24	; 59
    419e:	07 90       	elpm	r0, Z+
    41a0:	f6 91       	elpm	r31, Z
    41a2:	e0 2d       	mov	r30, r0
    41a4:	19 94       	eijmp

000041a6 <malloc>:
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	82 30       	cpi	r24, 0x02	; 2
    41b0:	91 05       	cpc	r25, r1
    41b2:	10 f4       	brcc	.+4      	; 0x41b8 <malloc+0x12>
    41b4:	82 e0       	ldi	r24, 0x02	; 2
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <__flp>
    41bc:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <__flp+0x1>
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	a0 e0       	ldi	r26, 0x00	; 0
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	30 97       	sbiw	r30, 0x00	; 0
    41ca:	19 f1       	breq	.+70     	; 0x4212 <malloc+0x6c>
    41cc:	40 81       	ld	r20, Z
    41ce:	51 81       	ldd	r21, Z+1	; 0x01
    41d0:	02 81       	ldd	r16, Z+2	; 0x02
    41d2:	13 81       	ldd	r17, Z+3	; 0x03
    41d4:	48 17       	cp	r20, r24
    41d6:	59 07       	cpc	r21, r25
    41d8:	c8 f0       	brcs	.+50     	; 0x420c <malloc+0x66>
    41da:	84 17       	cp	r24, r20
    41dc:	95 07       	cpc	r25, r21
    41de:	69 f4       	brne	.+26     	; 0x41fa <malloc+0x54>
    41e0:	10 97       	sbiw	r26, 0x00	; 0
    41e2:	31 f0       	breq	.+12     	; 0x41f0 <malloc+0x4a>
    41e4:	12 96       	adiw	r26, 0x02	; 2
    41e6:	0c 93       	st	X, r16
    41e8:	12 97       	sbiw	r26, 0x02	; 2
    41ea:	13 96       	adiw	r26, 0x03	; 3
    41ec:	1c 93       	st	X, r17
    41ee:	27 c0       	rjmp	.+78     	; 0x423e <malloc+0x98>
    41f0:	00 93 8f 04 	sts	0x048F, r16	; 0x80048f <__flp>
    41f4:	10 93 90 04 	sts	0x0490, r17	; 0x800490 <__flp+0x1>
    41f8:	22 c0       	rjmp	.+68     	; 0x423e <malloc+0x98>
    41fa:	21 15       	cp	r18, r1
    41fc:	31 05       	cpc	r19, r1
    41fe:	19 f0       	breq	.+6      	; 0x4206 <malloc+0x60>
    4200:	42 17       	cp	r20, r18
    4202:	53 07       	cpc	r21, r19
    4204:	18 f4       	brcc	.+6      	; 0x420c <malloc+0x66>
    4206:	9a 01       	movw	r18, r20
    4208:	bd 01       	movw	r22, r26
    420a:	ef 01       	movw	r28, r30
    420c:	df 01       	movw	r26, r30
    420e:	f8 01       	movw	r30, r16
    4210:	db cf       	rjmp	.-74     	; 0x41c8 <malloc+0x22>
    4212:	21 15       	cp	r18, r1
    4214:	31 05       	cpc	r19, r1
    4216:	f9 f0       	breq	.+62     	; 0x4256 <malloc+0xb0>
    4218:	28 1b       	sub	r18, r24
    421a:	39 0b       	sbc	r19, r25
    421c:	24 30       	cpi	r18, 0x04	; 4
    421e:	31 05       	cpc	r19, r1
    4220:	80 f4       	brcc	.+32     	; 0x4242 <malloc+0x9c>
    4222:	8a 81       	ldd	r24, Y+2	; 0x02
    4224:	9b 81       	ldd	r25, Y+3	; 0x03
    4226:	61 15       	cp	r22, r1
    4228:	71 05       	cpc	r23, r1
    422a:	21 f0       	breq	.+8      	; 0x4234 <malloc+0x8e>
    422c:	fb 01       	movw	r30, r22
    422e:	93 83       	std	Z+3, r25	; 0x03
    4230:	82 83       	std	Z+2, r24	; 0x02
    4232:	04 c0       	rjmp	.+8      	; 0x423c <malloc+0x96>
    4234:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <__flp+0x1>
    4238:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <__flp>
    423c:	fe 01       	movw	r30, r28
    423e:	32 96       	adiw	r30, 0x02	; 2
    4240:	44 c0       	rjmp	.+136    	; 0x42ca <malloc+0x124>
    4242:	fe 01       	movw	r30, r28
    4244:	e2 0f       	add	r30, r18
    4246:	f3 1f       	adc	r31, r19
    4248:	81 93       	st	Z+, r24
    424a:	91 93       	st	Z+, r25
    424c:	22 50       	subi	r18, 0x02	; 2
    424e:	31 09       	sbc	r19, r1
    4250:	39 83       	std	Y+1, r19	; 0x01
    4252:	28 83       	st	Y, r18
    4254:	3a c0       	rjmp	.+116    	; 0x42ca <malloc+0x124>
    4256:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <__brkval>
    425a:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <__brkval+0x1>
    425e:	23 2b       	or	r18, r19
    4260:	41 f4       	brne	.+16     	; 0x4272 <malloc+0xcc>
    4262:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4266:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    426a:	30 93 8e 04 	sts	0x048E, r19	; 0x80048e <__brkval+0x1>
    426e:	20 93 8d 04 	sts	0x048D, r18	; 0x80048d <__brkval>
    4272:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4276:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    427a:	21 15       	cp	r18, r1
    427c:	31 05       	cpc	r19, r1
    427e:	41 f4       	brne	.+16     	; 0x4290 <malloc+0xea>
    4280:	2d b7       	in	r18, 0x3d	; 61
    4282:	3e b7       	in	r19, 0x3e	; 62
    4284:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4288:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    428c:	24 1b       	sub	r18, r20
    428e:	35 0b       	sbc	r19, r21
    4290:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <__brkval>
    4294:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <__brkval+0x1>
    4298:	e2 17       	cp	r30, r18
    429a:	f3 07       	cpc	r31, r19
    429c:	a0 f4       	brcc	.+40     	; 0x42c6 <malloc+0x120>
    429e:	2e 1b       	sub	r18, r30
    42a0:	3f 0b       	sbc	r19, r31
    42a2:	28 17       	cp	r18, r24
    42a4:	39 07       	cpc	r19, r25
    42a6:	78 f0       	brcs	.+30     	; 0x42c6 <malloc+0x120>
    42a8:	ac 01       	movw	r20, r24
    42aa:	4e 5f       	subi	r20, 0xFE	; 254
    42ac:	5f 4f       	sbci	r21, 0xFF	; 255
    42ae:	24 17       	cp	r18, r20
    42b0:	35 07       	cpc	r19, r21
    42b2:	48 f0       	brcs	.+18     	; 0x42c6 <malloc+0x120>
    42b4:	4e 0f       	add	r20, r30
    42b6:	5f 1f       	adc	r21, r31
    42b8:	50 93 8e 04 	sts	0x048E, r21	; 0x80048e <__brkval+0x1>
    42bc:	40 93 8d 04 	sts	0x048D, r20	; 0x80048d <__brkval>
    42c0:	81 93       	st	Z+, r24
    42c2:	91 93       	st	Z+, r25
    42c4:	02 c0       	rjmp	.+4      	; 0x42ca <malloc+0x124>
    42c6:	e0 e0       	ldi	r30, 0x00	; 0
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	cf 01       	movw	r24, r30
    42cc:	df 91       	pop	r29
    42ce:	cf 91       	pop	r28
    42d0:	1f 91       	pop	r17
    42d2:	0f 91       	pop	r16
    42d4:	08 95       	ret

000042d6 <free>:
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	00 97       	sbiw	r24, 0x00	; 0
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <free+0xa>
    42de:	81 c0       	rjmp	.+258    	; 0x43e2 <free+0x10c>
    42e0:	fc 01       	movw	r30, r24
    42e2:	32 97       	sbiw	r30, 0x02	; 2
    42e4:	13 82       	std	Z+3, r1	; 0x03
    42e6:	12 82       	std	Z+2, r1	; 0x02
    42e8:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <__flp>
    42ec:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <__flp+0x1>
    42f0:	10 97       	sbiw	r26, 0x00	; 0
    42f2:	81 f4       	brne	.+32     	; 0x4314 <free+0x3e>
    42f4:	20 81       	ld	r18, Z
    42f6:	31 81       	ldd	r19, Z+1	; 0x01
    42f8:	82 0f       	add	r24, r18
    42fa:	93 1f       	adc	r25, r19
    42fc:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <__brkval>
    4300:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <__brkval+0x1>
    4304:	28 17       	cp	r18, r24
    4306:	39 07       	cpc	r19, r25
    4308:	51 f5       	brne	.+84     	; 0x435e <free+0x88>
    430a:	f0 93 8e 04 	sts	0x048E, r31	; 0x80048e <__brkval+0x1>
    430e:	e0 93 8d 04 	sts	0x048D, r30	; 0x80048d <__brkval>
    4312:	67 c0       	rjmp	.+206    	; 0x43e2 <free+0x10c>
    4314:	ed 01       	movw	r28, r26
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	ce 17       	cp	r28, r30
    431c:	df 07       	cpc	r29, r31
    431e:	40 f4       	brcc	.+16     	; 0x4330 <free+0x5a>
    4320:	4a 81       	ldd	r20, Y+2	; 0x02
    4322:	5b 81       	ldd	r21, Y+3	; 0x03
    4324:	9e 01       	movw	r18, r28
    4326:	41 15       	cp	r20, r1
    4328:	51 05       	cpc	r21, r1
    432a:	f1 f0       	breq	.+60     	; 0x4368 <free+0x92>
    432c:	ea 01       	movw	r28, r20
    432e:	f5 cf       	rjmp	.-22     	; 0x431a <free+0x44>
    4330:	d3 83       	std	Z+3, r29	; 0x03
    4332:	c2 83       	std	Z+2, r28	; 0x02
    4334:	40 81       	ld	r20, Z
    4336:	51 81       	ldd	r21, Z+1	; 0x01
    4338:	84 0f       	add	r24, r20
    433a:	95 1f       	adc	r25, r21
    433c:	c8 17       	cp	r28, r24
    433e:	d9 07       	cpc	r29, r25
    4340:	59 f4       	brne	.+22     	; 0x4358 <free+0x82>
    4342:	88 81       	ld	r24, Y
    4344:	99 81       	ldd	r25, Y+1	; 0x01
    4346:	84 0f       	add	r24, r20
    4348:	95 1f       	adc	r25, r21
    434a:	02 96       	adiw	r24, 0x02	; 2
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	9b 81       	ldd	r25, Y+3	; 0x03
    4354:	93 83       	std	Z+3, r25	; 0x03
    4356:	82 83       	std	Z+2, r24	; 0x02
    4358:	21 15       	cp	r18, r1
    435a:	31 05       	cpc	r19, r1
    435c:	29 f4       	brne	.+10     	; 0x4368 <free+0x92>
    435e:	f0 93 90 04 	sts	0x0490, r31	; 0x800490 <__flp+0x1>
    4362:	e0 93 8f 04 	sts	0x048F, r30	; 0x80048f <__flp>
    4366:	3d c0       	rjmp	.+122    	; 0x43e2 <free+0x10c>
    4368:	e9 01       	movw	r28, r18
    436a:	fb 83       	std	Y+3, r31	; 0x03
    436c:	ea 83       	std	Y+2, r30	; 0x02
    436e:	49 91       	ld	r20, Y+
    4370:	59 91       	ld	r21, Y+
    4372:	c4 0f       	add	r28, r20
    4374:	d5 1f       	adc	r29, r21
    4376:	ec 17       	cp	r30, r28
    4378:	fd 07       	cpc	r31, r29
    437a:	61 f4       	brne	.+24     	; 0x4394 <free+0xbe>
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	84 0f       	add	r24, r20
    4382:	95 1f       	adc	r25, r21
    4384:	02 96       	adiw	r24, 0x02	; 2
    4386:	e9 01       	movw	r28, r18
    4388:	99 83       	std	Y+1, r25	; 0x01
    438a:	88 83       	st	Y, r24
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	9b 83       	std	Y+3, r25	; 0x03
    4392:	8a 83       	std	Y+2, r24	; 0x02
    4394:	e0 e0       	ldi	r30, 0x00	; 0
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	12 96       	adiw	r26, 0x02	; 2
    439a:	8d 91       	ld	r24, X+
    439c:	9c 91       	ld	r25, X
    439e:	13 97       	sbiw	r26, 0x03	; 3
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	19 f0       	breq	.+6      	; 0x43aa <free+0xd4>
    43a4:	fd 01       	movw	r30, r26
    43a6:	dc 01       	movw	r26, r24
    43a8:	f7 cf       	rjmp	.-18     	; 0x4398 <free+0xc2>
    43aa:	8d 91       	ld	r24, X+
    43ac:	9c 91       	ld	r25, X
    43ae:	11 97       	sbiw	r26, 0x01	; 1
    43b0:	9d 01       	movw	r18, r26
    43b2:	2e 5f       	subi	r18, 0xFE	; 254
    43b4:	3f 4f       	sbci	r19, 0xFF	; 255
    43b6:	82 0f       	add	r24, r18
    43b8:	93 1f       	adc	r25, r19
    43ba:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <__brkval>
    43be:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <__brkval+0x1>
    43c2:	28 17       	cp	r18, r24
    43c4:	39 07       	cpc	r19, r25
    43c6:	69 f4       	brne	.+26     	; 0x43e2 <free+0x10c>
    43c8:	30 97       	sbiw	r30, 0x00	; 0
    43ca:	29 f4       	brne	.+10     	; 0x43d6 <free+0x100>
    43cc:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <__flp+0x1>
    43d0:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <__flp>
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <free+0x104>
    43d6:	13 82       	std	Z+3, r1	; 0x03
    43d8:	12 82       	std	Z+2, r1	; 0x02
    43da:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <__brkval+0x1>
    43de:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <__brkval>
    43e2:	df 91       	pop	r29
    43e4:	cf 91       	pop	r28
    43e6:	08 95       	ret

000043e8 <do_rand>:
    43e8:	8f 92       	push	r8
    43ea:	9f 92       	push	r9
    43ec:	af 92       	push	r10
    43ee:	bf 92       	push	r11
    43f0:	cf 92       	push	r12
    43f2:	df 92       	push	r13
    43f4:	ef 92       	push	r14
    43f6:	ff 92       	push	r15
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	ec 01       	movw	r28, r24
    43fe:	68 81       	ld	r22, Y
    4400:	79 81       	ldd	r23, Y+1	; 0x01
    4402:	8a 81       	ldd	r24, Y+2	; 0x02
    4404:	9b 81       	ldd	r25, Y+3	; 0x03
    4406:	61 15       	cp	r22, r1
    4408:	71 05       	cpc	r23, r1
    440a:	81 05       	cpc	r24, r1
    440c:	91 05       	cpc	r25, r1
    440e:	21 f4       	brne	.+8      	; 0x4418 <do_rand+0x30>
    4410:	64 e2       	ldi	r22, 0x24	; 36
    4412:	79 ed       	ldi	r23, 0xD9	; 217
    4414:	8b e5       	ldi	r24, 0x5B	; 91
    4416:	97 e0       	ldi	r25, 0x07	; 7
    4418:	2d e1       	ldi	r18, 0x1D	; 29
    441a:	33 ef       	ldi	r19, 0xF3	; 243
    441c:	41 e0       	ldi	r20, 0x01	; 1
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	34 de       	rcall	.-920    	; 0x408a <__divmodsi4>
    4422:	49 01       	movw	r8, r18
    4424:	5a 01       	movw	r10, r20
    4426:	9b 01       	movw	r18, r22
    4428:	ac 01       	movw	r20, r24
    442a:	a7 ea       	ldi	r26, 0xA7	; 167
    442c:	b1 e4       	ldi	r27, 0x41	; 65
    442e:	58 de       	rcall	.-848    	; 0x40e0 <__muluhisi3>
    4430:	6b 01       	movw	r12, r22
    4432:	7c 01       	movw	r14, r24
    4434:	ac ee       	ldi	r26, 0xEC	; 236
    4436:	b4 ef       	ldi	r27, 0xF4	; 244
    4438:	a5 01       	movw	r20, r10
    443a:	94 01       	movw	r18, r8
    443c:	5d de       	rcall	.-838    	; 0x40f8 <__mulohisi3>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	8c 0d       	add	r24, r12
    4444:	9d 1d       	adc	r25, r13
    4446:	ae 1d       	adc	r26, r14
    4448:	bf 1d       	adc	r27, r15
    444a:	b7 ff       	sbrs	r27, 7
    444c:	03 c0       	rjmp	.+6      	; 0x4454 <do_rand+0x6c>
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	a1 09       	sbc	r26, r1
    4452:	b0 48       	sbci	r27, 0x80	; 128
    4454:	88 83       	st	Y, r24
    4456:	99 83       	std	Y+1, r25	; 0x01
    4458:	aa 83       	std	Y+2, r26	; 0x02
    445a:	bb 83       	std	Y+3, r27	; 0x03
    445c:	9f 77       	andi	r25, 0x7F	; 127
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	ff 90       	pop	r15
    4464:	ef 90       	pop	r14
    4466:	df 90       	pop	r13
    4468:	cf 90       	pop	r12
    446a:	bf 90       	pop	r11
    446c:	af 90       	pop	r10
    446e:	9f 90       	pop	r9
    4470:	8f 90       	pop	r8
    4472:	08 95       	ret

00004474 <rand_r>:
    4474:	b9 cf       	rjmp	.-142    	; 0x43e8 <do_rand>

00004476 <rand>:
    4476:	86 e0       	ldi	r24, 0x06	; 6
    4478:	92 e0       	ldi	r25, 0x02	; 2
    447a:	b6 cf       	rjmp	.-148    	; 0x43e8 <do_rand>

0000447c <srand>:
    447c:	a0 e0       	ldi	r26, 0x00	; 0
    447e:	b0 e0       	ldi	r27, 0x00	; 0
    4480:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    4484:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    4488:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    448c:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    4490:	08 95       	ret

00004492 <realloc>:
    4492:	6f 92       	push	r6
    4494:	7f 92       	push	r7
    4496:	8f 92       	push	r8
    4498:	9f 92       	push	r9
    449a:	af 92       	push	r10
    449c:	bf 92       	push	r11
    449e:	cf 92       	push	r12
    44a0:	df 92       	push	r13
    44a2:	ef 92       	push	r14
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	81 f4       	brne	.+32     	; 0x44d2 <realloc+0x40>
    44b2:	cb 01       	movw	r24, r22
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	ff 90       	pop	r15
    44be:	ef 90       	pop	r14
    44c0:	df 90       	pop	r13
    44c2:	cf 90       	pop	r12
    44c4:	bf 90       	pop	r11
    44c6:	af 90       	pop	r10
    44c8:	9f 90       	pop	r9
    44ca:	8f 90       	pop	r8
    44cc:	7f 90       	pop	r7
    44ce:	6f 90       	pop	r6
    44d0:	6a ce       	rjmp	.-812    	; 0x41a6 <malloc>
    44d2:	fc 01       	movw	r30, r24
    44d4:	e6 0f       	add	r30, r22
    44d6:	f7 1f       	adc	r31, r23
    44d8:	9c 01       	movw	r18, r24
    44da:	22 50       	subi	r18, 0x02	; 2
    44dc:	31 09       	sbc	r19, r1
    44de:	e2 17       	cp	r30, r18
    44e0:	f3 07       	cpc	r31, r19
    44e2:	08 f4       	brcc	.+2      	; 0x44e6 <realloc+0x54>
    44e4:	a5 c0       	rjmp	.+330    	; 0x4630 <realloc+0x19e>
    44e6:	ec 01       	movw	r28, r24
    44e8:	d9 01       	movw	r26, r18
    44ea:	0d 91       	ld	r16, X+
    44ec:	1c 91       	ld	r17, X
    44ee:	11 97       	sbiw	r26, 0x01	; 1
    44f0:	06 17       	cp	r16, r22
    44f2:	17 07       	cpc	r17, r23
    44f4:	a8 f0       	brcs	.+42     	; 0x4520 <realloc+0x8e>
    44f6:	05 30       	cpi	r16, 0x05	; 5
    44f8:	11 05       	cpc	r17, r1
    44fa:	08 f4       	brcc	.+2      	; 0x44fe <realloc+0x6c>
    44fc:	97 c0       	rjmp	.+302    	; 0x462c <realloc+0x19a>
    44fe:	c8 01       	movw	r24, r16
    4500:	04 97       	sbiw	r24, 0x04	; 4
    4502:	86 17       	cp	r24, r22
    4504:	97 07       	cpc	r25, r23
    4506:	08 f4       	brcc	.+2      	; 0x450a <realloc+0x78>
    4508:	91 c0       	rjmp	.+290    	; 0x462c <realloc+0x19a>
    450a:	02 50       	subi	r16, 0x02	; 2
    450c:	11 09       	sbc	r17, r1
    450e:	06 1b       	sub	r16, r22
    4510:	17 0b       	sbc	r17, r23
    4512:	01 93       	st	Z+, r16
    4514:	11 93       	st	Z+, r17
    4516:	6d 93       	st	X+, r22
    4518:	7c 93       	st	X, r23
    451a:	cf 01       	movw	r24, r30
    451c:	dc de       	rcall	.-584    	; 0x42d6 <free>
    451e:	86 c0       	rjmp	.+268    	; 0x462c <realloc+0x19a>
    4520:	5b 01       	movw	r10, r22
    4522:	a0 1a       	sub	r10, r16
    4524:	b1 0a       	sbc	r11, r17
    4526:	4c 01       	movw	r8, r24
    4528:	80 0e       	add	r8, r16
    452a:	91 1e       	adc	r9, r17
    452c:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <__flp>
    4530:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <__flp+0x1>
    4534:	61 2c       	mov	r6, r1
    4536:	71 2c       	mov	r7, r1
    4538:	e1 2c       	mov	r14, r1
    453a:	f1 2c       	mov	r15, r1
    453c:	10 97       	sbiw	r26, 0x00	; 0
    453e:	09 f4       	brne	.+2      	; 0x4542 <realloc+0xb0>
    4540:	46 c0       	rjmp	.+140    	; 0x45ce <realloc+0x13c>
    4542:	8d 91       	ld	r24, X+
    4544:	9c 91       	ld	r25, X
    4546:	11 97       	sbiw	r26, 0x01	; 1
    4548:	a8 15       	cp	r26, r8
    454a:	b9 05       	cpc	r27, r9
    454c:	b1 f5       	brne	.+108    	; 0x45ba <realloc+0x128>
    454e:	6c 01       	movw	r12, r24
    4550:	42 e0       	ldi	r20, 0x02	; 2
    4552:	c4 0e       	add	r12, r20
    4554:	d1 1c       	adc	r13, r1
    4556:	ca 14       	cp	r12, r10
    4558:	db 04       	cpc	r13, r11
    455a:	78 f1       	brcs	.+94     	; 0x45ba <realloc+0x128>
    455c:	4c 01       	movw	r8, r24
    455e:	8a 18       	sub	r8, r10
    4560:	9b 08       	sbc	r9, r11
    4562:	64 01       	movw	r12, r8
    4564:	42 e0       	ldi	r20, 0x02	; 2
    4566:	c4 0e       	add	r12, r20
    4568:	d1 1c       	adc	r13, r1
    456a:	12 96       	adiw	r26, 0x02	; 2
    456c:	bc 90       	ld	r11, X
    456e:	12 97       	sbiw	r26, 0x02	; 2
    4570:	13 96       	adiw	r26, 0x03	; 3
    4572:	ac 91       	ld	r26, X
    4574:	b5 e0       	ldi	r27, 0x05	; 5
    4576:	cb 16       	cp	r12, r27
    4578:	d1 04       	cpc	r13, r1
    457a:	40 f0       	brcs	.+16     	; 0x458c <realloc+0xfa>
    457c:	b2 82       	std	Z+2, r11	; 0x02
    457e:	a3 83       	std	Z+3, r26	; 0x03
    4580:	91 82       	std	Z+1, r9	; 0x01
    4582:	80 82       	st	Z, r8
    4584:	d9 01       	movw	r26, r18
    4586:	6d 93       	st	X+, r22
    4588:	7c 93       	st	X, r23
    458a:	09 c0       	rjmp	.+18     	; 0x459e <realloc+0x10c>
    458c:	0e 5f       	subi	r16, 0xFE	; 254
    458e:	1f 4f       	sbci	r17, 0xFF	; 255
    4590:	80 0f       	add	r24, r16
    4592:	91 1f       	adc	r25, r17
    4594:	f9 01       	movw	r30, r18
    4596:	91 83       	std	Z+1, r25	; 0x01
    4598:	80 83       	st	Z, r24
    459a:	eb 2d       	mov	r30, r11
    459c:	fa 2f       	mov	r31, r26
    459e:	e1 14       	cp	r14, r1
    45a0:	f1 04       	cpc	r15, r1
    45a2:	31 f0       	breq	.+12     	; 0x45b0 <realloc+0x11e>
    45a4:	d7 01       	movw	r26, r14
    45a6:	13 96       	adiw	r26, 0x03	; 3
    45a8:	fc 93       	st	X, r31
    45aa:	ee 93       	st	-X, r30
    45ac:	12 97       	sbiw	r26, 0x02	; 2
    45ae:	3e c0       	rjmp	.+124    	; 0x462c <realloc+0x19a>
    45b0:	f0 93 90 04 	sts	0x0490, r31	; 0x800490 <__flp+0x1>
    45b4:	e0 93 8f 04 	sts	0x048F, r30	; 0x80048f <__flp>
    45b8:	39 c0       	rjmp	.+114    	; 0x462c <realloc+0x19a>
    45ba:	68 16       	cp	r6, r24
    45bc:	79 06       	cpc	r7, r25
    45be:	08 f4       	brcc	.+2      	; 0x45c2 <realloc+0x130>
    45c0:	3c 01       	movw	r6, r24
    45c2:	7d 01       	movw	r14, r26
    45c4:	12 96       	adiw	r26, 0x02	; 2
    45c6:	0d 90       	ld	r0, X+
    45c8:	bc 91       	ld	r27, X
    45ca:	a0 2d       	mov	r26, r0
    45cc:	b7 cf       	rjmp	.-146    	; 0x453c <realloc+0xaa>
    45ce:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <__brkval>
    45d2:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <__brkval+0x1>
    45d6:	88 16       	cp	r8, r24
    45d8:	99 06       	cpc	r9, r25
    45da:	e1 f4       	brne	.+56     	; 0x4614 <realloc+0x182>
    45dc:	66 16       	cp	r6, r22
    45de:	77 06       	cpc	r7, r23
    45e0:	c8 f4       	brcc	.+50     	; 0x4614 <realloc+0x182>
    45e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    45e6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	41 f4       	brne	.+16     	; 0x45fe <realloc+0x16c>
    45ee:	8d b7       	in	r24, 0x3d	; 61
    45f0:	9e b7       	in	r25, 0x3e	; 62
    45f2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    45f6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    45fa:	84 1b       	sub	r24, r20
    45fc:	95 0b       	sbc	r25, r21
    45fe:	e8 17       	cp	r30, r24
    4600:	f9 07       	cpc	r31, r25
    4602:	b0 f4       	brcc	.+44     	; 0x4630 <realloc+0x19e>
    4604:	f0 93 8e 04 	sts	0x048E, r31	; 0x80048e <__brkval+0x1>
    4608:	e0 93 8d 04 	sts	0x048D, r30	; 0x80048d <__brkval>
    460c:	f9 01       	movw	r30, r18
    460e:	71 83       	std	Z+1, r23	; 0x01
    4610:	60 83       	st	Z, r22
    4612:	0c c0       	rjmp	.+24     	; 0x462c <realloc+0x19a>
    4614:	cb 01       	movw	r24, r22
    4616:	c7 dd       	rcall	.-1138   	; 0x41a6 <malloc>
    4618:	7c 01       	movw	r14, r24
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	49 f0       	breq	.+18     	; 0x4630 <realloc+0x19e>
    461e:	a8 01       	movw	r20, r16
    4620:	be 01       	movw	r22, r28
    4622:	17 d0       	rcall	.+46     	; 0x4652 <memcpy>
    4624:	ce 01       	movw	r24, r28
    4626:	57 de       	rcall	.-850    	; 0x42d6 <free>
    4628:	c7 01       	movw	r24, r14
    462a:	04 c0       	rjmp	.+8      	; 0x4634 <realloc+0x1a2>
    462c:	ce 01       	movw	r24, r28
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <realloc+0x1a2>
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	df 91       	pop	r29
    4636:	cf 91       	pop	r28
    4638:	1f 91       	pop	r17
    463a:	0f 91       	pop	r16
    463c:	ff 90       	pop	r15
    463e:	ef 90       	pop	r14
    4640:	df 90       	pop	r13
    4642:	cf 90       	pop	r12
    4644:	bf 90       	pop	r11
    4646:	af 90       	pop	r10
    4648:	9f 90       	pop	r9
    464a:	8f 90       	pop	r8
    464c:	7f 90       	pop	r7
    464e:	6f 90       	pop	r6
    4650:	08 95       	ret

00004652 <memcpy>:
    4652:	fb 01       	movw	r30, r22
    4654:	dc 01       	movw	r26, r24
    4656:	02 c0       	rjmp	.+4      	; 0x465c <memcpy+0xa>
    4658:	01 90       	ld	r0, Z+
    465a:	0d 92       	st	X+, r0
    465c:	41 50       	subi	r20, 0x01	; 1
    465e:	50 40       	sbci	r21, 0x00	; 0
    4660:	d8 f7       	brcc	.-10     	; 0x4658 <memcpy+0x6>
    4662:	08 95       	ret

00004664 <_exit>:
    4664:	f8 94       	cli

00004666 <__stop_program>:
    4666:	ff cf       	rjmp	.-2      	; 0x4666 <__stop_program>
