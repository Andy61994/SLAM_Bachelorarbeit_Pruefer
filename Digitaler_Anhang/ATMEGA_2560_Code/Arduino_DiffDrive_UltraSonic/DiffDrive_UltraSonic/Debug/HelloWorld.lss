
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800200  00002b2a  00002bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  008002da  008002da  00002c98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e471  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b14  00000000  00000000  00011639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f0e  00000000  00000000  0001414d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011a4  00000000  00000000  0001705c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f81  00000000  00000000  00018200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c85  00000000  00000000  0001d181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  00022e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f8 c0       	rjmp	.+496    	; 0x1f2 <__ctors_end>
       2:	00 00       	nop
       4:	f8 c2       	rjmp	.+1520   	; 0x5f6 <__vector_1>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c3       	rjmp	.+2022   	; 0x824 <__vector_15>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__vector_23>
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_25>
      68:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_26>
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_54>
      dc:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_55>
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	64 61       	ori	r22, 0x14	; 20
      e6:	35 39       	cpi	r19, 0x95	; 149
      e8:	30 39       	cpi	r19, 0x90	; 144
      ea:	66 62       	ori	r22, 0x26	; 38
      ec:	65 33       	cpi	r22, 0x35	; 53
      ee:	37 38       	cpi	r19, 0x87	; 135
      f0:	61 65       	ori	r22, 0x51	; 81
      f2:	61 66       	ori	r22, 0x61	; 97
      f4:	38 35       	cpi	r19, 0x58	; 88
      f6:	65 35       	cpi	r22, 0x55	; 85
      f8:	34 37       	cpi	r19, 0x74	; 116
      fa:	65 38       	cpi	r22, 0x85	; 133
      fc:	33 30       	cpi	r19, 0x03	; 3
      fe:	63 63       	ori	r22, 0x33	; 51
     100:	31 62       	ori	r19, 0x21	; 33
     102:	62 37       	cpi	r22, 0x72	; 114
	...

00000105 <_ZZN8std_msgs5Int327getTypeEvE3__c>:
     105:	73 74 64 5f 6d 73 67 73 2f 49 6e 74 33 32 00        std_msgs/Int32.

00000114 <_ZZN14rosserial_msgs20RequestParamResponse6getMD5EvE3__c>:
     114:	39 66 30 65 39 38 62 64 61 36 35 39 38 31 39 38     9f0e98bda6598198
     124:	36 64 64 66 35 33 61 66 61 37 61 34 30 65 34 39     6ddf53afa7a40e49
	...

00000135 <_ZN14rosserial_msgsL12REQUESTPARAME>:
     135:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 52     rosserial_msgs/R
     145:	65 71 75 65 73 74 50 61 72 61 6d 00                 equestParam.

00000151 <_ZZN14rosserial_msgs3Log6getMD5EvE3__c>:
     151:	31 31 61 62 64 37 33 31 63 32 35 39 33 33 32 36     11abd731c2593326
     161:	31 63 64 36 31 38 33 62 64 31 32 64 36 32 39 35     1cd6183bd12d6295
	...

00000172 <_ZZN14rosserial_msgs3Log7getTypeEvE3__c>:
     172:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 4c     rosserial_msgs/L
     182:	6f 67 00                                            og.

00000185 <_ZZN14rosserial_msgs9TopicInfo6getMD5EvE3__c>:
     185:	30 61 64 35 31 66 38 38 66 63 34 34 38 39 32 66     0ad51f88fc44892f
     195:	38 63 31 30 36 38 34 30 37 37 36 34 36 30 30 35     8c10684077646005
	...

000001a6 <_ZZN14rosserial_msgs9TopicInfo7getTypeEvE3__c>:
     1a6:	72 6f 73 73 65 72 69 61 6c 5f 6d 73 67 73 2f 54     rosserial_msgs/T
     1b6:	6f 70 69 63 49 6e 66 6f 00                          opicInfo.

000001bf <_ZZN8std_msgs4Time6getMD5EvE3__c>:
     1bf:	63 64 37 31 36 36 63 37 34 63 35 35 32 63 33 31     cd7166c74c552c31
     1cf:	31 66 62 63 63 32 66 65 35 61 37 62 63 32 38 39     1fbcc2fe5a7bc289
	...

000001e0 <_ZZN8std_msgs4Time7getTypeEvE3__c>:
     1e0:	73 74 64 5f 6d 73 67 73 2f 54 69 6d 65 00           std_msgs/Time.

000001ee <__ctors_start>:
     1ee:	d5 11       	cpse	r29, r5
     1f0:	61 12       	cpse	r6, r17

000001f2 <__ctors_end>:
     1f2:	11 24       	eor	r1, r1
     1f4:	1f be       	out	0x3f, r1	; 63
     1f6:	cf ef       	ldi	r28, 0xFF	; 255
     1f8:	d1 e2       	ldi	r29, 0x21	; 33
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0c bf       	out	0x3c, r16	; 60

00000202 <__do_copy_data>:
     202:	12 e0       	ldi	r17, 0x02	; 2
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b2 e0       	ldi	r27, 0x02	; 2
     208:	ea e2       	ldi	r30, 0x2A	; 42
     20a:	fb e2       	ldi	r31, 0x2B	; 43
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0b bf       	out	0x3b, r16	; 59
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x14>
     212:	07 90       	elpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	aa 3d       	cpi	r26, 0xDA	; 218
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0x10>

0000021c <__do_clear_bss>:
     21c:	24 e0       	ldi	r18, 0x04	; 4
     21e:	aa ed       	ldi	r26, 0xDA	; 218
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a2 37       	cpi	r26, 0x72	; 114
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	c9 ef       	ldi	r28, 0xF9	; 249
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	06 c0       	rjmp	.+12     	; 0x242 <__do_global_ctors+0x16>
     236:	21 97       	sbiw	r28, 0x01	; 1
     238:	01 09       	sbc	r16, r1
     23a:	80 2f       	mov	r24, r16
     23c:	fe 01       	movw	r30, r28
     23e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__tablejump2__>
     242:	c7 3f       	cpi	r28, 0xF7	; 247
     244:	d1 07       	cpc	r29, r17
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	08 07       	cpc	r16, r24
     24a:	a9 f7       	brne	.-22     	; 0x236 <__do_global_ctors+0xa>
     24c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <main>
     250:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <_ZN15DC_Motor_Driver6setRpmEh>:
}

void DC_Motor_Driver::stopMotor()
{
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_1);
	*this->CurrentDirection.PORTx_CTRL &= ~(1 << this->CurrentDirection.PORTxN_CTRL_2);
     256:	f8 94       	cli
     258:	dc 01       	movw	r26, r24
     25a:	ed 91       	ld	r30, X+
     25c:	fc 91       	ld	r31, X
     25e:	b9 e1       	ldi	r27, 0x19	; 25
     260:	6b 9f       	mul	r22, r27
     262:	b0 01       	movw	r22, r0
     264:	11 24       	eor	r1, r1
     266:	71 83       	std	Z+1, r23	; 0x01
     268:	60 83       	st	Z, r22
     26a:	78 94       	sei
     26c:	08 95       	ret

0000026e <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>:
     26e:	fc 01       	movw	r30, r24
     270:	63 83       	std	Z+3, r22	; 0x03
     272:	08 95       	ret

00000274 <_ZN15DC_Motor_Driver10startMotorEv>:
     274:	fc 01       	movw	r30, r24
     276:	83 81       	ldd	r24, Z+3	; 0x03
     278:	a4 81       	ldd	r26, Z+4	; 0x04
     27a:	b5 81       	ldd	r27, Z+5	; 0x05
     27c:	88 23       	and	r24, r24
     27e:	c1 f0       	breq	.+48     	; 0x2b0 <_ZN15DC_Motor_Driver10startMotorEv+0x3c>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	b1 f4       	brne	.+44     	; 0x2b0 <_ZN15DC_Motor_Driver10startMotorEv+0x3c>
     284:	4c 91       	ld	r20, X
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9c 01       	movw	r18, r24
     28c:	07 80       	ldd	r0, Z+7	; 0x07
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_ZN15DC_Motor_Driver10startMotorEv+0x20>
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <_ZN15DC_Motor_Driver10startMotorEv+0x1c>
     298:	24 2b       	or	r18, r20
     29a:	2c 93       	st	X, r18
     29c:	a4 81       	ldd	r26, Z+4	; 0x04
     29e:	b5 81       	ldd	r27, Z+5	; 0x05
     2a0:	2c 91       	ld	r18, X
     2a2:	06 80       	ldd	r0, Z+6	; 0x06
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <_ZN15DC_Motor_Driver10startMotorEv+0x36>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	0a 94       	dec	r0
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <_ZN15DC_Motor_Driver10startMotorEv+0x32>
     2ae:	15 c0       	rjmp	.+42     	; 0x2da <_ZN15DC_Motor_Driver10startMotorEv+0x66>
     2b0:	4c 91       	ld	r20, X
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9c 01       	movw	r18, r24
     2b8:	06 80       	ldd	r0, Z+6	; 0x06
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <_ZN15DC_Motor_Driver10startMotorEv+0x4c>
     2bc:	22 0f       	add	r18, r18
     2be:	33 1f       	adc	r19, r19
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <_ZN15DC_Motor_Driver10startMotorEv+0x48>
     2c4:	24 2b       	or	r18, r20
     2c6:	2c 93       	st	X, r18
     2c8:	a4 81       	ldd	r26, Z+4	; 0x04
     2ca:	b5 81       	ldd	r27, Z+5	; 0x05
     2cc:	2c 91       	ld	r18, X
     2ce:	07 80       	ldd	r0, Z+7	; 0x07
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <_ZN15DC_Motor_Driver10startMotorEv+0x62>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <_ZN15DC_Motor_Driver10startMotorEv+0x5e>
     2da:	80 95       	com	r24
     2dc:	82 23       	and	r24, r18
     2de:	8c 93       	st	X, r24
     2e0:	08 95       	ret

000002e2 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>:
								volatile uint8_t* TCCRnA, 
								volatile uint8_t* TCCRnB,
								volatile uint16_t* _OCRnX,
								uint8_t COMNx1
								)
{
     2e2:	2f 92       	push	r2
     2e4:	3f 92       	push	r3
     2e6:	4f 92       	push	r4
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	af 92       	push	r10
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	1f 92       	push	r1
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	da 82       	std	Y+2, r13	; 0x02
     30a:	c9 82       	std	Y+1, r12	; 0x01
     30c:	4f 88       	ldd	r4, Y+23	; 0x17
     30e:	58 8c       	ldd	r5, Y+24	; 0x18
     310:	69 8c       	ldd	r6, Y+25	; 0x19
     312:	7a 8c       	ldd	r7, Y+26	; 0x1a
     314:	2b 8c       	ldd	r2, Y+27	; 0x1b
     316:	3c 8c       	ldd	r3, Y+28	; 0x1c
	*DDRx_PWM |= (1<<DDxN_PWM); // set used PWM pin as out port
     318:	db 01       	movw	r26, r22
     31a:	1c 91       	ld	r17, X
     31c:	a1 e0       	ldi	r26, 0x01	; 1
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	fd 01       	movw	r30, r26
     322:	02 c0       	rjmp	.+4      	; 0x328 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x46>
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	4a 95       	dec	r20
     32a:	e2 f7       	brpl	.-8      	; 0x324 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x42>
     32c:	af 01       	movw	r20, r30
     32e:	41 2b       	or	r20, r17
     330:	fb 01       	movw	r30, r22
     332:	40 83       	st	Z, r20
	*DDRx_CTRL |= (1<<DDxN_CTRL_1) | (1<<DDxN_CTRL_2); // set used Direction Control pin as out port
     334:	f9 01       	movw	r30, r18
     336:	60 81       	ld	r22, Z
     338:	ad 01       	movw	r20, r26
     33a:	01 c0       	rjmp	.+2      	; 0x33e <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x5c>
     33c:	44 0f       	add	r20, r20
     33e:	0a 95       	dec	r16
     340:	ea f7       	brpl	.-6      	; 0x33c <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x5a>
     342:	64 2b       	or	r22, r20
     344:	ad 01       	movw	r20, r26
     346:	01 c0       	rjmp	.+2      	; 0x34a <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x68>
     348:	44 0f       	add	r20, r20
     34a:	ea 94       	dec	r14
     34c:	ea f7       	brpl	.-6      	; 0x348 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x66>
     34e:	46 2b       	or	r20, r22
     350:	40 83       	st	Z, r20
	*PORTxN_CTRL &= ~(1<<PORTxN_CTRL_1) | (1<<PORTxN_CTRL_2); // set Control bits to zero so motor is not running
     352:	f6 01       	movw	r30, r12
     354:	30 81       	ld	r19, Z
     356:	ad 01       	movw	r20, r26
     358:	0a 2c       	mov	r0, r10
     35a:	01 c0       	rjmp	.+2      	; 0x35e <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x7c>
     35c:	44 0f       	add	r20, r20
     35e:	0a 94       	dec	r0
     360:	ea f7       	brpl	.-6      	; 0x35c <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x7a>
     362:	24 2f       	mov	r18, r20
     364:	20 95       	com	r18
     366:	ad 01       	movw	r20, r26
     368:	08 2c       	mov	r0, r8
     36a:	01 c0       	rjmp	.+2      	; 0x36e <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x8c>
     36c:	44 0f       	add	r20, r20
     36e:	0a 94       	dec	r0
     370:	ea f7       	brpl	.-6      	; 0x36c <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0x8a>
     372:	24 2b       	or	r18, r20
     374:	23 23       	and	r18, r19
     376:	20 83       	st	Z, r18
	this->CurrentDirection = {
		.direction = CLOCKWISE,
		.PORTx_CTRL = PORTxN_CTRL,
		.PORTxN_CTRL_1 = PORTxN_CTRL_1,
		.PORTxN_CTRL_2 = PORTxN_CTRL_2		
	};
     378:	fc 01       	movw	r30, r24
     37a:	13 82       	std	Z+3, r1	; 0x03
     37c:	d5 82       	std	Z+5, r13	; 0x05
     37e:	c4 82       	std	Z+4, r12	; 0x04
     380:	a6 82       	std	Z+6, r10	; 0x06
     382:	87 82       	std	Z+7, r8	; 0x07
	
	
	*ICRn = PWM_TOP_TICK; // define PWM frequency
     384:	2f e3       	ldi	r18, 0x3F	; 63
     386:	3f e1       	ldi	r19, 0x1F	; 31
     388:	ed 89       	ldd	r30, Y+21	; 0x15
     38a:	fe 89       	ldd	r31, Y+22	; 0x16
     38c:	31 83       	std	Z+1, r19	; 0x01
     38e:	20 83       	st	Z, r18
	*TCCRnA |= (1<<COMNx1); // clear down counting, set up counting	
     390:	f2 01       	movw	r30, r4
     392:	20 81       	ld	r18, Z
     394:	0d 8c       	ldd	r0, Y+29	; 0x1d
     396:	02 c0       	rjmp	.+4      	; 0x39c <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0xba>
     398:	aa 0f       	add	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	0a 94       	dec	r0
     39e:	e2 f7       	brpl	.-8      	; 0x398 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h+0xb6>
     3a0:	a2 2b       	or	r26, r18
     3a2:	a0 83       	st	Z, r26
	*TCCRnA |= (1<<WGMN1); // Set ICRn as TOP
     3a4:	20 81       	ld	r18, Z
     3a6:	22 60       	ori	r18, 0x02	; 2
     3a8:	20 83       	st	Z, r18
	*TCCRnB |= (1<<WGMN3); // Set ICRn as TOP
     3aa:	d3 01       	movw	r26, r6
     3ac:	2c 91       	ld	r18, X
     3ae:	20 61       	ori	r18, 0x10	; 16
     3b0:	2c 93       	st	X, r18
	*TCCRnB |= (1<<CSN0); // Set Timer without Prescaling
     3b2:	2c 91       	ld	r18, X
     3b4:	21 60       	ori	r18, 0x01	; 1
     3b6:	2c 93       	st	X, r18
	
	this->OCRnX = _OCRnX;
     3b8:	fc 01       	movw	r30, r24
     3ba:	31 82       	std	Z+1, r3	; 0x01
     3bc:	20 82       	st	Z, r2
	*this->OCRnX = 2000;
     3be:	80 ed       	ldi	r24, 0xD0	; 208
     3c0:	97 e0       	ldi	r25, 0x07	; 7
     3c2:	d1 01       	movw	r26, r2
     3c4:	11 96       	adiw	r26, 0x01	; 1
     3c6:	9c 93       	st	X, r25
     3c8:	8e 93       	st	-X, r24
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	af 90       	pop	r10
     3de:	8f 90       	pop	r8
     3e0:	7f 90       	pop	r7
     3e2:	6f 90       	pop	r6
     3e4:	5f 90       	pop	r5
     3e6:	4f 90       	pop	r4
     3e8:	3f 90       	pop	r3
     3ea:	2f 90       	pop	r2
     3ec:	08 95       	ret

000003ee <_ZN15DC_Motor_Driver19setEncoderRegistersEhhPVhhhS1_hhPVl>:
volatile uint8_t* PORTx_RotaryEncoder, //Port of direction Ctrl Pins
uint8_t PORTxN_RotaryEncoderPhase_A, //Flag to set state Ctrl Pin1 as output
uint8_t PORTxN_RotaryEncoderPhase_B, //Flag to set state Ctrl Pin1 as output
volatile int32_t* EncoderTicks
)
{
     3ee:	8f 92       	push	r8
     3f0:	af 92       	push	r10
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	dc 01       	movw	r26, r24
	*DDRx_RotaryEncoder &= ~((1<<DDxN_otaryEncoderPhase_A) | (1<<DDxN_otaryEncoderPhase_B));
     406:	f9 01       	movw	r30, r18
     408:	80 81       	ld	r24, Z
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	fa 01       	movw	r30, r20
     410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	0a 95       	dec	r16
     418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     41a:	8f 01       	movw	r16, r30
     41c:	fa 01       	movw	r30, r20
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	ee 0f       	add	r30, r30
     422:	ea 94       	dec	r14
     424:	ea f7       	brpl	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     426:	e0 2b       	or	r30, r16
     428:	e0 95       	com	r30
     42a:	8e 23       	and	r24, r30
     42c:	f9 01       	movw	r30, r18
     42e:	80 83       	st	Z, r24


	this->Encoder.Enocder_Ticks = EncoderTicks;
     430:	8d 85       	ldd	r24, Y+13	; 0x0d
     432:	9e 85       	ldd	r25, Y+14	; 0x0e
     434:	19 96       	adiw	r26, 0x09	; 9
     436:	9c 93       	st	X, r25
     438:	8e 93       	st	-X, r24
     43a:	18 97       	sbiw	r26, 0x08	; 8
	this->Encoder.PORTx_Encoder = PORTx_RotaryEncoder;
     43c:	1b 96       	adiw	r26, 0x0b	; 11
     43e:	dc 92       	st	X, r13
     440:	ce 92       	st	-X, r12
     442:	1a 97       	sbiw	r26, 0x0a	; 10
	this->Encoder.PORTxN_EncoderPhase_A = PORTxN_RotaryEncoderPhase_A;
     444:	1c 96       	adiw	r26, 0x0c	; 12
     446:	ac 92       	st	X, r10
     448:	1c 97       	sbiw	r26, 0x0c	; 12
	this->Encoder.PORTxN_EncoderPhase_B = PORTxN_RotaryEncoderPhase_B;
     44a:	1d 96       	adiw	r26, 0x0d	; 13
     44c:	8c 92       	st	X, r8
	
	*this->Encoder.PORTx_Encoder |= (1<<this->Encoder.PORTxN_EncoderPhase_A) | (1<<this->Encoder.PORTxN_EncoderPhase_B);
     44e:	f6 01       	movw	r30, r12
     450:	20 81       	ld	r18, Z
     452:	ca 01       	movw	r24, r20
     454:	01 c0       	rjmp	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	88 0f       	add	r24, r24
     458:	aa 94       	dec	r10
     45a:	ea f7       	brpl	.-6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45c:	28 2b       	or	r18, r24
     45e:	ca 01       	movw	r24, r20
     460:	01 c0       	rjmp	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	88 0f       	add	r24, r24
     464:	8a 94       	dec	r8
     466:	ea f7       	brpl	.-6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     468:	82 2b       	or	r24, r18
     46a:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
     46c:	e9 e6       	ldi	r30, 0x69	; 105
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	82 60       	ori	r24, 0x02	; 2
     474:	80 83       	st	Z, r24
	EIMSK |= (1<<INTx0);
     476:	8d b3       	in	r24, 0x1d	; 29
     478:	01 c0       	rjmp	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	44 0f       	add	r20, r20
     47c:	6a 95       	dec	r22
     47e:	ea f7       	brpl	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     480:	48 2b       	or	r20, r24
     482:	4d bb       	out	0x1d, r20	; 29
	//sei();
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	af 90       	pop	r10
     494:	8f 90       	pop	r8
     496:	08 95       	ret

00000498 <_ZN15DC_Motor_DriverC1Eh>:
#include <util/delay.h>

volatile int32_t EncoderTicks_0;
volatile int32_t EncoderTicks_1;

DC_Motor_Driver::DC_Motor_Driver(pwm_num pwmN)
     498:	8f 92       	push	r8
     49a:	af 92       	push	r10
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	0f 93       	push	r16
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
{
	switch (pwmN)
     4aa:	66 23       	and	r22, r22
     4ac:	59 f1       	breq	.+86     	; 0x504 <_ZN15DC_Motor_DriverC1Eh+0x6c>
     4ae:	61 30       	cpi	r22, 0x01	; 1
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <_ZN15DC_Motor_DriverC1Eh+0x1c>
     4b2:	62 c0       	rjmp	.+196    	; 0x578 <_ZN15DC_Motor_DriverC1Eh+0xe0>
	case PWM_0:
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC5, DDC7, &PORTC, PORTC5, PORTC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
		setEncoderRegisters(INT0, INT1, &DDRD, DDD0, DDD1, &PORTD, PORTD0, PORTD1, &EncoderTicks_0);
		break;
	case PWM_1:
		setPWMRegisters(&DDRE, DDE5, &DDRC, DDC5, DDC7, &PORTC, PORTC4, PORTC6, &ICR3, &TCCR3A, &TCCR3B, &OCR3C, COMNC1);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	8f 93       	push	r24
     4b8:	1f 92       	push	r1
     4ba:	8c e9       	ldi	r24, 0x9C	; 156
     4bc:	8f 93       	push	r24
     4be:	1f 92       	push	r1
     4c0:	81 e9       	ldi	r24, 0x91	; 145
     4c2:	8f 93       	push	r24
     4c4:	1f 92       	push	r1
     4c6:	80 e9       	ldi	r24, 0x90	; 144
     4c8:	8f 93       	push	r24
     4ca:	1f 92       	push	r1
     4cc:	86 e9       	ldi	r24, 0x96	; 150
     4ce:	8f 93       	push	r24
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	88 2e       	mov	r8, r24
     4d4:	94 e0       	ldi	r25, 0x04	; 4
     4d6:	a9 2e       	mov	r10, r25
     4d8:	28 e2       	ldi	r18, 0x28	; 40
     4da:	c2 2e       	mov	r12, r18
     4dc:	d1 2c       	mov	r13, r1
     4de:	37 e0       	ldi	r19, 0x07	; 7
     4e0:	e3 2e       	mov	r14, r19
     4e2:	05 e0       	ldi	r16, 0x05	; 5
     4e4:	27 e2       	ldi	r18, 0x27	; 39
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	45 e0       	ldi	r20, 0x05	; 5
     4ea:	6d e2       	ldi	r22, 0x2D	; 45
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	ce 01       	movw	r24, r28
     4f0:	f8 de       	rcall	.-528    	; 0x2e2 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		//setEncoderRegisters(INT2, INT3);
		break;
     4f2:	8d b7       	in	r24, 0x3d	; 61
     4f4:	9e b7       	in	r25, 0x3e	; 62
     4f6:	09 96       	adiw	r24, 0x09	; 9
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	9e bf       	out	0x3e, r25	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	8d bf       	out	0x3d, r24	; 61
	}

	//this->OCRnX = 0;
}
     502:	3a c0       	rjmp	.+116    	; 0x578 <_ZN15DC_Motor_DriverC1Eh+0xe0>
DC_Motor_Driver::DC_Motor_Driver(pwm_num pwmN)
{
	switch (pwmN)
	{
	case PWM_0:
		setPWMRegisters(&DDRE, DDE4, &DDRC, DDC5, DDC7, &PORTC, PORTC5, PORTC7, &ICR3, &TCCR3A, &TCCR3B, &OCR3B, COMNB1);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	8f 93       	push	r24
     508:	1f 92       	push	r1
     50a:	8a e9       	ldi	r24, 0x9A	; 154
     50c:	8f 93       	push	r24
     50e:	1f 92       	push	r1
     510:	81 e9       	ldi	r24, 0x91	; 145
     512:	8f 93       	push	r24
     514:	1f 92       	push	r1
     516:	80 e9       	ldi	r24, 0x90	; 144
     518:	8f 93       	push	r24
     51a:	1f 92       	push	r1
     51c:	86 e9       	ldi	r24, 0x96	; 150
     51e:	8f 93       	push	r24
     520:	47 e0       	ldi	r20, 0x07	; 7
     522:	84 2e       	mov	r8, r20
     524:	55 e0       	ldi	r21, 0x05	; 5
     526:	a5 2e       	mov	r10, r21
     528:	68 e2       	ldi	r22, 0x28	; 40
     52a:	c6 2e       	mov	r12, r22
     52c:	d1 2c       	mov	r13, r1
     52e:	77 e0       	ldi	r23, 0x07	; 7
     530:	e7 2e       	mov	r14, r23
     532:	05 e0       	ldi	r16, 0x05	; 5
     534:	27 e2       	ldi	r18, 0x27	; 39
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	44 e0       	ldi	r20, 0x04	; 4
     53a:	6d e2       	ldi	r22, 0x2D	; 45
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	ce 01       	movw	r24, r28
     540:	d0 de       	rcall	.-608    	; 0x2e2 <_ZN15DC_Motor_Driver15setPWMRegistersEPVhhS1_hhS1_hhPVjS1_S1_S3_h>
		setEncoderRegisters(INT0, INT1, &DDRD, DDD0, DDD1, &PORTD, PORTD0, PORTD1, &EncoderTicks_0);
     542:	8a ed       	ldi	r24, 0xDA	; 218
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	88 24       	eor	r8, r8
     54c:	83 94       	inc	r8
     54e:	a1 2c       	mov	r10, r1
     550:	eb e2       	ldi	r30, 0x2B	; 43
     552:	ce 2e       	mov	r12, r30
     554:	d1 2c       	mov	r13, r1
     556:	ee 24       	eor	r14, r14
     558:	e3 94       	inc	r14
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	2a e2       	ldi	r18, 0x2A	; 42
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	ce 01       	movw	r24, r28
     566:	43 df       	rcall	.-378    	; 0x3ee <_ZN15DC_Motor_Driver19setEncoderRegistersEhhPVhhhS1_hhPVl>
     568:	8d b7       	in	r24, 0x3d	; 61
     56a:	9e b7       	in	r25, 0x3e	; 62
     56c:	0b 96       	adiw	r24, 0x0b	; 11
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	9e bf       	out	0x3e, r25	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	8d bf       	out	0x3d, r24	; 61
		//setEncoderRegisters(INT2, INT3);
		break;
	}

	//this->OCRnX = 0;
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	0f 91       	pop	r16
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	af 90       	pop	r10
     586:	8f 90       	pop	r8
     588:	08 95       	ret

0000058a <_ZN15DC_Motor_Driver15getEncoderTicksEv>:
	//sei();
}

int32_t DC_Motor_Driver::getEncoderTicks()
{
	cli();
     58a:	f8 94       	cli
	int32_t currentTicks =  *this->Encoder.Enocder_Ticks;
     58c:	dc 01       	movw	r26, r24
     58e:	18 96       	adiw	r26, 0x08	; 8
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	19 97       	sbiw	r26, 0x09	; 9
     596:	60 81       	ld	r22, Z
     598:	71 81       	ldd	r23, Z+1	; 0x01
     59a:	82 81       	ldd	r24, Z+2	; 0x02
     59c:	93 81       	ldd	r25, Z+3	; 0x03
	sei();
     59e:	78 94       	sei
	return currentTicks;
}
     5a0:	08 95       	ret

000005a2 <_Z13ENCODER_A_ISRPVhhPVl>:

void ENCODER_A_ISR(volatile uint8_t* PORTx_Encoder, uint8_t PORTxN_EncoderPhase_B, volatile int32_t* EncoderTicksX)
{
     5a2:	fa 01       	movw	r30, r20
	if (!(*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     5a4:	dc 01       	movw	r26, r24
     5a6:	2c 91       	ld	r18, X
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	06 2e       	mov	r0, r22
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <_Z13ENCODER_A_ISRPVhhPVl+0x10>
     5ae:	35 95       	asr	r19
     5b0:	27 95       	ror	r18
     5b2:	0a 94       	dec	r0
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <_Z13ENCODER_A_ISRPVhhPVl+0xc>
     5b6:	20 fd       	sbrc	r18, 0
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <_Z13ENCODER_A_ISRPVhhPVl+0x28>
	{
		(*EncoderTicksX)--;
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	a2 81       	ldd	r26, Z+2	; 0x02
     5c0:	b3 81       	ldd	r27, Z+3	; 0x03
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	a1 09       	sbc	r26, r1
     5c6:	b1 09       	sbc	r27, r1
     5c8:	11 c0       	rjmp	.+34     	; 0x5ec <_Z13ENCODER_A_ISRPVhhPVl+0x4a>
	}
	else if ((*PORTx_Encoder & (1<<PORTxN_EncoderPhase_B)))
     5ca:	dc 01       	movw	r26, r24
     5cc:	8c 91       	ld	r24, X
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <_Z13ENCODER_A_ISRPVhhPVl+0x34>
     5d2:	95 95       	asr	r25
     5d4:	87 95       	ror	r24
     5d6:	6a 95       	dec	r22
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <_Z13ENCODER_A_ISRPVhhPVl+0x30>
     5da:	80 ff       	sbrs	r24, 0
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <_Z13ENCODER_A_ISRPVhhPVl+0x52>
	{
		(*EncoderTicksX)++;
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	a2 81       	ldd	r26, Z+2	; 0x02
     5e4:	b3 81       	ldd	r27, Z+3	; 0x03
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	a1 1d       	adc	r26, r1
     5ea:	b1 1d       	adc	r27, r1
     5ec:	80 83       	st	Z, r24
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	a2 83       	std	Z+2, r26	; 0x02
     5f2:	b3 83       	std	Z+3, r27	; 0x03
     5f4:	08 95       	ret

000005f6 <__vector_1>:
	}
}

ISR(INT0_vect)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	0b b6       	in	r0, 0x3b	; 59
     602:	0f 92       	push	r0
     604:	2f 93       	push	r18
     606:	3f 93       	push	r19
     608:	4f 93       	push	r20
     60a:	5f 93       	push	r21
     60c:	6f 93       	push	r22
     60e:	7f 93       	push	r23
     610:	8f 93       	push	r24
     612:	9f 93       	push	r25
     614:	af 93       	push	r26
     616:	bf 93       	push	r27
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
	ENCODER_A_ISR(&PIND, PIND1, &EncoderTicks_0);
     61c:	4a ed       	ldi	r20, 0xDA	; 218
     61e:	52 e0       	ldi	r21, 0x02	; 2
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	89 e2       	ldi	r24, 0x29	; 41
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	bd df       	rcall	.-134    	; 0x5a2 <_Z13ENCODER_A_ISRPVhhPVl>
}
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0b be       	out	0x3b, r0	; 59
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <_ZNK8std_msgs4Time9serializeEPh>:
	return timers[timerId].elapsed;
}

void clearTimerElapsed(uint8_t timerId)
{
	timers[timerId].elapsed	= 0;
     64e:	dc 01       	movw	r26, r24
     650:	fb 01       	movw	r30, r22
     652:	12 96       	adiw	r26, 0x02	; 2
     654:	8c 91       	ld	r24, X
     656:	12 97       	sbiw	r26, 0x02	; 2
     658:	80 83       	st	Z, r24
     65a:	13 96       	adiw	r26, 0x03	; 3
     65c:	8c 91       	ld	r24, X
     65e:	13 97       	sbiw	r26, 0x03	; 3
     660:	81 83       	std	Z+1, r24	; 0x01
     662:	14 96       	adiw	r26, 0x04	; 4
     664:	8c 91       	ld	r24, X
     666:	14 97       	sbiw	r26, 0x04	; 4
     668:	82 83       	std	Z+2, r24	; 0x02
     66a:	15 96       	adiw	r26, 0x05	; 5
     66c:	8c 91       	ld	r24, X
     66e:	15 97       	sbiw	r26, 0x05	; 5
     670:	83 83       	std	Z+3, r24	; 0x03
     672:	16 96       	adiw	r26, 0x06	; 6
     674:	8c 91       	ld	r24, X
     676:	16 97       	sbiw	r26, 0x06	; 6
     678:	84 83       	std	Z+4, r24	; 0x04
     67a:	17 96       	adiw	r26, 0x07	; 7
     67c:	8c 91       	ld	r24, X
     67e:	17 97       	sbiw	r26, 0x07	; 7
     680:	85 83       	std	Z+5, r24	; 0x05
     682:	18 96       	adiw	r26, 0x08	; 8
     684:	8c 91       	ld	r24, X
     686:	18 97       	sbiw	r26, 0x08	; 8
     688:	86 83       	std	Z+6, r24	; 0x06
     68a:	19 96       	adiw	r26, 0x09	; 9
     68c:	8c 91       	ld	r24, X
     68e:	87 83       	std	Z+7, r24	; 0x07
     690:	88 e0       	ldi	r24, 0x08	; 8
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	08 95       	ret

00000696 <_ZN8std_msgs4Time11deserializeEPh>:
     696:	fc 01       	movw	r30, r24
     698:	db 01       	movw	r26, r22
     69a:	4c 91       	ld	r20, X
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	42 83       	std	Z+2, r20	; 0x02
     6a4:	53 83       	std	Z+3, r21	; 0x03
     6a6:	64 83       	std	Z+4, r22	; 0x04
     6a8:	75 83       	std	Z+5, r23	; 0x05
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	8c 91       	ld	r24, X
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	58 2b       	or	r21, r24
     6b2:	42 83       	std	Z+2, r20	; 0x02
     6b4:	53 83       	std	Z+3, r21	; 0x03
     6b6:	64 83       	std	Z+4, r22	; 0x04
     6b8:	75 83       	std	Z+5, r23	; 0x05
     6ba:	12 96       	adiw	r26, 0x02	; 2
     6bc:	8c 91       	ld	r24, X
     6be:	12 97       	sbiw	r26, 0x02	; 2
     6c0:	68 2b       	or	r22, r24
     6c2:	42 83       	std	Z+2, r20	; 0x02
     6c4:	53 83       	std	Z+3, r21	; 0x03
     6c6:	64 83       	std	Z+4, r22	; 0x04
     6c8:	75 83       	std	Z+5, r23	; 0x05
     6ca:	13 96       	adiw	r26, 0x03	; 3
     6cc:	8c 91       	ld	r24, X
     6ce:	13 97       	sbiw	r26, 0x03	; 3
     6d0:	78 2b       	or	r23, r24
     6d2:	42 83       	std	Z+2, r20	; 0x02
     6d4:	53 83       	std	Z+3, r21	; 0x03
     6d6:	64 83       	std	Z+4, r22	; 0x04
     6d8:	75 83       	std	Z+5, r23	; 0x05
     6da:	14 96       	adiw	r26, 0x04	; 4
     6dc:	4c 91       	ld	r20, X
     6de:	14 97       	sbiw	r26, 0x04	; 4
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	46 83       	std	Z+6, r20	; 0x06
     6e8:	57 83       	std	Z+7, r21	; 0x07
     6ea:	60 87       	std	Z+8, r22	; 0x08
     6ec:	71 87       	std	Z+9, r23	; 0x09
     6ee:	15 96       	adiw	r26, 0x05	; 5
     6f0:	8c 91       	ld	r24, X
     6f2:	15 97       	sbiw	r26, 0x05	; 5
     6f4:	58 2b       	or	r21, r24
     6f6:	46 83       	std	Z+6, r20	; 0x06
     6f8:	57 83       	std	Z+7, r21	; 0x07
     6fa:	60 87       	std	Z+8, r22	; 0x08
     6fc:	71 87       	std	Z+9, r23	; 0x09
     6fe:	16 96       	adiw	r26, 0x06	; 6
     700:	8c 91       	ld	r24, X
     702:	16 97       	sbiw	r26, 0x06	; 6
     704:	68 2b       	or	r22, r24
     706:	46 83       	std	Z+6, r20	; 0x06
     708:	57 83       	std	Z+7, r21	; 0x07
     70a:	60 87       	std	Z+8, r22	; 0x08
     70c:	71 87       	std	Z+9, r23	; 0x09
     70e:	17 96       	adiw	r26, 0x07	; 7
     710:	8c 91       	ld	r24, X
     712:	78 2b       	or	r23, r24
     714:	46 83       	std	Z+6, r20	; 0x06
     716:	57 83       	std	Z+7, r21	; 0x07
     718:	60 87       	std	Z+8, r22	; 0x08
     71a:	71 87       	std	Z+9, r23	; 0x09
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	08 95       	ret

00000722 <_ZN8std_msgs4Time7getTypeEv>:
     722:	80 ee       	ldi	r24, 0xE0	; 224
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	08 95       	ret

00000728 <_ZN8std_msgs4Time6getMD5Ev>:
     728:	8f eb       	ldi	r24, 0xBF	; 191
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	08 95       	ret

0000072e <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
     72e:	86 ea       	ldi	r24, 0xA6	; 166
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	08 95       	ret

00000734 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
     734:	85 e8       	ldi	r24, 0x85	; 133
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	08 95       	ret

0000073a <_ZN14rosserial_msgs3Log7getTypeEv>:
     73a:	82 e7       	ldi	r24, 0x72	; 114
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	08 95       	ret

00000740 <_ZN14rosserial_msgs3Log6getMD5Ev>:
     740:	81 e5       	ldi	r24, 0x51	; 81
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	08 95       	ret

00000746 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
     746:	85 e3       	ldi	r24, 0x35	; 53
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	08 95       	ret

0000074c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
     74c:	84 e1       	ldi	r24, 0x14	; 20
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	08 95       	ret

00000752 <_ZNK8std_msgs5Int329serializeEPh>:
     752:	dc 01       	movw	r26, r24
     754:	fb 01       	movw	r30, r22
     756:	12 96       	adiw	r26, 0x02	; 2
     758:	4c 91       	ld	r20, X
     75a:	12 97       	sbiw	r26, 0x02	; 2
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	2c 91       	ld	r18, X
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	14 96       	adiw	r26, 0x04	; 4
     764:	9c 91       	ld	r25, X
     766:	14 97       	sbiw	r26, 0x04	; 4
     768:	15 96       	adiw	r26, 0x05	; 5
     76a:	8c 91       	ld	r24, X
     76c:	40 83       	st	Z, r20
     76e:	21 83       	std	Z+1, r18	; 0x01
     770:	92 83       	std	Z+2, r25	; 0x02
     772:	83 83       	std	Z+3, r24	; 0x03
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 95       	ret

0000077a <_ZN8std_msgs5Int3211deserializeEPh>:
     77a:	fb 01       	movw	r30, r22
     77c:	40 81       	ld	r20, Z
     77e:	51 81       	ldd	r21, Z+1	; 0x01
     780:	62 81       	ldd	r22, Z+2	; 0x02
     782:	73 81       	ldd	r23, Z+3	; 0x03
     784:	fc 01       	movw	r30, r24
     786:	42 83       	std	Z+2, r20	; 0x02
     788:	53 83       	std	Z+3, r21	; 0x03
     78a:	64 83       	std	Z+4, r22	; 0x04
     78c:	75 83       	std	Z+5, r23	; 0x05
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	08 95       	ret

00000794 <_ZN8std_msgs5Int327getTypeEv>:
     794:	85 e0       	ldi	r24, 0x05	; 5
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	08 95       	ret

0000079a <_ZN8std_msgs5Int326getMD5Ev>:
     79a:	84 ee       	ldi	r24, 0xE4	; 228
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	08 95       	ret

000007a0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE9connectedEv>:
     7a0:	8e 57       	subi	r24, 0x7E	; 126
     7a2:	9b 4f       	sbci	r25, 0xFB	; 251
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	08 95       	ret

000007aa <_ZN3ros19FlashReadOutBuffer_D1Ev>:
     7aa:	29 ea       	ldi	r18, 0xA9	; 169
     7ac:	32 e0       	ldi	r19, 0x02	; 2
     7ae:	fc 01       	movw	r30, r24
     7b0:	31 83       	std	Z+1, r19	; 0x01
     7b2:	20 83       	st	Z, r18
     7b4:	83 81       	ldd	r24, Z+3	; 0x03
     7b6:	94 81       	ldd	r25, Z+4	; 0x04
     7b8:	0c 94 8f 12 	jmp	0x251e	; 0x251e <_ZdlPv>

000007bc <_ZN3ros19FlashReadOutBuffer_D0Ev>:
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
     7c2:	f3 df       	rcall	.-26     	; 0x7aa <_ZN3ros19FlashReadOutBuffer_D1Ev>
     7c4:	ce 01       	movw	r24, r28
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	0c 94 8f 12 	jmp	0x251e	; 0x251e <_ZdlPv>

000007ce <_Z8setEventjPVj>:
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	2f b7       	in	r18, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	49 81       	ldd	r20, Y+1	; 0x01
     7e4:	5a 81       	ldd	r21, Y+2	; 0x02
     7e6:	fb 01       	movw	r30, r22
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	84 2b       	or	r24, r20
     7ee:	95 2b       	or	r25, r21
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	80 83       	st	Z, r24
     7f4:	2f bf       	out	0x3f, r18	; 63
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <_Z12initMilliISRv>:
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     806:	e1 eb       	ldi	r30, 0xB1	; 177
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	88 7f       	andi	r24, 0xF8	; 248
     80e:	80 83       	st	Z, r24
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	80 83       	st	Z, r24
     816:	e0 e7       	ldi	r30, 0x70	; 112
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	81 60       	ori	r24, 0x01	; 1
     81e:	80 83       	st	Z, r24
     820:	78 94       	sei
     822:	08 95       	ret

00000824 <__vector_15>:
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	0b b6       	in	r0, 0x3b	; 59
     830:	0f 92       	push	r0
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
     860:	ca ee       	ldi	r28, 0xEA	; 234
     862:	d2 e0       	ldi	r29, 0x02	; 2
     864:	0e ed       	ldi	r16, 0xDE	; 222
     866:	12 e0       	ldi	r17, 0x02	; 2
     868:	e1 2c       	mov	r14, r1
     86a:	f1 2c       	mov	r15, r1
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	d8 2e       	mov	r13, r24
     870:	cc 24       	eor	r12, r12
     872:	c3 94       	inc	r12
     874:	88 81       	ld	r24, Y
     876:	8f 3f       	cpi	r24, 0xFF	; 255
     878:	09 f4       	brne	.+2      	; 0x87c <__vector_15+0x58>
     87a:	43 c0       	rjmp	.+134    	; 0x902 <__vector_15+0xde>
     87c:	f8 01       	movw	r30, r16
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
     888:	2b 81       	ldd	r18, Y+3	; 0x03
     88a:	3c 81       	ldd	r19, Y+4	; 0x04
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	89 f5       	brne	.+98     	; 0x8f4 <__vector_15+0xd0>
     892:	11 82       	std	Z+1, r1	; 0x01
     894:	10 82       	st	Z, r1
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	88 23       	and	r24, r24
     89a:	61 f1       	breq	.+88     	; 0x8f4 <__vector_15+0xd0>
     89c:	8e 81       	ldd	r24, Y+6	; 0x06
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	e9 f0       	breq	.+58     	; 0x8dc <__vector_15+0xb8>
     8a2:	d0 f0       	brcs	.+52     	; 0x8d8 <__vector_15+0xb4>
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	91 f0       	breq	.+36     	; 0x8cc <__vector_15+0xa8>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	21 f5       	brne	.+72     	; 0x8f4 <__vector_15+0xd0>
     8ac:	de 9c       	mul	r13, r14
     8ae:	f0 01       	movw	r30, r0
     8b0:	df 9c       	mul	r13, r15
     8b2:	f0 0d       	add	r31, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	e6 51       	subi	r30, 0x16	; 22
     8b8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ba:	81 85       	ldd	r24, Z+9	; 0x09
     8bc:	92 85       	ldd	r25, Z+10	; 0x0a
     8be:	6b 85       	ldd	r22, Y+11	; 0x0b
     8c0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8c2:	85 df       	rcall	.-246    	; 0x7ce <_Z8setEventjPVj>
     8c4:	ef 81       	ldd	r30, Y+7	; 0x07
     8c6:	f8 85       	ldd	r31, Y+8	; 0x08
     8c8:	19 95       	eicall
     8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <__vector_15+0xd0>
     8cc:	f8 94       	cli
     8ce:	ef 81       	ldd	r30, Y+7	; 0x07
     8d0:	f8 85       	ldd	r31, Y+8	; 0x08
     8d2:	19 95       	eicall
     8d4:	78 94       	sei
     8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <__vector_15+0xd0>
     8d8:	ca 82       	std	Y+2, r12	; 0x02
     8da:	0c c0       	rjmp	.+24     	; 0x8f4 <__vector_15+0xd0>
     8dc:	de 9c       	mul	r13, r14
     8de:	f0 01       	movw	r30, r0
     8e0:	df 9c       	mul	r13, r15
     8e2:	f0 0d       	add	r31, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	e6 51       	subi	r30, 0x16	; 22
     8e8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ea:	81 85       	ldd	r24, Z+9	; 0x09
     8ec:	92 85       	ldd	r25, Z+10	; 0x0a
     8ee:	6b 85       	ldd	r22, Y+11	; 0x0b
     8f0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8f2:	6d df       	rcall	.-294    	; 0x7ce <_Z8setEventjPVj>
     8f4:	ff ef       	ldi	r31, 0xFF	; 255
     8f6:	ef 1a       	sub	r14, r31
     8f8:	ff 0a       	sbc	r15, r31
     8fa:	2d 96       	adiw	r28, 0x0d	; 13
     8fc:	0e 5f       	subi	r16, 0xFE	; 254
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	b9 cf       	rjmp	.-142    	; 0x874 <__vector_15+0x50>
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	0f 90       	pop	r0
     92c:	0b be       	out	0x3b, r0	; 59
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <_Z12declareTimerjh9timerModePFvvEjPVj>:
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	1f 92       	push	r1
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	dc 01       	movw	r26, r24
     94e:	1a 83       	std	Y+2, r17	; 0x02
     950:	09 83       	std	Y+1, r16	; 0x01
     952:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <timerStructInitialized>
     956:	81 11       	cpse	r24, r1
     958:	0d c0       	rjmp	.+26     	; 0x974 <_Z12declareTimerjh9timerModePFvvEjPVj+0x3c>
     95a:	ea ee       	ldi	r30, 0xEA	; 234
     95c:	f2 e0       	ldi	r31, 0x02	; 2
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	80 83       	st	Z, r24
     962:	11 82       	std	Z+1, r1	; 0x01
     964:	3d 96       	adiw	r30, 0x0d	; 13
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	eb 32       	cpi	r30, 0x2B	; 43
     96a:	f9 07       	cpc	r31, r25
     96c:	c9 f7       	brne	.-14     	; 0x960 <_Z12declareTimerjh9timerModePFvvEjPVj+0x28>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <timerStructInitialized>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	9d e0       	ldi	r25, 0x0D	; 13
     978:	98 9f       	mul	r25, r24
     97a:	f0 01       	movw	r30, r0
     97c:	11 24       	eor	r1, r1
     97e:	e6 51       	subi	r30, 0x16	; 22
     980:	fd 4f       	sbci	r31, 0xFD	; 253
     982:	50 81       	ld	r21, Z
     984:	5f 3f       	cpi	r21, 0xFF	; 255
     986:	11 f0       	breq	.+4      	; 0x98c <_Z12declareTimerjh9timerModePFvvEjPVj+0x54>
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	f6 cf       	rjmp	.-20     	; 0x978 <_Z12declareTimerjh9timerModePFvvEjPVj+0x40>
     98c:	80 83       	st	Z, r24
     98e:	12 82       	std	Z+2, r1	; 0x02
     990:	30 87       	std	Z+8, r19	; 0x08
     992:	27 83       	std	Z+7, r18	; 0x07
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	3a 81       	ldd	r19, Y+2	; 0x02
     998:	32 87       	std	Z+10, r19	; 0x0a
     99a:	21 87       	std	Z+9, r18	; 0x09
     99c:	f4 86       	std	Z+12, r15	; 0x0c
     99e:	e3 86       	std	Z+11, r14	; 0x0b
     9a0:	46 83       	std	Z+6, r20	; 0x06
     9a2:	b4 83       	std	Z+4, r27	; 0x04
     9a4:	a3 83       	std	Z+3, r26	; 0x03
     9a6:	65 83       	std	Z+5, r22	; 0x05
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	08 95       	ret

000009ba <_Z10startTimerh>:
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
     9be:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <timerInitialized>
     9c2:	81 11       	cpse	r24, r1
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <_Z10startTimerh+0x14>
     9c6:	1c df       	rcall	.-456    	; 0x800 <_Z12initMilliISRv>
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <timerInitialized>
     9ce:	8d e0       	ldi	r24, 0x0D	; 13
     9d0:	c8 9f       	mul	r28, r24
     9d2:	f0 01       	movw	r30, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	e6 51       	subi	r30, 0x16	; 22
     9d8:	fd 4f       	sbci	r31, 0xFD	; 253
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	81 83       	std	Z+1, r24	; 0x01
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>:
  {
  private:
    char* buffer_;
    int buffer_index_;
    
    const char* readFromFlash( const __FlashStringHelper * what )
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	dc 01       	movw	r26, r24
    {
      PGM_P lp_p = (PGM_P) what ;
      
      int offset = buffer_index_;
     9e8:	15 96       	adiw	r26, 0x05	; 5
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	16 97       	sbiw	r26, 0x06	; 6
     9f0:	fb 01       	movw	r30, r22
      
      while ( buffer_index_ < FLASH_CONVERTER_BUFFER - 1 ) 
     9f2:	15 96       	adiw	r26, 0x05	; 5
     9f4:	2d 91       	ld	r18, X+
     9f6:	3c 91       	ld	r19, X
     9f8:	16 97       	sbiw	r26, 0x06	; 6
     9fa:	25 39       	cpi	r18, 0x95	; 149
     9fc:	31 05       	cpc	r19, r1
     9fe:	ec f4       	brge	.+58     	; 0xa3a <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x58>
      {
	buffer_[ buffer_index_ ] = pgm_read_byte( lp_p++ );
     a00:	44 91       	lpm	r20, Z
     a02:	13 96       	adiw	r26, 0x03	; 3
     a04:	6d 91       	ld	r22, X+
     a06:	7c 91       	ld	r23, X
     a08:	14 97       	sbiw	r26, 0x04	; 4
     a0a:	eb 01       	movw	r28, r22
     a0c:	c2 0f       	add	r28, r18
     a0e:	d3 1f       	adc	r29, r19
     a10:	48 83       	st	Y, r20
		
	if ( buffer_[ buffer_index_ ] == 0)
     a12:	15 96       	adiw	r26, 0x05	; 5
     a14:	2d 91       	ld	r18, X+
     a16:	3c 91       	ld	r19, X
     a18:	16 97       	sbiw	r26, 0x06	; 6
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	cd 91       	ld	r28, X+
     a20:	dc 91       	ld	r29, X
     a22:	14 97       	sbiw	r26, 0x04	; 4
     a24:	c2 0f       	add	r28, r18
     a26:	d3 1f       	adc	r29, r19
     a28:	48 81       	ld	r20, Y
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
	{
	  buffer_index_++;
     a2e:	16 96       	adiw	r26, 0x06	; 6
     a30:	3c 93       	st	X, r19
     a32:	2e 93       	st	-X, r18
     a34:	15 97       	sbiw	r26, 0x05	; 5
      
      while ( buffer_index_ < FLASH_CONVERTER_BUFFER - 1 ) 
      {
	buffer_[ buffer_index_ ] = pgm_read_byte( lp_p++ );
		
	if ( buffer_[ buffer_index_ ] == 0)
     a36:	41 11       	cpse	r20, r1
     a38:	dc cf       	rjmp	.-72     	; 0x9f2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x10>
	}
	
	buffer_index_++;
      }
      
      if ( buffer_index_ >= FLASH_CONVERTER_BUFFER - 1 )
     a3a:	15 96       	adiw	r26, 0x05	; 5
     a3c:	2d 91       	ld	r18, X+
     a3e:	3c 91       	ld	r19, X
     a40:	16 97       	sbiw	r26, 0x06	; 6
     a42:	25 39       	cpi	r18, 0x95	; 149
     a44:	31 05       	cpc	r19, r1
     a46:	24 f0       	brlt	.+8      	; 0xa50 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper+0x6e>
      {
	read_out_error_ = DefaultReadOutBuffer_::BufferOverflow;
     a48:	22 e0       	ldi	r18, 0x02	; 2
     a4a:	17 96       	adiw	r26, 0x07	; 7
     a4c:	2c 93       	st	X, r18
     a4e:	17 97       	sbiw	r26, 0x07	; 7
      }
      
      return buffer_ + offset ;
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	2d 91       	ld	r18, X+
     a54:	3c 91       	ld	r19, X
     a56:	14 97       	sbiw	r26, 0x04	; 4
    }
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>:
    ReadoutError read_out_error_;
    
    // overrider of method from DefaultReadOutBuffer_
    virtual const char * readTopic( const char * topic, bool from_flash )
    {
      if ( from_flash )
     a62:	41 11       	cpse	r20, r1
      {
	return readFromFlash( reinterpret_cast<const __FlashStringHelper *>( topic ) );
     a64:	be cf       	rjmp	.-132    	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
      }
      else
      {
	return topic;
      }
    }
     a66:	cb 01       	movw	r24, r22
     a68:	08 95       	ret

00000a6a <_ZN3ros19FlashReadOutBuffer_11readMsgInfoEPKc>:
    }
    
    // for md5sum / msg type
    virtual const char *  readMsgInfo( const char * msg_info )
    {
      return readFromFlash( reinterpret_cast<const __FlashStringHelper*>( msg_info ) );
     a6a:	bb cf       	rjmp	.-138    	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>

00000a6c <_ZN3ros19FlashReadOutBuffer_C1Ev>:
	return topic;
      }
    }
        
  public:
    FlashReadOutBuffer_() 
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	ec 01       	movw	r28, r24
      }
    }
        
  public:
    DefaultReadOutBuffer_() :
      read_out_error_( NoError )
     a72:	1a 82       	std	Y+2, r1	; 0x02
    {
     a74:	89 ea       	ldi	r24, 0xA9	; 169
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	99 83       	std	Y+1, r25	; 0x01
     a7a:	88 83       	st	Y, r24
      buffer_index_ = 0;
     a7c:	1e 82       	std	Y+6, r1	; 0x06
     a7e:	1d 82       	std	Y+5, r1	; 0x05
      
      buffer_ = new char[ FLASH_CONVERTER_BUFFER ];
     a80:	86 e9       	ldi	r24, 0x96	; 150
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 8e 12 	call	0x251c	; 0x251c <_Znaj>
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
      
      buffer_[0] = 0;  //zero termination at beginning
     a8c:	fc 01       	movw	r30, r24
     a8e:	10 82       	st	Z, r1
      buffer_[ FLASH_CONVERTER_BUFFER - 1 ] = 0; // assure zero termination
     a90:	eb 56       	subi	r30, 0x6B	; 107
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	10 82       	st	Z, r1
    }
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
     a9c:	cf 92       	push	r12
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
  {
    for(size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
     aa8:	6a 01       	movw	r12, r20
     aaa:	7b 01       	movw	r14, r22
     aac:	02 2e       	mov	r0, r18
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x1c>
     ab0:	f6 94       	lsr	r15
     ab2:	e7 94       	ror	r14
     ab4:	d7 94       	ror	r13
     ab6:	c7 94       	ror	r12
     ab8:	0a 94       	dec	r0
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x14>
     abc:	fc 01       	movw	r30, r24
     abe:	c1 92       	st	Z+, r12
     ac0:	cf 01       	movw	r24, r30
     ac2:	28 5f       	subi	r18, 0xF8	; 248
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for(size_t i = 0; i < sizeof(V); i++)
     ac6:	20 32       	cpi	r18, 0x20	; 32
     ac8:	31 05       	cpc	r19, r1
     aca:	71 f7       	brne	.-36     	; 0xaa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xc>
      arr[i] = (var >> (8 * i));
  }
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
     af4:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	fb 01       	movw	r30, r22
     afa:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
     b00:	8c 81       	ldd	r24, Y+4	; 0x04
     b02:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
     b04:	8d 81       	ldd	r24, Y+5	; 0x05
     b06:	83 83       	std	Z+3, r24	; 0x03
     b08:	db 01       	movw	r26, r22
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	ba 01       	movw	r22, r20
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
     b10:	e4 e0       	ldi	r30, 0x04	; 4
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	14 96       	adiw	r26, 0x04	; 4
      for( uint32_t i = 0; i < ints_length; i++){
     b16:	ca 80       	ldd	r12, Y+2	; 0x02
     b18:	db 80       	ldd	r13, Y+3	; 0x03
     b1a:	ec 80       	ldd	r14, Y+4	; 0x04
     b1c:	fd 80       	ldd	r15, Y+5	; 0x05
     b1e:	cf 01       	movw	r24, r30
     b20:	04 96       	adiw	r24, 0x04	; 4
     b22:	4c 15       	cp	r20, r12
     b24:	5d 05       	cpc	r21, r13
     b26:	6e 05       	cpc	r22, r14
     b28:	7f 05       	cpc	r23, r15
     b2a:	c8 f4       	brcc	.+50     	; 0xb5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
     b2c:	2a 85       	ldd	r18, Y+10	; 0x0a
     b2e:	3b 85       	ldd	r19, Y+11	; 0x0b
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
     b34:	34 97       	sbiw	r30, 0x04	; 4
     b36:	d0 80       	ld	r13, Z
     b38:	f1 80       	ldd	r15, Z+1	; 0x01
     b3a:	32 81       	ldd	r19, Z+2	; 0x02
     b3c:	23 81       	ldd	r18, Z+3	; 0x03
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
     b3e:	dc 92       	st	X, r13
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
     b40:	11 96       	adiw	r26, 0x01	; 1
     b42:	fc 92       	st	X, r15
     b44:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	3c 93       	st	X, r19
     b4a:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
     b4c:	13 96       	adiw	r26, 0x03	; 3
     b4e:	2c 93       	st	X, r18
     b50:	13 97       	sbiw	r26, 0x03	; 3
     b52:	fc 01       	movw	r30, r24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     b54:	4f 5f       	subi	r20, 0xFF	; 255
     b56:	5f 4f       	sbci	r21, 0xFF	; 255
     b58:	6f 4f       	sbci	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	db cf       	rjmp	.-74     	; 0xb14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x3e>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
     b5e:	5f 01       	movw	r10, r30
     b60:	a0 0e       	add	r10, r16
     b62:	b1 1e       	adc	r11, r17
     b64:	2c 85       	ldd	r18, Y+12	; 0x0c
     b66:	f5 01       	movw	r30, r10
     b68:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
     b6a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b6c:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
     b6e:	2e 85       	ldd	r18, Y+14	; 0x0e
     b70:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
     b72:	2f 85       	ldd	r18, Y+15	; 0x0f
     b74:	23 83       	std	Z+3, r18	; 0x03
     b76:	d5 01       	movw	r26, r10
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	ba 01       	movw	r22, r20
     b7e:	cc 84       	ldd	r12, Y+12	; 0x0c
     b80:	dd 84       	ldd	r13, Y+13	; 0x0d
     b82:	ee 84       	ldd	r14, Y+14	; 0x0e
     b84:	ff 84       	ldd	r15, Y+15	; 0x0f
     b86:	9c 01       	movw	r18, r24
     b88:	2c 5f       	subi	r18, 0xFC	; 252
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	4c 15       	cp	r20, r12
     b8e:	5d 05       	cpc	r21, r13
     b90:	6e 05       	cpc	r22, r14
     b92:	7f 05       	cpc	r23, r15
     b94:	f8 f4       	brcc	.+62     	; 0xbd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xfe>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
     b96:	cd 01       	movw	r24, r26
     b98:	8a 19       	sub	r24, r10
     b9a:	9b 09       	sbc	r25, r11
     b9c:	ec 88       	ldd	r14, Y+20	; 0x14
     b9e:	fd 88       	ldd	r15, Y+21	; 0x15
     ba0:	8e 0d       	add	r24, r14
     ba2:	9f 1d       	adc	r25, r15
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
     ba4:	fc 01       	movw	r30, r24
     ba6:	d0 80       	ld	r13, Z
     ba8:	e1 80       	ldd	r14, Z+1	; 0x01
     baa:	f2 80       	ldd	r15, Z+2	; 0x02
     bac:	83 81       	ldd	r24, Z+3	; 0x03
     bae:	14 96       	adiw	r26, 0x04	; 4
     bb0:	dc 92       	st	X, r13
     bb2:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
     bb4:	15 96       	adiw	r26, 0x05	; 5
     bb6:	ec 92       	st	X, r14
     bb8:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
     bba:	16 96       	adiw	r26, 0x06	; 6
     bbc:	fc 92       	st	X, r15
     bbe:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
     bc0:	17 96       	adiw	r26, 0x07	; 7
     bc2:	8c 93       	st	X, r24
     bc4:	17 97       	sbiw	r26, 0x07	; 7
     bc6:	c9 01       	movw	r24, r18
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     bc8:	4f 5f       	subi	r20, 0xFF	; 255
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	6f 4f       	sbci	r22, 0xFF	; 255
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	d5 cf       	rjmp	.-86     	; 0xb7e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
     bd4:	f8 01       	movw	r30, r16
     bd6:	e8 0f       	add	r30, r24
     bd8:	f9 1f       	adc	r31, r25
     bda:	8e 89       	ldd	r24, Y+22	; 0x16
     bdc:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
     bde:	8f 89       	ldd	r24, Y+23	; 0x17
     be0:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
     be2:	88 8d       	ldd	r24, Y+24	; 0x18
     be4:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
     be6:	89 8d       	ldd	r24, Y+25	; 0x19
     be8:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->strings_length);
     bea:	79 01       	movw	r14, r18
     bec:	a1 2c       	mov	r10, r1
     bee:	b1 2c       	mov	r11, r1
      for( uint32_t i = 0; i < strings_length; i++){
     bf0:	41 2c       	mov	r4, r1
     bf2:	51 2c       	mov	r5, r1
     bf4:	32 01       	movw	r6, r4
     bf6:	8e 89       	ldd	r24, Y+22	; 0x16
     bf8:	9f 89       	ldd	r25, Y+23	; 0x17
     bfa:	a8 8d       	ldd	r26, Y+24	; 0x18
     bfc:	b9 8d       	ldd	r27, Y+25	; 0x19
     bfe:	48 16       	cp	r4, r24
     c00:	59 06       	cpc	r5, r25
     c02:	6a 06       	cpc	r6, r26
     c04:	7b 06       	cpc	r7, r27
     c06:	78 f5       	brcc	.+94     	; 0xc66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x190>
      uint32_t length_stringsi = strlen(this->strings[i]);
     c08:	ec 8d       	ldd	r30, Y+28	; 0x1c
     c0a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     c0c:	ea 0d       	add	r30, r10
     c0e:	fb 1d       	adc	r31, r11
     c10:	a0 81       	ld	r26, Z
     c12:	b1 81       	ldd	r27, Z+1	; 0x01
     c14:	fd 01       	movw	r30, r26
     c16:	01 90       	ld	r0, Z+
     c18:	00 20       	and	r0, r0
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x140>
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	6f 01       	movw	r12, r30
     c20:	ca 1a       	sub	r12, r26
     c22:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_stringsi);
     c24:	a6 01       	movw	r20, r12
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	c8 01       	movw	r24, r16
     c2c:	8e 0d       	add	r24, r14
     c2e:	9f 1d       	adc	r25, r15
     c30:	35 df       	rcall	.-406    	; 0xa9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
     c32:	f4 e0       	ldi	r31, 0x04	; 4
     c34:	ef 0e       	add	r14, r31
     c36:	f1 1c       	adc	r15, r1
     c38:	ec 8d       	ldd	r30, Y+28	; 0x1c
     c3a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     c3c:	ea 0d       	add	r30, r10
     c3e:	fb 1d       	adc	r31, r11
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	a6 01       	movw	r20, r12
     c46:	c8 01       	movw	r24, r16
     c48:	8e 0d       	add	r24, r14
     c4a:	9f 1d       	adc	r25, r15
     c4c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <memcpy>
      offset += length_stringsi;
     c50:	ec 0c       	add	r14, r12
     c52:	fd 1c       	adc	r15, r13
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->strings_length);
      for( uint32_t i = 0; i < strings_length; i++){
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	48 1a       	sub	r4, r24
     c58:	58 0a       	sbc	r5, r24
     c5a:	68 0a       	sbc	r6, r24
     c5c:	78 0a       	sbc	r7, r24
     c5e:	e2 e0       	ldi	r30, 0x02	; 2
     c60:	ae 0e       	add	r10, r30
     c62:	b1 1c       	adc	r11, r1
     c64:	c8 cf       	rjmp	.-112    	; 0xbf6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x120>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
     c66:	c7 01       	movw	r24, r14
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	7f 90       	pop	r7
     c7e:	6f 90       	pop	r6
     c80:	5f 90       	pop	r5
     c82:	4f 90       	pop	r4
     c84:	08 95       	ret

00000c86 <_ZNK14rosserial_msgs3Log9serializeEPh>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	8c 01       	movw	r16, r24
     c94:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
     c96:	dc 01       	movw	r26, r24
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	2c 91       	ld	r18, X
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	fb 01       	movw	r30, r22
     ca0:	21 93       	st	Z+, r18
     ca2:	cf 01       	movw	r24, r30
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	ed 91       	ld	r30, X+
     ca8:	fc 91       	ld	r31, X
     caa:	14 97       	sbiw	r26, 0x04	; 4
     cac:	ef 01       	movw	r28, r30
     cae:	09 90       	ld	r0, Y+
     cb0:	00 20       	and	r0, r0
     cb2:	e9 f7       	brne	.-6      	; 0xcae <_ZNK14rosserial_msgs3Log9serializeEPh+0x28>
     cb4:	21 97       	sbiw	r28, 0x01	; 1
     cb6:	ce 1b       	sub	r28, r30
     cb8:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_msg);
     cba:	ae 01       	movw	r20, r28
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	ed de       	rcall	.-550    	; 0xa9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
     cc2:	d8 01       	movw	r26, r16
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	6d 91       	ld	r22, X+
     cc8:	7c 91       	ld	r23, X
     cca:	14 97       	sbiw	r26, 0x04	; 4
     ccc:	ae 01       	movw	r20, r28
     cce:	c7 01       	movw	r24, r14
     cd0:	05 96       	adiw	r24, 0x05	; 5
     cd2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <memcpy>
      offset += length_msg;
      return offset;
    }
     cd6:	ce 01       	movw	r24, r28
     cd8:	05 96       	adiw	r24, 0x05	; 5
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	7c 01       	movw	r14, r24
     cfa:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
     cfc:	dc 01       	movw	r26, r24
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	8c 91       	ld	r24, X
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	fb 01       	movw	r30, r22
     d06:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
     d08:	13 96       	adiw	r26, 0x03	; 3
     d0a:	8c 91       	ld	r24, X
     d0c:	13 97       	sbiw	r26, 0x03	; 3
     d0e:	81 83       	std	Z+1, r24	; 0x01
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	ed 91       	ld	r30, X+
     d14:	fc 91       	ld	r31, X
     d16:	15 97       	sbiw	r26, 0x05	; 5
     d18:	ef 01       	movw	r28, r30
     d1a:	09 90       	ld	r0, Y+
     d1c:	00 20       	and	r0, r0
     d1e:	e9 f7       	brne	.-6      	; 0xd1a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x32>
     d20:	21 97       	sbiw	r28, 0x01	; 1
     d22:	ce 1b       	sub	r28, r30
     d24:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_topic_name);
     d26:	ae 01       	movw	r20, r28
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	c8 01       	movw	r24, r16
     d2e:	02 96       	adiw	r24, 0x02	; 2
     d30:	b5 de       	rcall	.-662    	; 0xa9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
     d32:	d7 01       	movw	r26, r14
     d34:	14 96       	adiw	r26, 0x04	; 4
     d36:	6d 91       	ld	r22, X+
     d38:	7c 91       	ld	r23, X
     d3a:	15 97       	sbiw	r26, 0x05	; 5
     d3c:	ae 01       	movw	r20, r28
     d3e:	c8 01       	movw	r24, r16
     d40:	06 96       	adiw	r24, 0x06	; 6
     d42:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <memcpy>
      offset += length_topic_name;
     d46:	ce 01       	movw	r24, r28
     d48:	06 96       	adiw	r24, 0x06	; 6
      uint32_t length_message_type = strlen(this->message_type);
     d4a:	f7 01       	movw	r30, r14
     d4c:	a6 81       	ldd	r26, Z+6	; 0x06
     d4e:	b7 81       	ldd	r27, Z+7	; 0x07
     d50:	fd 01       	movw	r30, r26
     d52:	01 90       	ld	r0, Z+
     d54:	00 20       	and	r0, r0
     d56:	e9 f7       	brne	.-6      	; 0xd52 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6a>
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	6f 01       	movw	r12, r30
     d5c:	ca 1a       	sub	r12, r26
     d5e:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_message_type);
     d60:	a6 01       	movw	r20, r12
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 0f       	add	r24, r16
     d68:	91 1f       	adc	r25, r17
     d6a:	98 de       	rcall	.-720    	; 0xa9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
     d6c:	2a 96       	adiw	r28, 0x0a	; 10
     d6e:	d7 01       	movw	r26, r14
     d70:	16 96       	adiw	r26, 0x06	; 6
     d72:	6d 91       	ld	r22, X+
     d74:	7c 91       	ld	r23, X
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	a6 01       	movw	r20, r12
     d7a:	c8 01       	movw	r24, r16
     d7c:	8c 0f       	add	r24, r28
     d7e:	9d 1f       	adc	r25, r29
     d80:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <memcpy>
      offset += length_message_type;
     d84:	cc 0d       	add	r28, r12
     d86:	dd 1d       	adc	r29, r13
      uint32_t length_md5sum = strlen(this->md5sum);
     d88:	d7 01       	movw	r26, r14
     d8a:	18 96       	adiw	r26, 0x08	; 8
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	19 97       	sbiw	r26, 0x09	; 9
     d92:	df 01       	movw	r26, r30
     d94:	0d 90       	ld	r0, X+
     d96:	00 20       	and	r0, r0
     d98:	e9 f7       	brne	.-6      	; 0xd94 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xac>
     d9a:	11 97       	sbiw	r26, 0x01	; 1
     d9c:	6d 01       	movw	r12, r26
     d9e:	ce 1a       	sub	r12, r30
     da0:	df 0a       	sbc	r13, r31
      varToArr(outbuffer + offset, length_md5sum);
     da2:	a6 01       	movw	r20, r12
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	c8 01       	movw	r24, r16
     daa:	8c 0f       	add	r24, r28
     dac:	9d 1f       	adc	r25, r29
     dae:	76 de       	rcall	.-788    	; 0xa9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
     db0:	24 96       	adiw	r28, 0x04	; 4
     db2:	f7 01       	movw	r30, r14
     db4:	60 85       	ldd	r22, Z+8	; 0x08
     db6:	71 85       	ldd	r23, Z+9	; 0x09
     db8:	a6 01       	movw	r20, r12
     dba:	c8 01       	movw	r24, r16
     dbc:	8c 0f       	add	r24, r28
     dbe:	9d 1f       	adc	r25, r29
     dc0:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <memcpy>
      offset += length_md5sum;
     dc4:	c6 01       	movw	r24, r12
     dc6:	8c 0f       	add	r24, r28
     dc8:	9d 1f       	adc	r25, r29
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
     dca:	d7 01       	movw	r26, r14
     dcc:	1a 96       	adiw	r26, 0x0a	; 10
     dce:	6c 91       	ld	r22, X
     dd0:	1a 97       	sbiw	r26, 0x0a	; 10
     dd2:	1b 96       	adiw	r26, 0x0b	; 11
     dd4:	4c 91       	ld	r20, X
     dd6:	1b 97       	sbiw	r26, 0x0b	; 11
     dd8:	1c 96       	adiw	r26, 0x0c	; 12
     dda:	3c 91       	ld	r19, X
     ddc:	1c 97       	sbiw	r26, 0x0c	; 12
     dde:	1d 96       	adiw	r26, 0x0d	; 13
     de0:	2c 91       	ld	r18, X
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
     de2:	f8 01       	movw	r30, r16
     de4:	e8 0f       	add	r30, r24
     de6:	f9 1f       	adc	r31, r25
     de8:	60 83       	st	Z, r22
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
     dea:	41 83       	std	Z+1, r20	; 0x01
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
     dec:	32 83       	std	Z+2, r19	; 0x02
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
     dee:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->buffer_size);
      return offset;
    }
     df0:	04 96       	adiw	r24, 0x04	; 4
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	08 95       	ret

00000e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	fc 01       	movw	r30, r24
  {
    var = 0;
     e0e:	10 82       	st	Z, r1
     e10:	11 82       	std	Z+1, r1	; 0x01
     e12:	12 82       	std	Z+2, r1	; 0x02
     e14:	13 82       	std	Z+3, r1	; 0x03
     e16:	db 01       	movw	r26, r22
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
    for(size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
     e1c:	4d 91       	ld	r20, X+
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x24>
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x20>
     e2c:	05 2e       	mov	r0, r21
     e2e:	00 0c       	add	r0, r0
     e30:	66 0b       	sbc	r22, r22
     e32:	77 0b       	sbc	r23, r23
     e34:	c0 80       	ld	r12, Z
     e36:	d1 80       	ldd	r13, Z+1	; 0x01
     e38:	e2 80       	ldd	r14, Z+2	; 0x02
     e3a:	f3 80       	ldd	r15, Z+3	; 0x03
     e3c:	4c 29       	or	r20, r12
     e3e:	5d 29       	or	r21, r13
     e40:	6e 29       	or	r22, r14
     e42:	7f 29       	or	r23, r15
     e44:	40 83       	st	Z, r20
     e46:	51 83       	std	Z+1, r21	; 0x01
     e48:	62 83       	std	Z+2, r22	; 0x02
     e4a:	73 83       	std	Z+3, r23	; 0x03
     e4c:	28 5f       	subi	r18, 0xF8	; 248
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for(size_t i = 0; i < sizeof(V); i++)
     e50:	20 32       	cpi	r18, 0x20	; 32
     e52:	31 05       	cpc	r19, r1
     e54:	19 f7       	brne	.-58     	; 0xe1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x18>
      var |= (arr[i] << (8 * i));
  }
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	08 95       	ret

00000e60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
     e60:	4f 92       	push	r4
     e62:	5f 92       	push	r5
     e64:	6f 92       	push	r6
     e66:	7f 92       	push	r7
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
     e7e:	1f 92       	push	r1
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	7c 01       	movw	r14, r24
     e86:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
     e88:	fb 01       	movw	r30, r22
     e8a:	81 91       	ld	r24, Z+
     e8c:	bf 01       	movw	r22, r30
     e8e:	f7 01       	movw	r30, r14
     e90:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	b6 df       	rcall	.-148    	; 0xe04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	ab 81       	ldd	r26, Y+3	; 0x03
     e9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ea0:	4c 01       	movw	r8, r24
     ea2:	5d 01       	movw	r10, r26
     ea4:	f5 e0       	ldi	r31, 0x05	; 5
     ea6:	8f 0e       	add	r8, r31
     ea8:	91 1c       	adc	r9, r1
     eaa:	a1 1c       	adc	r10, r1
     eac:	b1 1c       	adc	r11, r1
     eae:	a8 01       	movw	r20, r16
     eb0:	4c 5f       	subi	r20, 0xFC	; 252
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	fa 01       	movw	r30, r20
     eb6:	25 e0       	ldi	r18, 0x05	; 5
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	29 01       	movw	r4, r18
     ebc:	61 2c       	mov	r6, r1
     ebe:	71 2c       	mov	r7, r1
     ec0:	48 14       	cp	r4, r8
     ec2:	59 04       	cpc	r5, r9
     ec4:	6a 04       	cpc	r6, r10
     ec6:	7b 04       	cpc	r7, r11
     ec8:	28 f4       	brcc	.+10     	; 0xed4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x74>
          inbuffer[k-1]=inbuffer[k];
     eca:	61 81       	ldd	r22, Z+1	; 0x01
     ecc:	61 93       	st	Z+, r22
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	f3 cf       	rjmp	.-26     	; 0xeba <_ZN14rosserial_msgs3Log11deserializeEPh+0x5a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
     ed4:	f8 01       	movw	r30, r16
     ed6:	e8 0f       	add	r30, r24
     ed8:	f9 1f       	adc	r31, r25
     eda:	14 82       	std	Z+4, r1	; 0x04
      this->msg = (char *)(inbuffer + offset-1);
     edc:	f7 01       	movw	r30, r14
     ede:	54 83       	std	Z+4, r21	; 0x04
     ee0:	43 83       	std	Z+3, r20	; 0x03
      offset += length_msg;
     return offset;
    }
     ee2:	05 96       	adiw	r24, 0x05	; 5
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	9f 90       	pop	r9
     efe:	8f 90       	pop	r8
     f00:	7f 90       	pop	r7
     f02:	6f 90       	pop	r6
     f04:	5f 90       	pop	r5
     f06:	4f 90       	pop	r4
     f08:	08 95       	ret

00000f0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
     f0a:	2f 92       	push	r2
     f0c:	3f 92       	push	r3
     f0e:	4f 92       	push	r4
     f10:	5f 92       	push	r5
     f12:	6f 92       	push	r6
     f14:	7f 92       	push	r7
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	60 97       	sbiw	r28, 0x10	; 16
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	8c 01       	movw	r16, r24
     f40:	6b 01       	movw	r12, r22
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
     f42:	db 01       	movw	r26, r22
     f44:	8d 90       	ld	r8, X+
     f46:	9d 90       	ld	r9, X+
     f48:	ad 90       	ld	r10, X+
     f4a:	bc 90       	ld	r11, X
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
     f4c:	fc 01       	movw	r30, r24
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	a4 81       	ldd	r26, Z+4	; 0x04
     f54:	b5 81       	ldd	r27, Z+5	; 0x05
     f56:	88 15       	cp	r24, r8
     f58:	99 05       	cpc	r25, r9
     f5a:	aa 05       	cpc	r26, r10
     f5c:	bb 05       	cpc	r27, r11
     f5e:	70 f4       	brcc	.+28     	; 0xf7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
     f60:	b4 01       	movw	r22, r8
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	82 85       	ldd	r24, Z+10	; 0x0a
     f6c:	93 85       	ldd	r25, Z+11	; 0x0b
     f6e:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
     f72:	d8 01       	movw	r26, r16
     f74:	1b 96       	adiw	r26, 0x0b	; 11
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
     f7a:	1a 97       	sbiw	r26, 0x0a	; 10
      ints_length = ints_lengthT;
     f7c:	f8 01       	movw	r30, r16
     f7e:	82 82       	std	Z+2, r8	; 0x02
     f80:	93 82       	std	Z+3, r9	; 0x03
     f82:	a4 82       	std	Z+4, r10	; 0x04
     f84:	b5 82       	std	Z+5, r11	; 0x05
     f86:	96 01       	movw	r18, r12
      for( uint32_t i = 0; i < ints_length; i++){
     f88:	81 2c       	mov	r8, r1
     f8a:	91 2c       	mov	r9, r1
     f8c:	54 01       	movw	r10, r8
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
     f8e:	44 e0       	ldi	r20, 0x04	; 4
     f90:	50 e0       	ldi	r21, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
     f92:	b8 01       	movw	r22, r16
     f94:	6a 5f       	subi	r22, 0xFA	; 250
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	2c 5f       	subi	r18, 0xFC	; 252
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
     f9c:	f8 01       	movw	r30, r16
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	a4 81       	ldd	r26, Z+4	; 0x04
     fa4:	b5 81       	ldd	r27, Z+5	; 0x05
     fa6:	fa 01       	movw	r30, r20
     fa8:	34 96       	adiw	r30, 0x04	; 4
     faa:	1f 01       	movw	r2, r30
     fac:	88 16       	cp	r8, r24
     fae:	99 06       	cpc	r9, r25
     fb0:	aa 06       	cpc	r10, r26
     fb2:	bb 06       	cpc	r11, r27
     fb4:	50 f5       	brcc	.+84     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
     fb6:	d9 01       	movw	r26, r18
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	fc 90       	ld	r15, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	8c 91       	ld	r24, X
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e0       	ldi	r26, 0x00	; 0
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	dc 01       	movw	r26, r24
     fca:	99 27       	eor	r25, r25
     fcc:	88 27       	eor	r24, r24
     fce:	9f 29       	or	r25, r15
     fd0:	f9 01       	movw	r30, r18
     fd2:	f0 80       	ld	r15, Z
     fd4:	8f 29       	or	r24, r15
     fd6:	f3 80       	ldd	r15, Z+3	; 0x03
     fd8:	bf 29       	or	r27, r15
     fda:	f8 01       	movw	r30, r16
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	a0 87       	std	Z+8, r26	; 0x08
     fe2:	b1 87       	std	Z+9, r27	; 0x09
     fe4:	da 01       	movw	r26, r20
     fe6:	a1 01       	movw	r20, r2
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
     fe8:	14 97       	sbiw	r26, 0x04	; 4
     fea:	82 85       	ldd	r24, Z+10	; 0x0a
     fec:	93 85       	ldd	r25, Z+11	; 0x0b
     fee:	a8 0f       	add	r26, r24
     ff0:	b9 1f       	adc	r27, r25
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	fb 01       	movw	r30, r22
     ff6:	01 90       	ld	r0, Z+
     ff8:	0d 92       	st	X+, r0
     ffa:	8a 95       	dec	r24
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
     ffe:	ff ef       	ldi	r31, 0xFF	; 255
    1000:	8f 1a       	sub	r8, r31
    1002:	9f 0a       	sbc	r9, r31
    1004:	af 0a       	sbc	r10, r31
    1006:	bf 0a       	sbc	r11, r31
    1008:	c7 cf       	rjmp	.-114    	; 0xf98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    100a:	46 01       	movw	r8, r12
    100c:	84 0e       	add	r8, r20
    100e:	95 1e       	adc	r9, r21
    1010:	d4 01       	movw	r26, r8
    1012:	8c 91       	ld	r24, X
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	9c 91       	ld	r25, X
    1018:	11 97       	sbiw	r26, 0x01	; 1
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	4c 90       	ld	r4, X
    101e:	12 97       	sbiw	r26, 0x02	; 2
    1020:	51 2c       	mov	r5, r1
    1022:	61 2c       	mov	r6, r1
    1024:	71 2c       	mov	r7, r1
    1026:	32 01       	movw	r6, r4
    1028:	55 24       	eor	r5, r5
    102a:	44 24       	eor	r4, r4
    102c:	59 2a       	or	r5, r25
    102e:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1030:	13 96       	adiw	r26, 0x03	; 3
    1032:	8c 91       	ld	r24, X
    1034:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    1036:	5f 01       	movw	r10, r30
      if(floats_lengthT > floats_length)
    1038:	f8 01       	movw	r30, r16
    103a:	84 85       	ldd	r24, Z+12	; 0x0c
    103c:	95 85       	ldd	r25, Z+13	; 0x0d
    103e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1040:	b7 85       	ldd	r27, Z+15	; 0x0f
    1042:	84 15       	cp	r24, r4
    1044:	95 05       	cpc	r25, r5
    1046:	a6 05       	cpc	r26, r6
    1048:	b7 05       	cpc	r27, r7
    104a:	70 f4       	brcc	.+28     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    104c:	b2 01       	movw	r22, r4
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	84 89       	ldd	r24, Z+20	; 0x14
    1058:	95 89       	ldd	r25, Z+21	; 0x15
    105a:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    105e:	d8 01       	movw	r26, r16
    1060:	55 96       	adiw	r26, 0x15	; 21
    1062:	9c 93       	st	X, r25
    1064:	8e 93       	st	-X, r24
    1066:	54 97       	sbiw	r26, 0x14	; 20
      floats_length = floats_lengthT;
    1068:	f8 01       	movw	r30, r16
    106a:	44 86       	std	Z+12, r4	; 0x0c
    106c:	55 86       	std	Z+13, r5	; 0x0d
    106e:	66 86       	std	Z+14, r6	; 0x0e
    1070:	77 86       	std	Z+15, r7	; 0x0f
    1072:	c4 01       	movw	r24, r8
      for( uint32_t i = 0; i < floats_length; i++){
    1074:	41 2c       	mov	r4, r1
    1076:	51 2c       	mov	r5, r1
    1078:	32 01       	movw	r6, r4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    107a:	98 01       	movw	r18, r16
    107c:	20 5f       	subi	r18, 0xF0	; 240
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1080:	d8 01       	movw	r26, r16
    1082:	1c 96       	adiw	r26, 0x0c	; 12
    1084:	4d 91       	ld	r20, X+
    1086:	5d 91       	ld	r21, X+
    1088:	6d 91       	ld	r22, X+
    108a:	7c 91       	ld	r23, X
    108c:	1f 97       	sbiw	r26, 0x0f	; 15
    108e:	f5 01       	movw	r30, r10
    1090:	34 96       	adiw	r30, 0x04	; 4
    1092:	44 16       	cp	r4, r20
    1094:	55 06       	cpc	r5, r21
    1096:	66 06       	cpc	r6, r22
    1098:	77 06       	cpc	r7, r23
    109a:	98 f5       	brcc	.+102    	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    109c:	dc 01       	movw	r26, r24
    109e:	15 96       	adiw	r26, 0x05	; 5
    10a0:	fc 90       	ld	r15, X
    10a2:	15 97       	sbiw	r26, 0x05	; 5
    10a4:	16 96       	adiw	r26, 0x06	; 6
    10a6:	4c 91       	ld	r20, X
    10a8:	16 97       	sbiw	r26, 0x06	; 6
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	ba 01       	movw	r22, r20
    10b2:	55 27       	eor	r21, r21
    10b4:	44 27       	eor	r20, r20
    10b6:	5f 29       	or	r21, r15
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	fc 90       	ld	r15, X
    10bc:	14 97       	sbiw	r26, 0x04	; 4
    10be:	4f 29       	or	r20, r15
    10c0:	17 96       	adiw	r26, 0x07	; 7
    10c2:	fc 90       	ld	r15, X
    10c4:	7f 29       	or	r23, r15
      this->st_floats = u_st_floats.real;
    10c6:	d8 01       	movw	r26, r16
    10c8:	50 96       	adiw	r26, 0x10	; 16
    10ca:	4d 93       	st	X+, r20
    10cc:	5d 93       	st	X+, r21
    10ce:	6d 93       	st	X+, r22
    10d0:	7c 93       	st	X, r23
    10d2:	53 97       	sbiw	r26, 0x13	; 19
    10d4:	5f 01       	movw	r10, r30
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    10d6:	ac 01       	movw	r20, r24
    10d8:	48 19       	sub	r20, r8
    10da:	59 09       	sbc	r21, r9
    10dc:	54 96       	adiw	r26, 0x14	; 20
    10de:	0d 90       	ld	r0, X+
    10e0:	bc 91       	ld	r27, X
    10e2:	a0 2d       	mov	r26, r0
    10e4:	a4 0f       	add	r26, r20
    10e6:	b5 1f       	adc	r27, r21
    10e8:	44 e0       	ldi	r20, 0x04	; 4
    10ea:	f9 01       	movw	r30, r18
    10ec:	01 90       	ld	r0, Z+
    10ee:	0d 92       	st	X+, r0
    10f0:	4a 95       	dec	r20
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <__EEPROM_REGION_LENGTH__+0xec>
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    10f4:	bf ef       	ldi	r27, 0xFF	; 255
    10f6:	4b 1a       	sub	r4, r27
    10f8:	5b 0a       	sbc	r5, r27
    10fa:	6b 0a       	sbc	r6, r27
    10fc:	7b 0a       	sbc	r7, r27
    10fe:	04 96       	adiw	r24, 0x04	; 4
    1100:	bf cf       	rjmp	.-130    	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    1102:	d6 01       	movw	r26, r12
    1104:	aa 0d       	add	r26, r10
    1106:	bb 1d       	adc	r27, r11
    1108:	8c 91       	ld	r24, X
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	9c 91       	ld	r25, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	12 96       	adiw	r26, 0x02	; 2
    1112:	8c 90       	ld	r8, X
    1114:	12 97       	sbiw	r26, 0x02	; 2
    1116:	91 2c       	mov	r9, r1
    1118:	a1 2c       	mov	r10, r1
    111a:	b1 2c       	mov	r11, r1
    111c:	54 01       	movw	r10, r8
    111e:	99 24       	eor	r9, r9
    1120:	88 24       	eor	r8, r8
    1122:	99 2a       	or	r9, r25
    1124:	88 2a       	or	r8, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	8c 91       	ld	r24, X
    112a:	b8 2a       	or	r11, r24
      offset += sizeof(this->strings_length);
    112c:	7f 01       	movw	r14, r30
      if(strings_lengthT > strings_length)
    112e:	f8 01       	movw	r30, r16
    1130:	86 89       	ldd	r24, Z+22	; 0x16
    1132:	97 89       	ldd	r25, Z+23	; 0x17
    1134:	a0 8d       	ldd	r26, Z+24	; 0x18
    1136:	b1 8d       	ldd	r27, Z+25	; 0x19
    1138:	88 15       	cp	r24, r8
    113a:	99 05       	cpc	r25, r9
    113c:	aa 05       	cpc	r26, r10
    113e:	bb 05       	cpc	r27, r11
    1140:	60 f4       	brcc	.+24     	; 0x115a <__EEPROM_REGION_LENGTH__+0x15a>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    1142:	b4 01       	movw	r22, r8
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	84 8d       	ldd	r24, Z+28	; 0x1c
    114a:	95 8d       	ldd	r25, Z+29	; 0x1d
    114c:	0e 94 aa 14 	call	0x2954	; 0x2954 <realloc>
    1150:	d8 01       	movw	r26, r16
    1152:	5d 96       	adiw	r26, 0x1d	; 29
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	5c 97       	sbiw	r26, 0x1c	; 28
      strings_length = strings_lengthT;
    115a:	f8 01       	movw	r30, r16
    115c:	86 8a       	std	Z+22, r8	; 0x16
    115e:	97 8a       	std	Z+23, r9	; 0x17
    1160:	a0 8e       	std	Z+24, r10	; 0x18
    1162:	b1 8e       	std	Z+25, r11	; 0x19
    1164:	21 2c       	mov	r2, r1
    1166:	31 2c       	mov	r3, r1
      for( uint32_t i = 0; i < strings_length; i++){
    1168:	81 2c       	mov	r8, r1
    116a:	91 2c       	mov	r9, r1
    116c:	54 01       	movw	r10, r8
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    116e:	98 01       	movw	r18, r16
    1170:	26 5e       	subi	r18, 0xE6	; 230
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	3a 87       	std	Y+10, r19	; 0x0a
    1176:	29 87       	std	Y+9, r18	; 0x09
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1178:	f8 01       	movw	r30, r16
    117a:	86 89       	ldd	r24, Z+22	; 0x16
    117c:	97 89       	ldd	r25, Z+23	; 0x17
    117e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1180:	b1 8d       	ldd	r27, Z+25	; 0x19
    1182:	88 16       	cp	r8, r24
    1184:	99 06       	cpc	r9, r25
    1186:	aa 06       	cpc	r10, r26
    1188:	bb 06       	cpc	r11, r27
    118a:	08 f0       	brcs	.+2      	; 0x118e <__EEPROM_REGION_LENGTH__+0x18e>
    118c:	5e c0       	rjmp	.+188    	; 0x124a <__EEPROM_REGION_LENGTH__+0x24a>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    118e:	b6 01       	movw	r22, r12
    1190:	6e 0d       	add	r22, r14
    1192:	7f 1d       	adc	r23, r15
    1194:	ce 01       	movw	r24, r28
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	35 de       	rcall	.-918    	; 0xe04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    119a:	97 01       	movw	r18, r14
    119c:	2c 5f       	subi	r18, 0xFC	; 252
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	38 8b       	std	Y+16, r19	; 0x10
    11a2:	2f 87       	std	Y+15, r18	; 0x0f
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    11a4:	49 81       	ldd	r20, Y+1	; 0x01
    11a6:	5a 81       	ldd	r21, Y+2	; 0x02
    11a8:	6b 81       	ldd	r22, Y+3	; 0x03
    11aa:	7c 81       	ldd	r23, Y+4	; 0x04
    11ac:	c9 01       	movw	r24, r18
    11ae:	33 0f       	add	r19, r19
    11b0:	aa 0b       	sbc	r26, r26
    11b2:	bb 0b       	sbc	r27, r27
    11b4:	2c 01       	movw	r4, r24
    11b6:	3d 01       	movw	r6, r26
    11b8:	44 0e       	add	r4, r20
    11ba:	55 1e       	adc	r5, r21
    11bc:	66 1e       	adc	r6, r22
    11be:	77 1e       	adc	r7, r23
    11c0:	4b 86       	std	Y+11, r4	; 0x0b
    11c2:	5c 86       	std	Y+12, r5	; 0x0c
    11c4:	6d 86       	std	Y+13, r6	; 0x0d
    11c6:	7e 86       	std	Y+14, r7	; 0x0e
    11c8:	23 e0       	ldi	r18, 0x03	; 3
    11ca:	e2 0e       	add	r14, r18
    11cc:	f1 1c       	adc	r15, r1
    11ce:	f6 01       	movw	r30, r12
    11d0:	ee 0d       	add	r30, r14
    11d2:	ff 1d       	adc	r31, r15
    11d4:	2f 85       	ldd	r18, Y+15	; 0x0f
    11d6:	38 89       	ldd	r19, Y+16	; 0x10
    11d8:	c9 01       	movw	r24, r18
    11da:	a0 e0       	ldi	r26, 0x00	; 0
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	4b 84       	ldd	r4, Y+11	; 0x0b
    11e0:	5c 84       	ldd	r5, Y+12	; 0x0c
    11e2:	6d 84       	ldd	r6, Y+13	; 0x0d
    11e4:	7e 84       	ldd	r7, Y+14	; 0x0e
    11e6:	84 15       	cp	r24, r4
    11e8:	95 05       	cpc	r25, r5
    11ea:	a6 05       	cpc	r26, r6
    11ec:	b7 05       	cpc	r27, r7
    11ee:	28 f4       	brcc	.+10     	; 0x11fa <__EEPROM_REGION_LENGTH__+0x1fa>
          inbuffer[k-1]=inbuffer[k];
    11f0:	a1 81       	ldd	r26, Z+1	; 0x01
    11f2:	a1 93       	st	Z+, r26
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	ef cf       	rjmp	.-34     	; 0x11d8 <__EEPROM_REGION_LENGTH__+0x1d8>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    11fa:	6f 84       	ldd	r6, Y+15	; 0x0f
    11fc:	78 88       	ldd	r7, Y+16	; 0x10
    11fe:	46 0d       	add	r20, r6
    1200:	57 1d       	adc	r21, r7
    1202:	f6 01       	movw	r30, r12
    1204:	e4 0f       	add	r30, r20
    1206:	f5 1f       	adc	r31, r21
    1208:	31 97       	sbiw	r30, 0x01	; 1
    120a:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    120c:	c3 01       	movw	r24, r6
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	8c 0d       	add	r24, r12
    1212:	9d 1d       	adc	r25, r13
    1214:	d8 01       	movw	r26, r16
    1216:	5b 96       	adiw	r26, 0x1b	; 27
    1218:	9c 93       	st	X, r25
    121a:	8e 93       	st	-X, r24
    121c:	5a 97       	sbiw	r26, 0x1a	; 26
      offset += length_st_strings;
    121e:	7a 01       	movw	r14, r20
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    1220:	5c 96       	adiw	r26, 0x1c	; 28
    1222:	ed 91       	ld	r30, X+
    1224:	fc 91       	ld	r31, X
    1226:	5d 97       	sbiw	r26, 0x1d	; 29
    1228:	e2 0d       	add	r30, r2
    122a:	f3 1d       	adc	r31, r3
    122c:	a9 85       	ldd	r26, Y+9	; 0x09
    122e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1230:	8d 91       	ld	r24, X+
    1232:	9c 91       	ld	r25, X
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1238:	bf ef       	ldi	r27, 0xFF	; 255
    123a:	8b 1a       	sub	r8, r27
    123c:	9b 0a       	sbc	r9, r27
    123e:	ab 0a       	sbc	r10, r27
    1240:	bb 0a       	sbc	r11, r27
    1242:	e2 e0       	ldi	r30, 0x02	; 2
    1244:	2e 0e       	add	r2, r30
    1246:	31 1c       	adc	r3, r1
    1248:	97 cf       	rjmp	.-210    	; 0x1178 <__EEPROM_REGION_LENGTH__+0x178>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
    124a:	c7 01       	movw	r24, r14
    124c:	60 96       	adiw	r28, 0x10	; 16
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	7f 90       	pop	r7
    1272:	6f 90       	pop	r6
    1274:	5f 90       	pop	r5
    1276:	4f 90       	pop	r4
    1278:	3f 90       	pop	r3
    127a:	2f 90       	pop	r2
    127c:	08 95       	ret

0000127e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    127e:	4f 92       	push	r4
    1280:	5f 92       	push	r5
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	2c 97       	sbiw	r28, 0x0c	; 12
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	7c 01       	movw	r14, r24
    12b0:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
    12b2:	db 01       	movw	r26, r22
    12b4:	8c 91       	ld	r24, X
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	f7 01       	movw	r30, r14
    12ba:	93 83       	std	Z+3, r25	; 0x03
    12bc:	82 83       	std	Z+2, r24	; 0x02
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
    12be:	11 96       	adiw	r26, 0x01	; 1
    12c0:	2c 91       	ld	r18, X
    12c2:	92 2b       	or	r25, r18
    12c4:	93 83       	std	Z+3, r25	; 0x03
    12c6:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
    12c8:	6e 5f       	subi	r22, 0xFE	; 254
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	ce 01       	movw	r24, r28
    12ce:	09 96       	adiw	r24, 0x09	; 9
    12d0:	99 dd       	rcall	.-1230   	; 0xe04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    12d2:	89 84       	ldd	r8, Y+9	; 0x09
    12d4:	9a 84       	ldd	r9, Y+10	; 0x0a
    12d6:	ab 84       	ldd	r10, Y+11	; 0x0b
    12d8:	bc 84       	ldd	r11, Y+12	; 0x0c
    12da:	24 01       	movw	r4, r8
    12dc:	35 01       	movw	r6, r10
    12de:	f6 e0       	ldi	r31, 0x06	; 6
    12e0:	4f 0e       	add	r4, r31
    12e2:	51 1c       	adc	r5, r1
    12e4:	61 1c       	adc	r6, r1
    12e6:	71 1c       	adc	r7, r1
    12e8:	98 01       	movw	r18, r16
    12ea:	2b 5f       	subi	r18, 0xFB	; 251
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	f9 01       	movw	r30, r18
    12f0:	86 e0       	ldi	r24, 0x06	; 6
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	ac 01       	movw	r20, r24
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	44 15       	cp	r20, r4
    12fc:	55 05       	cpc	r21, r5
    12fe:	66 05       	cpc	r22, r6
    1300:	77 05       	cpc	r23, r7
    1302:	20 f4       	brcc	.+8      	; 0x130c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8e>
          inbuffer[k-1]=inbuffer[k];
    1304:	41 81       	ldd	r20, Z+1	; 0x01
    1306:	41 93       	st	Z+, r20
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	f4 cf       	rjmp	.-24     	; 0x12f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
    130c:	f8 01       	movw	r30, r16
    130e:	e8 0d       	add	r30, r8
    1310:	f9 1d       	adc	r31, r9
    1312:	15 82       	std	Z+5, r1	; 0x05
      this->topic_name = (char *)(inbuffer + offset-1);
    1314:	d7 01       	movw	r26, r14
    1316:	15 96       	adiw	r26, 0x05	; 5
    1318:	3c 93       	st	X, r19
    131a:	2e 93       	st	-X, r18
    131c:	14 97       	sbiw	r26, 0x04	; 4
      offset += length_topic_name;
    131e:	b4 01       	movw	r22, r8
    1320:	6a 5f       	subi	r22, 0xFA	; 250
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
    1324:	60 0f       	add	r22, r16
    1326:	71 1f       	adc	r23, r17
    1328:	ce 01       	movw	r24, r28
    132a:	05 96       	adiw	r24, 0x05	; 5
    132c:	6b dd       	rcall	.-1322   	; 0xe04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    132e:	ba e0       	ldi	r27, 0x0A	; 10
    1330:	8b 0e       	add	r8, r27
    1332:	91 1c       	adc	r9, r1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    1334:	4d 80       	ldd	r4, Y+5	; 0x05
    1336:	5e 80       	ldd	r5, Y+6	; 0x06
    1338:	6f 80       	ldd	r6, Y+7	; 0x07
    133a:	78 84       	ldd	r7, Y+8	; 0x08
    133c:	a4 01       	movw	r20, r8
    133e:	09 2c       	mov	r0, r9
    1340:	00 0c       	add	r0, r0
    1342:	66 0b       	sbc	r22, r22
    1344:	77 0b       	sbc	r23, r23
    1346:	44 0d       	add	r20, r4
    1348:	55 1d       	adc	r21, r5
    134a:	66 1d       	adc	r22, r6
    134c:	77 1d       	adc	r23, r7
    134e:	d8 01       	movw	r26, r16
    1350:	a8 0d       	add	r26, r8
    1352:	b9 1d       	adc	r27, r9
    1354:	cd 01       	movw	r24, r26
    1356:	80 1b       	sub	r24, r16
    1358:	91 0b       	sbc	r25, r17
    135a:	5c 01       	movw	r10, r24
    135c:	c1 2c       	mov	r12, r1
    135e:	d1 2c       	mov	r13, r1
    1360:	a4 16       	cp	r10, r20
    1362:	b5 06       	cpc	r11, r21
    1364:	c6 06       	cpc	r12, r22
    1366:	d7 06       	cpc	r13, r23
    1368:	28 f4       	brcc	.+10     	; 0x1374 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xf6>
          inbuffer[k-1]=inbuffer[k];
    136a:	8d 91       	ld	r24, X+
    136c:	fd 01       	movw	r30, r26
    136e:	32 97       	sbiw	r30, 0x02	; 2
    1370:	80 83       	st	Z, r24
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
    1372:	f0 cf       	rjmp	.-32     	; 0x1354 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd6>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
    1374:	54 01       	movw	r10, r8
    1376:	a4 0c       	add	r10, r4
    1378:	b5 1c       	adc	r11, r5
    137a:	b8 01       	movw	r22, r16
    137c:	6a 0d       	add	r22, r10
    137e:	7b 1d       	adc	r23, r11
    1380:	fb 01       	movw	r30, r22
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	10 82       	st	Z, r1
      this->message_type = (char *)(inbuffer + offset-1);
    1386:	c4 01       	movw	r24, r8
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	80 0f       	add	r24, r16
    138c:	91 1f       	adc	r25, r17
    138e:	f7 01       	movw	r30, r14
    1390:	97 83       	std	Z+7, r25	; 0x07
    1392:	86 83       	std	Z+6, r24	; 0x06
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	35 dd       	rcall	.-1430   	; 0xe04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    139a:	95 01       	movw	r18, r10
    139c:	2c 5f       	subi	r18, 0xFC	; 252
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	ab 81       	ldd	r26, Y+3	; 0x03
    13a6:	bc 81       	ldd	r27, Y+4	; 0x04
    13a8:	29 01       	movw	r4, r18
    13aa:	03 2e       	mov	r0, r19
    13ac:	00 0c       	add	r0, r0
    13ae:	66 08       	sbc	r6, r6
    13b0:	77 08       	sbc	r7, r7
    13b2:	48 0e       	add	r4, r24
    13b4:	59 1e       	adc	r5, r25
    13b6:	6a 1e       	adc	r6, r26
    13b8:	7b 1e       	adc	r7, r27
    13ba:	f5 01       	movw	r30, r10
    13bc:	33 96       	adiw	r30, 0x03	; 3
    13be:	e0 0f       	add	r30, r16
    13c0:	f1 1f       	adc	r31, r17
    13c2:	a9 01       	movw	r20, r18
    13c4:	4a 01       	movw	r8, r20
    13c6:	a1 2c       	mov	r10, r1
    13c8:	b1 2c       	mov	r11, r1
    13ca:	84 14       	cp	r8, r4
    13cc:	95 04       	cpc	r9, r5
    13ce:	a6 04       	cpc	r10, r6
    13d0:	b7 04       	cpc	r11, r7
    13d2:	28 f4       	brcc	.+10     	; 0x13de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x160>
          inbuffer[k-1]=inbuffer[k];
    13d4:	61 81       	ldd	r22, Z+1	; 0x01
    13d6:	61 93       	st	Z+, r22
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
    13d8:	4f 5f       	subi	r20, 0xFF	; 255
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	f3 cf       	rjmp	.-26     	; 0x13c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	f8 01       	movw	r30, r16
    13e4:	e8 0f       	add	r30, r24
    13e6:	f9 1f       	adc	r31, r25
    13e8:	df 01       	movw	r26, r30
    13ea:	11 97       	sbiw	r26, 0x01	; 1
    13ec:	1c 92       	st	X, r1
      this->md5sum = (char *)(inbuffer + offset-1);
    13ee:	21 50       	subi	r18, 0x01	; 1
    13f0:	31 09       	sbc	r19, r1
    13f2:	02 0f       	add	r16, r18
    13f4:	13 1f       	adc	r17, r19
    13f6:	d7 01       	movw	r26, r14
    13f8:	19 96       	adiw	r26, 0x09	; 9
    13fa:	1c 93       	st	X, r17
    13fc:	0e 93       	st	-X, r16
    13fe:	18 97       	sbiw	r26, 0x08	; 8
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
    1400:	21 81       	ldd	r18, Z+1	; 0x01
    1402:	42 81       	ldd	r20, Z+2	; 0x02
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	ba 01       	movw	r22, r20
    140c:	55 27       	eor	r21, r21
    140e:	44 27       	eor	r20, r20
    1410:	52 2b       	or	r21, r18
    1412:	20 81       	ld	r18, Z
    1414:	42 2b       	or	r20, r18
    1416:	23 81       	ldd	r18, Z+3	; 0x03
    1418:	72 2b       	or	r23, r18
    141a:	f7 01       	movw	r30, r14
    141c:	42 87       	std	Z+10, r20	; 0x0a
    141e:	53 87       	std	Z+11, r21	; 0x0b
    1420:	64 87       	std	Z+12, r22	; 0x0c
    1422:	75 87       	std	Z+13, r23	; 0x0d
      offset += sizeof(this->buffer_size);
     return offset;
    }
    1424:	04 96       	adiw	r24, 0x04	; 4
    1426:	2c 96       	adiw	r28, 0x0c	; 12
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	bf 90       	pop	r11
    1444:	af 90       	pop	r10
    1446:	9f 90       	pop	r9
    1448:	8f 90       	pop	r8
    144a:	7f 90       	pop	r7
    144c:	6f 90       	pop	r6
    144e:	5f 90       	pop	r5
    1450:	4f 90       	pop	r4
    1452:	08 95       	ret

00001454 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2a 97       	sbiw	r28, 0x0a	; 10
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	8c 01       	movw	r16, r24
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    146e:	89 e7       	ldi	r24, 0x79	; 121
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
    1476:	1b 82       	std	Y+3, r1	; 0x03
    1478:	1c 82       	std	Y+4, r1	; 0x04
    147a:	1d 82       	std	Y+5, r1	; 0x05
    147c:	1e 82       	std	Y+6, r1	; 0x06
    147e:	1f 82       	std	Y+7, r1	; 0x07
    1480:	18 86       	std	Y+8, r1	; 0x08
    1482:	19 86       	std	Y+9, r1	; 0x09
    1484:	1a 86       	std	Y+10, r1	; 0x0a
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
    1486:	d8 01       	movw	r26, r16
    1488:	ed 91       	ld	r30, X+
    148a:	fc 91       	ld	r31, X
    148c:	01 90       	ld	r0, Z+
    148e:	f0 81       	ld	r31, Z
    1490:	e0 2d       	mov	r30, r0
    1492:	ae 01       	movw	r20, r28
    1494:	4f 5f       	subi	r20, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	6a e0       	ldi	r22, 0x0A	; 10
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	c8 01       	movw	r24, r16
    149e:	19 95       	eicall
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    14a0:	0e 94 04 13 	call	0x2608	; 0x2608 <millis>
        rt_time = hardware_.time();
    14a4:	f8 01       	movw	r30, r16
    14a6:	60 87       	std	Z+8, r22	; 0x08
    14a8:	71 87       	std	Z+9, r23	; 0x09
    14aa:	82 87       	std	Z+10, r24	; 0x0a
    14ac:	93 87       	std	Z+11, r25	; 0x0b
      }
    14ae:	2a 96       	adiw	r28, 0x0a	; 10
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>:

      void syncTime(uint8_t * data)
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	2a 97       	sbiw	r28, 0x0a	; 10
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	8c 01       	movw	r16, r24
    14ee:	5b 01       	movw	r10, r22
    14f0:	89 e7       	ldi	r24, 0x79	; 121
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	1b 82       	std	Y+3, r1	; 0x03
    14fa:	1c 82       	std	Y+4, r1	; 0x04
    14fc:	1d 82       	std	Y+5, r1	; 0x05
    14fe:	1e 82       	std	Y+6, r1	; 0x06
    1500:	1f 82       	std	Y+7, r1	; 0x07
    1502:	18 86       	std	Y+8, r1	; 0x08
    1504:	19 86       	std	Y+9, r1	; 0x09
    1506:	1a 86       	std	Y+10, r1	; 0x0a
    1508:	0e 94 04 13 	call	0x2608	; 0x2608 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
    150c:	f8 01       	movw	r30, r16
    150e:	c0 84       	ldd	r12, Z+8	; 0x08
    1510:	d1 84       	ldd	r13, Z+9	; 0x09
    1512:	e2 84       	ldd	r14, Z+10	; 0x0a
    1514:	f3 84       	ldd	r15, Z+11	; 0x0b
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	2c 19       	sub	r18, r12
    151c:	3d 09       	sbc	r19, r13
    151e:	4e 09       	sbc	r20, r14
    1520:	5f 09       	sbc	r21, r15
    1522:	69 01       	movw	r12, r18
    1524:	7a 01       	movw	r14, r20

        t.deserialize(data);
    1526:	b5 01       	movw	r22, r10
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	b4 d8       	rcall	.-3736   	; 0x696 <_ZN8std_msgs4Time11deserializeEPh>
        t.data.sec += offset/1000;
    152e:	88 ee       	ldi	r24, 0xE8	; 232
    1530:	88 2e       	mov	r8, r24
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	98 2e       	mov	r9, r24
    1536:	a1 2c       	mov	r10, r1
    1538:	b1 2c       	mov	r11, r1
    153a:	c7 01       	movw	r24, r14
    153c:	b6 01       	movw	r22, r12
    153e:	a5 01       	movw	r20, r10
    1540:	94 01       	movw	r18, r8
    1542:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    1546:	cb 80       	ldd	r12, Y+3	; 0x03
    1548:	dc 80       	ldd	r13, Y+4	; 0x04
    154a:	ed 80       	ldd	r14, Y+5	; 0x05
    154c:	fe 80       	ldd	r15, Y+6	; 0x06
    154e:	c2 0e       	add	r12, r18
    1550:	d3 1e       	adc	r13, r19
    1552:	e4 1e       	adc	r14, r20
    1554:	f5 1e       	adc	r15, r21
    1556:	cb 82       	std	Y+3, r12	; 0x03
    1558:	dc 82       	std	Y+4, r13	; 0x04
    155a:	ed 82       	std	Y+5, r14	; 0x05
    155c:	fe 82       	std	Y+6, r15	; 0x06
        t.data.nsec += (offset%1000)*1000000UL;
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	60 e4       	ldi	r22, 0x40	; 64
    1564:	72 e4       	ldi	r23, 0x42	; 66
    1566:	8f e0       	ldi	r24, 0x0F	; 15
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsi3>
    156e:	cf 80       	ldd	r12, Y+7	; 0x07
    1570:	d8 84       	ldd	r13, Y+8	; 0x08
    1572:	e9 84       	ldd	r14, Y+9	; 0x09
    1574:	fa 84       	ldd	r15, Y+10	; 0x0a
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8c 0d       	add	r24, r12
    157c:	9d 1d       	adc	r25, r13
    157e:	ae 1d       	adc	r26, r14
    1580:	bf 1d       	adc	r27, r15
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
    158a:	0e 94 04 13 	call	0x2608	; 0x2608 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
    158e:	cb 80       	ldd	r12, Y+3	; 0x03
    1590:	dc 80       	ldd	r13, Y+4	; 0x04
    1592:	ed 80       	ldd	r14, Y+5	; 0x05
    1594:	fe 80       	ldd	r15, Y+6	; 0x06
    1596:	31 e0       	ldi	r19, 0x01	; 1
    1598:	c3 1a       	sub	r12, r19
    159a:	d1 08       	sbc	r13, r1
    159c:	e1 08       	sbc	r14, r1
    159e:	f1 08       	sbc	r15, r1
    15a0:	a5 01       	movw	r20, r10
    15a2:	94 01       	movw	r18, r8
    15a4:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    15a8:	c2 1a       	sub	r12, r18
    15aa:	d3 0a       	sbc	r13, r19
    15ac:	e4 0a       	sbc	r14, r20
    15ae:	f5 0a       	sbc	r15, r21
    15b0:	f8 01       	movw	r30, r16
    15b2:	c4 86       	std	Z+12, r12	; 0x0c
    15b4:	d5 86       	std	Z+13, r13	; 0x0d
    15b6:	e6 86       	std	Z+14, r14	; 0x0e
    15b8:	f7 86       	std	Z+15, r15	; 0x0f
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
    15ba:	cf 80       	ldd	r12, Y+7	; 0x07
    15bc:	d8 84       	ldd	r13, Y+8	; 0x08
    15be:	e9 84       	ldd	r14, Y+9	; 0x09
    15c0:	fa 84       	ldd	r15, Y+10	; 0x0a
    15c2:	f6 e3       	ldi	r31, 0x36	; 54
    15c4:	df 1a       	sub	r13, r31
    15c6:	f5 e6       	ldi	r31, 0x65	; 101
    15c8:	ef 0a       	sbc	r14, r31
    15ca:	f4 ec       	ldi	r31, 0xC4	; 196
    15cc:	ff 0a       	sbc	r15, r31
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	60 e4       	ldi	r22, 0x40	; 64
    15d4:	72 e4       	ldi	r23, 0x42	; 66
    15d6:	8f e0       	ldi	r24, 0x0F	; 15
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsi3>
    15de:	c6 1a       	sub	r12, r22
    15e0:	d7 0a       	sbc	r13, r23
    15e2:	e8 0a       	sbc	r14, r24
    15e4:	f9 0a       	sbc	r15, r25
    15e6:	f8 01       	movw	r30, r16
    15e8:	c0 8a       	std	Z+16, r12	; 0x10
    15ea:	d1 8a       	std	Z+17, r13	; 0x11
    15ec:	e2 8a       	std	Z+18, r14	; 0x12
    15ee:	f3 8a       	std	Z+19, r15	; 0x13
        normalizeSecNSec(sec_offset, nsec_offset);
    15f0:	b8 01       	movw	r22, r16
    15f2:	60 5f       	subi	r22, 0xF0	; 240
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	c8 01       	movw	r24, r16
    15f8:	0c 96       	adiw	r24, 0x0c	; 12
    15fa:	1c d5       	rcall	.+2616   	; 0x2034 <_ZN3ros16normalizeSecNSecERmS0_>
    15fc:	0e 94 04 13 	call	0x2608	; 0x2608 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
    1600:	f8 01       	movw	r30, r16
    1602:	e9 57       	subi	r30, 0x79	; 121
    1604:	fb 4f       	sbci	r31, 0xFB	; 251
    1606:	60 83       	st	Z, r22
    1608:	71 83       	std	Z+1, r23	; 0x01
    160a:	82 83       	std	Z+2, r24	; 0x02
    160c:	93 83       	std	Z+3, r25	; 0x03
      }
    160e:	2a 96       	adiw	r28, 0x0a	; 10
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	bf 90       	pop	r11
    162c:	af 90       	pop	r10
    162e:	9f 90       	pop	r9
    1630:	8f 90       	pop	r8
    1632:	08 95       	ret

00001634 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>:
       * Logging
       */

    private:
      
      void log(char byte, const char * msg){
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	00 d0       	rcall	.+0      	; 0x163a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc+0x6>
    163a:	1f 92       	push	r1
    163c:	1f 92       	push	r1
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
    1642:	21 e9       	ldi	r18, 0x91	; 145
    1644:	32 e0       	ldi	r19, 0x02	; 2
    1646:	3a 83       	std	Y+2, r19	; 0x02
    1648:	29 83       	std	Y+1, r18	; 0x01
        rosserial_msgs::Log l;
        l.level= byte;
    164a:	6b 83       	std	Y+3, r22	; 0x03
        l.msg = (char*) msg;
    164c:	5d 83       	std	Y+5, r21	; 0x05
    164e:	4c 83       	std	Y+4, r20	; 0x04
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
    1650:	dc 01       	movw	r26, r24
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	01 90       	ld	r0, Z+
    1658:	f0 81       	ld	r31, Z
    165a:	e0 2d       	mov	r30, r0
    165c:	ae 01       	movw	r20, r28
    165e:	4f 5f       	subi	r20, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	67 e0       	ldi	r22, 0x07	; 7
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	19 95       	eicall
      }
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE>:
        }
        
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
      {
        if(id >= 100 && !configured_)
    168c:	64 36       	cpi	r22, 0x64	; 100
    168e:	71 05       	cpc	r23, r1
    1690:	3c f0       	brlt	.+14     	; 0x16a0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    1692:	fc 01       	movw	r30, r24
    1694:	ee 57       	subi	r30, 0x7E	; 126
    1696:	fb 4f       	sbci	r31, 0xFB	; 251
    1698:	20 81       	ld	r18, Z
    169a:	22 23       	and	r18, r18
    169c:	09 f4       	brne	.+2      	; 0x16a0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x28>
    169e:	62 c0       	rjmp	.+196    	; 0x1764 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xec>
    16a0:	da 01       	movw	r26, r20
    16a2:	6b 01       	movw	r12, r22
    16a4:	ec 01       	movw	r28, r24
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
    16a6:	bc 01       	movw	r22, r24
    16a8:	65 5e       	subi	r22, 0xE5	; 229
    16aa:	7d 4f       	sbci	r23, 0xFD	; 253
    16ac:	ed 91       	ld	r30, X+
    16ae:	fc 91       	ld	r31, X
    16b0:	01 90       	ld	r0, Z+
    16b2:	f0 81       	ld	r31, Z
    16b4:	e0 2d       	mov	r30, r0
    16b6:	ca 01       	movw	r24, r20
    16b8:	19 95       	eicall
    16ba:	8c 01       	movw	r16, r24

        /* setup the header */
        message_out[0] = 0xff;
    16bc:	7e 01       	movw	r14, r28
    16be:	2c ee       	ldi	r18, 0xEC	; 236
    16c0:	e2 1a       	sub	r14, r18
    16c2:	2d ef       	ldi	r18, 0xFD	; 253
    16c4:	f2 0a       	sbc	r15, r18
    16c6:	2f ef       	ldi	r18, 0xFF	; 255
    16c8:	d7 01       	movw	r26, r14
    16ca:	2c 93       	st	X, r18
        message_out[1] = PROTOCOL_VER;
    16cc:	fe 01       	movw	r30, r28
    16ce:	eb 5e       	subi	r30, 0xEB	; 235
    16d0:	fd 4f       	sbci	r31, 0xFD	; 253
    16d2:	2e ef       	ldi	r18, 0xFE	; 254
    16d4:	20 83       	st	Z, r18
        message_out[2] = (uint8_t) ((uint16_t)l&255);
    16d6:	31 96       	adiw	r30, 0x01	; 1
    16d8:	80 83       	st	Z, r24
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
    16da:	31 96       	adiw	r30, 0x01	; 1
    16dc:	90 83       	st	Z, r25
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	98 0f       	add	r25, r24
    16e2:	90 95       	com	r25
    16e4:	90 83       	st	Z, r25
        message_out[5] = (uint8_t) ((int16_t)id&255);
    16e6:	31 96       	adiw	r30, 0x01	; 1
    16e8:	c0 82       	st	Z, r12
        message_out[6] = (uint8_t) ((int16_t)id>>8);
    16ea:	16 96       	adiw	r26, 0x06	; 6
    16ec:	dc 92       	st	X, r13

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    16ee:	45 e0       	ldi	r20, 0x05	; 5
    16f0:	50 e0       	ldi	r21, 0x00	; 0
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
        for(int i =5; i<l+7; i++)
    16f6:	c8 01       	movw	r24, r16
    16f8:	07 96       	adiw	r24, 0x07	; 7
    16fa:	48 17       	cp	r20, r24
    16fc:	59 07       	cpc	r21, r25
    16fe:	30 f4       	brcc	.+12     	; 0x170c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x94>
          chk += message_out[i];
    1700:	61 91       	ld	r22, Z+
    1702:	26 0f       	add	r18, r22
    1704:	31 1d       	adc	r19, r1
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
    1706:	4f 5f       	subi	r20, 0xFF	; 255
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0x82>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
    170c:	08 5f       	subi	r16, 0xF8	; 248
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	8c 0f       	add	r24, r28
    1712:	9d 1f       	adc	r25, r29
    1714:	fc 01       	movw	r30, r24
    1716:	ec 5e       	subi	r30, 0xEC	; 236
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	20 95       	com	r18
    171c:	20 83       	st	Z, r18

        if( l <= OUTPUT_SIZE ){
    171e:	01 30       	cpi	r16, 0x01	; 1
    1720:	b2 e0       	ldi	r27, 0x02	; 2
    1722:	1b 07       	cpc	r17, r27
    1724:	a8 f4       	brcc	.+42     	; 0x1750 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xd8>
          hardware_.write(message_out, l);
    1726:	68 01       	movw	r12, r16
    1728:	57 01       	movw	r10, r14
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
    172a:	c5 01       	movw	r24, r10
    172c:	8e 19       	sub	r24, r14
    172e:	9f 09       	sbc	r25, r15
    1730:	80 17       	cp	r24, r16
    1732:	91 07       	cpc	r25, r17
    1734:	cc f4       	brge	.+50     	; 0x1768 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
        iostream->write(data[i]);
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	f5 01       	movw	r30, r10
    173c:	61 91       	ld	r22, Z+
    173e:	5f 01       	movw	r10, r30
    1740:	dc 01       	movw	r26, r24
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	01 90       	ld	r0, Z+
    1748:	f0 81       	ld	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	19 95       	eicall
    174e:	ed cf       	rjmp	.-38     	; 0x172a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xb2>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1750:	46 e0       	ldi	r20, 0x06	; 6
    1752:	52 e0       	ldi	r21, 0x02	; 2
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	ce 01       	movw	r24, r28
    1758:	6d df       	rcall	.-294    	; 0x1634 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        if( l <= OUTPUT_SIZE ){
          hardware_.write(message_out, l);
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
    175a:	cc 24       	eor	r12, r12
    175c:	ca 94       	dec	r12
    175e:	dd 24       	eor	r13, r13
    1760:	da 94       	dec	r13
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE7publishEiPKNS_3MsgE+0xf0>
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
	  return 0;
    1764:	c1 2c       	mov	r12, r1
    1766:	d1 2c       	mov	r13, r1
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
        }
      }
    1768:	c6 01       	movw	r24, r12
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	08 95       	ret

00001780 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>:
          }
        }
        return false;
      }

      void negotiateTopics()
    1780:	4f 92       	push	r4
    1782:	5f 92       	push	r5
    1784:	6f 92       	push	r6
    1786:	7f 92       	push	r7
    1788:	af 92       	push	r10
    178a:	bf 92       	push	r11
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	66 97       	sbiw	r28, 0x16	; 22
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	8c 01       	movw	r16, r24
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    17ae:	85 e8       	ldi	r24, 0x85	; 133
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	1c 82       	std	Y+4, r1	; 0x04
    17b8:	1b 82       	std	Y+3, r1	; 0x03
    17ba:	8e e3       	ldi	r24, 0x3E	; 62
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	98 87       	std	Y+8, r25	; 0x08
    17c4:	8f 83       	std	Y+7, r24	; 0x07
    17c6:	9a 87       	std	Y+10, r25	; 0x0a
    17c8:	89 87       	std	Y+9, r24	; 0x09
    17ca:	1b 86       	std	Y+11, r1	; 0x0b
    17cc:	1c 86       	std	Y+12, r1	; 0x0c
    17ce:	1d 86       	std	Y+13, r1	; 0x0d
    17d0:	1e 86       	std	Y+14, r1	; 0x0e
    17d2:	68 01       	movw	r12, r16
    17d4:	8c ee       	ldi	r24, 0xEC	; 236
    17d6:	c8 1a       	sub	r12, r24
    17d8:	8b ef       	ldi	r24, 0xFB	; 251
    17da:	d8 0a       	sbc	r13, r24
    17dc:	78 01       	movw	r14, r16
    17de:	aa eb       	ldi	r26, 0xBA	; 186
    17e0:	ea 1a       	sub	r14, r26
    17e2:	ab ef       	ldi	r26, 0xFB	; 251
    17e4:	fa 0a       	sbc	r15, r26
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
	    ti.buffer_size = OUTPUT_SIZE;
    17e6:	41 2c       	mov	r4, r1
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	59 2e       	mov	r5, r25
    17ec:	61 2c       	mov	r6, r1
    17ee:	71 2c       	mov	r7, r1
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
    17f0:	f6 01       	movw	r30, r12
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	09 f4       	brne	.+2      	; 0x17fc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x7c>
    17fa:	5b c0       	rjmp	.+182    	; 0x18b2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x132>
          {
	    ReadBuffer buffer;
    17fc:	ce 01       	movw	r24, r28
    17fe:	0f 96       	adiw	r24, 0x0f	; 15
    1800:	35 d9       	rcall	.-3478   	; 0xa6c <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = publishers[i]->id_;
    1802:	d6 01       	movw	r26, r12
    1804:	ed 91       	ld	r30, X+
    1806:	fc 91       	ld	r31, X
    1808:	85 81       	ldd	r24, Z+5	; 0x05
    180a:	96 81       	ldd	r25, Z+6	; 0x06
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
    }
    
    // for topics
    const char * readTopicName( const Publisher * pub )
    {
      return readTopic( pub->topic_, pub->has_flash_topic_ );
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	42 81       	ldd	r20, Z+2	; 0x02
    1816:	ce 01       	movw	r24, r28
    1818:	0f 96       	adiw	r24, 0x0f	; 15
    181a:	23 d9       	rcall	.-3514   	; 0xa62 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = publishers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( publishers[i] );
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( publishers[i]->msg_->getType() );
    1820:	d6 01       	movw	r26, r12
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	83 81       	ldd	r24, Z+3	; 0x03
    1828:	94 81       	ldd	r25, Z+4	; 0x04
    182a:	dc 01       	movw	r26, r24
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	04 80       	ldd	r0, Z+4	; 0x04
    1832:	f5 81       	ldd	r31, Z+5	; 0x05
    1834:	e0 2d       	mov	r30, r0
    1836:	19 95       	eicall
    }
    
    // for md5sum / msg type
    virtual const char *  readMsgInfo( const char * msg_info )
    {
      return readFromFlash( reinterpret_cast<const __FlashStringHelper*>( msg_info ) );
    1838:	bc 01       	movw	r22, r24
    183a:	ce 01       	movw	r24, r28
    183c:	0f 96       	adiw	r24, 0x0f	; 15
    183e:	d1 d8       	rcall	.-3678   	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1840:	98 87       	std	Y+8, r25	; 0x08
    1842:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( publishers[i]->msg_->getMD5() );
    1844:	d6 01       	movw	r26, r12
    1846:	ed 91       	ld	r30, X+
    1848:	fc 91       	ld	r31, X
    184a:	83 81       	ldd	r24, Z+3	; 0x03
    184c:	94 81       	ldd	r25, Z+4	; 0x04
    184e:	dc 01       	movw	r26, r24
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	06 80       	ldd	r0, Z+6	; 0x06
    1856:	f7 81       	ldd	r31, Z+7	; 0x07
    1858:	e0 2d       	mov	r30, r0
    185a:	19 95       	eicall
    185c:	bc 01       	movw	r22, r24
    185e:	ce 01       	movw	r24, r28
    1860:	0f 96       	adiw	r24, 0x0f	; 15
    1862:	bf d8       	rcall	.-3714   	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1864:	9a 87       	std	Y+10, r25	; 0x0a
    1866:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = OUTPUT_SIZE;
    1868:	4b 86       	std	Y+11, r4	; 0x0b
    186a:	5c 86       	std	Y+12, r5	; 0x0c
    186c:	6d 86       	std	Y+13, r6	; 0x0d
    186e:	7e 86       	std	Y+14, r7	; 0x0e
    1870:	d6 01       	movw	r26, r12
    1872:	ed 91       	ld	r30, X+
    1874:	fc 91       	ld	r31, X
	    publish( publishers[i]->getEndpointType(), &ti );
    1876:	61 85       	ldd	r22, Z+9	; 0x09
    1878:	72 85       	ldd	r23, Z+10	; 0x0a
    187a:	d8 01       	movw	r26, r16
    187c:	ed 91       	ld	r30, X+
    187e:	fc 91       	ld	r31, X
    1880:	01 90       	ld	r0, Z+
    1882:	f0 81       	ld	r31, Z
    1884:	e0 2d       	mov	r30, r0
    1886:	ae 01       	movw	r20, r28
    1888:	4f 5f       	subi	r20, 0xFF	; 255
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	c8 01       	movw	r24, r16
    188e:	19 95       	eicall
    1890:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    // clean up buffer here before eventually going into log
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	19 f4       	brne	.+6      	; 0x189c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x11c>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1896:	4f e3       	ldi	r20, 0x3F	; 63
    1898:	52 e0       	ldi	r21, 0x02	; 2
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x124>
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	29 f4       	brne	.+10     	; 0x18aa <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x12a>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    18a0:	43 e5       	ldi	r20, 0x53	; 83
    18a2:	52 e0       	ldi	r21, 0x02	; 2
    18a4:	63 e0       	ldi	r22, 0x03	; 3
    18a6:	c8 01       	movw	r24, r16
    18a8:	c5 de       	rcall	.-630    	; 0x1634 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    18aa:	ce 01       	movw	r24, r28
    18ac:	0f 96       	adiw	r24, 0x0f	; 15
    18ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN3ros19FlashReadOutBuffer_D1Ev>
    18b2:	b2 e0       	ldi	r27, 0x02	; 2
    18b4:	cb 0e       	add	r12, r27
    18b6:	d1 1c       	adc	r13, r1
      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
	
        for(i = 0; i < MAX_PUBLISHERS; i++)
    18b8:	ce 14       	cp	r12, r14
    18ba:	df 04       	cpc	r13, r15
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x140>
    18be:	98 cf       	rjmp	.-208    	; 0x17f0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x70>
    18c0:	68 01       	movw	r12, r16
    18c2:	e8 e8       	ldi	r30, 0x88	; 136
    18c4:	ce 1a       	sub	r12, r30
    18c6:	eb ef       	ldi	r30, 0xFB	; 251
    18c8:	de 0a       	sbc	r13, r30
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
	    ti.buffer_size = INPUT_SIZE;
    18ca:	41 2c       	mov	r4, r1
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	58 2e       	mov	r5, r24
    18d0:	61 2c       	mov	r6, r1
    18d2:	71 2c       	mov	r7, r1
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
    18d4:	d7 01       	movw	r26, r14
    18d6:	8d 91       	ld	r24, X+
    18d8:	9c 91       	ld	r25, X
    18da:	89 2b       	or	r24, r25
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x160>
          {
	    ReadBuffer buffer;
    18de:	5d c0       	rjmp	.+186    	; 0x199a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x21a>
    18e0:	ce 01       	movw	r24, r28
    18e2:	0f 96       	adiw	r24, 0x0f	; 15
    18e4:	c3 d8       	rcall	.-3706   	; 0xa6c <_ZN3ros19FlashReadOutBuffer_C1Ev>
	    
	    ti.topic_id = subscribers[i]->id_;
    18e6:	d7 01       	movw	r26, r14
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    }
    
    // for topics
    const char * readTopicName( const Subscriber_ * sub )
    {
      return readTopic( sub->topic_, sub->has_flash_topic_ );
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	64 81       	ldd	r22, Z+4	; 0x04
    18f6:	75 81       	ldd	r23, Z+5	; 0x05
    18f8:	46 81       	ldd	r20, Z+6	; 0x06
    18fa:	ce 01       	movw	r24, r28
    18fc:	0f 96       	adiw	r24, 0x0f	; 15
    18fe:	b1 d8       	rcall	.-3742   	; 0xa62 <_ZN3ros19FlashReadOutBuffer_9readTopicEPKcb>
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
	    
	    ti.topic_id = subscribers[i]->id_;
	    ti.topic_name = (char *) buffer.readTopicName( subscribers[i] );
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
	    ti.message_type = (char *) buffer.readMsgInfo( subscribers[i]->getMsgType() );
    1904:	f7 01       	movw	r30, r14
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	dc 01       	movw	r26, r24
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	04 80       	ldd	r0, Z+4	; 0x04
    1912:	f5 81       	ldd	r31, Z+5	; 0x05
    1914:	e0 2d       	mov	r30, r0
    1916:	19 95       	eicall
    1918:	bc 01       	movw	r22, r24
    191a:	ce 01       	movw	r24, r28
    191c:	0f 96       	adiw	r24, 0x0f	; 15
    191e:	61 d8       	rcall	.-3902   	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	8f 83       	std	Y+7, r24	; 0x07
	    ti.md5sum = (char *) buffer.readMsgInfo( subscribers[i]->getMsgMD5() );
    1924:	f7 01       	movw	r30, r14
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	dc 01       	movw	r26, r24
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	06 80       	ldd	r0, Z+6	; 0x06
    1932:	f7 81       	ldd	r31, Z+7	; 0x07
    1934:	e0 2d       	mov	r30, r0
    1936:	19 95       	eicall
    1938:	bc 01       	movw	r22, r24
    193a:	ce 01       	movw	r24, r28
    193c:	0f 96       	adiw	r24, 0x0f	; 15
    193e:	51 d8       	rcall	.-3934   	; 0x9e2 <_ZN3ros19FlashReadOutBuffer_13readFromFlashEPK19__FlashStringHelper>
    1940:	9a 87       	std	Y+10, r25	; 0x0a
    1942:	89 87       	std	Y+9, r24	; 0x09
	    ti.buffer_size = INPUT_SIZE;
    1944:	4b 86       	std	Y+11, r4	; 0x0b
    1946:	5c 86       	std	Y+12, r5	; 0x0c
    1948:	6d 86       	std	Y+13, r6	; 0x0d
    194a:	7e 86       	std	Y+14, r7	; 0x0e
	    publish( subscribers[i]->getEndpointType(), &ti );
    194c:	d8 01       	movw	r26, r16
    194e:	ed 91       	ld	r30, X+
    1950:	fc 91       	ld	r31, X
    1952:	a0 80       	ld	r10, Z
    1954:	b1 80       	ldd	r11, Z+1	; 0x01
    1956:	f7 01       	movw	r30, r14
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	dc 01       	movw	r26, r24
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	02 80       	ldd	r0, Z+2	; 0x02
    1964:	f3 81       	ldd	r31, Z+3	; 0x03
    1966:	e0 2d       	mov	r30, r0
    1968:	19 95       	eicall
    196a:	ae 01       	movw	r20, r28
    196c:	4f 5f       	subi	r20, 0xFF	; 255
    196e:	5f 4f       	sbci	r21, 0xFF	; 255
    1970:	bc 01       	movw	r22, r24
    1972:	c8 01       	movw	r24, r16
    1974:	f5 01       	movw	r30, r10
    1976:	19 95       	eicall
    1978:	89 89       	ldd	r24, Y+17	; 0x11
	    
	    DefaultReadOutBuffer_::ReadoutError error = buffer.getError();
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	19 f4       	brne	.+6      	; 0x1984 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x204>
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    197e:	4f e3       	ldi	r20, 0x3F	; 63
    1980:	52 e0       	ldi	r21, 0x02	; 2
	    
	    if ( DefaultReadOutBuffer_::ReadoutFromFlashAttemptedButNotImplemented == error )
	    {
	      logerror( "Flash read not impl" );
	    }
	    else if ( DefaultReadOutBuffer_::BufferOverflow == error )
    1982:	04 c0       	rjmp	.+8      	; 0x198c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x20c>
    1984:	82 30       	cpi	r24, 0x02	; 2
      }
      
      template<typename T_ConstStringType>   
      void logerror( T_ConstStringType msg)
      {
        log(rosserial_msgs::Log::ERROR, msg);
    1986:	29 f4       	brne	.+10     	; 0x1992 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x212>
    1988:	43 e5       	ldi	r20, 0x53	; 83
    198a:	52 e0       	ldi	r21, 0x02	; 2
    198c:	63 e0       	ldi	r22, 0x03	; 3
    198e:	c8 01       	movw	r24, r16
    1990:	51 de       	rcall	.-862    	; 0x1634 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE3logEcPKc>
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
          {
	    ReadBuffer buffer;
    1992:	ce 01       	movw	r24, r28
    1994:	0f 96       	adiw	r24, 0x0f	; 15
    1996:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN3ros19FlashReadOutBuffer_D1Ev>
    199a:	f2 e0       	ldi	r31, 0x02	; 2
    199c:	ef 0e       	add	r14, r31
    199e:	f1 1c       	adc	r15, r1
	      logerror( "Buffer overflow pub" );
	    }
          }
        }
        
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
    19a0:	ce 14       	cp	r12, r14
    19a2:	df 04       	cpc	r13, r15
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x228>
    19a6:	96 cf       	rjmp	.-212    	; 0x18d4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv+0x154>
	      logerror( "Buffer overflow pub" );
	    }
	  }
        }
        
        configured_ = true;
    19a8:	f8 01       	movw	r30, r16
    19aa:	ee 57       	subi	r30, 0x7E	; 126
    19ac:	fb 4f       	sbci	r31, 0xFB	; 251
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	80 83       	st	Z, r24
      }
    19b2:	66 96       	adiw	r28, 0x16	; 22
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	7f 90       	pop	r7
    19d4:	6f 90       	pop	r6
    19d6:	5f 90       	pop	r5
    19d8:	4f 90       	pop	r4
    19da:	08 95       	ret

000019dc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
    19dc:	2f 92       	push	r2
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	60 97       	sbiw	r28, 0x10	; 16
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
    }

    unsigned long time(){return millis();}
    1a14:	f9 d5       	rcall	.+3058   	; 0x2608 <millis>
    1a16:	4b 01       	movw	r8, r22
    1a18:	5c 01       	movw	r10, r24

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
    1a1a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a1c:	38 89       	ldd	r19, Y+16	; 0x10
    1a1e:	29 57       	subi	r18, 0x79	; 121
    1a20:	3b 4f       	sbci	r19, 0xFB	; 251
    1a22:	3e 83       	std	Y+6, r19	; 0x06
    1a24:	2d 83       	std	Y+5, r18	; 0x05
    1a26:	f9 01       	movw	r30, r18
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a2e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a30:	a5 01       	movw	r20, r10
    1a32:	94 01       	movw	r18, r8
    1a34:	28 1b       	sub	r18, r24
    1a36:	39 0b       	sbc	r19, r25
    1a38:	4a 0b       	sbc	r20, r26
    1a3a:	5b 0b       	sbc	r21, r27
    1a3c:	da 01       	movw	r26, r20
    1a3e:	c9 01       	movw	r24, r18
    1a40:	89 3f       	cpi	r24, 0xF9	; 249
    1a42:	9a 42       	sbci	r25, 0x2A	; 42
    1a44:	a1 05       	cpc	r26, r1
    1a46:	b1 05       	cpc	r27, r1
    1a48:	28 f0       	brcs	.+10     	; 0x1a54 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x78>
            configured_ = false;
    1a4a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a4c:	f8 89       	ldd	r31, Y+16	; 0x10
    1a4e:	ee 57       	subi	r30, 0x7E	; 126
    1a50:	fb 4f       	sbci	r31, 0xFB	; 251
    1a52:	10 82       	st	Z, r1
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
    1a54:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a56:	18 89       	ldd	r17, Y+16	; 0x10
    1a58:	08 58       	subi	r16, 0x88	; 136
    1a5a:	1b 4f       	sbci	r17, 0xFB	; 251
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9c 91       	ld	r25, X
    1a62:	89 2b       	or	r24, r25
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xaa>
          if (c_time > last_msg_timeout_time){
    1a66:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a68:	f8 89       	ldd	r31, Y+16	; 0x10
    1a6a:	e5 57       	subi	r30, 0x75	; 117
    1a6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	a2 81       	ldd	r26, Z+2	; 0x02
    1a74:	b3 81       	ldd	r27, Z+3	; 0x03
    1a76:	88 15       	cp	r24, r8
    1a78:	99 05       	cpc	r25, r9
    1a7a:	aa 05       	cpc	r26, r10
    1a7c:	bb 05       	cpc	r27, r11
    1a7e:	18 f4       	brcc	.+6      	; 0x1a86 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0xaa>
            mode_ = MODE_FIRST_FF;
    1a80:	f8 01       	movw	r30, r16
    1a82:	11 82       	std	Z+1, r1	; 0x01
    1a84:	10 82       	st	Z, r1
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
    1a86:	6f 84       	ldd	r6, Y+15	; 0x0f
    1a88:	78 88       	ldd	r7, Y+16	; 0x10
    1a8a:	f0 e8       	ldi	r31, 0x80	; 128
    1a8c:	6f 1a       	sub	r6, r31
    1a8e:	fb ef       	ldi	r31, 0xFB	; 251
    1a90:	7f 0a       	sbc	r7, r31
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
              if(topic_ == TopicInfo::ID_PUBLISHER){
    1a92:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a94:	38 89       	ldd	r19, Y+16	; 0x10
    1a96:	24 58       	subi	r18, 0x84	; 132
    1a98:	3b 4f       	sbci	r19, 0xFB	; 251
    1a9a:	3a 83       	std	Y+2, r19	; 0x02
    1a9c:	29 83       	std	Y+1, r18	; 0x01
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
    1a9e:	cf 84       	ldd	r12, Y+15	; 0x0f
    1aa0:	d8 88       	ldd	r13, Y+16	; 0x10
    1aa2:	34 e1       	ldi	r19, 0x14	; 20
    1aa4:	c3 0e       	add	r12, r19
    1aa6:	d1 1c       	adc	r13, r1
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
    1aa8:	4f 85       	ldd	r20, Y+15	; 0x0f
    1aaa:	58 89       	ldd	r21, Y+16	; 0x10
    1aac:	4e 57       	subi	r20, 0x7E	; 126
    1aae:	5b 4f       	sbci	r21, 0xFB	; 251
    1ab0:	58 87       	std	Y+8, r21	; 0x08
    1ab2:	4f 83       	std	Y+7, r20	; 0x07
                last_sync_receive_time = c_time;
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
                  req_param_resp.deserialize(message_in);
    1ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab6:	98 89       	ldd	r25, Y+16	; 0x10
    1ab8:	80 57       	subi	r24, 0x70	; 112
    1aba:	9b 4f       	sbci	r25, 0xFB	; 251
    1abc:	9a 87       	std	Y+10, r25	; 0x0a
    1abe:	89 87       	std	Y+9, r24	; 0x09
                  param_recieved= true;
    1ac0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ac2:	b8 89       	ldd	r27, Y+16	; 0x10
    1ac4:	a1 57       	subi	r26, 0x71	; 113
    1ac6:	bb 4f       	sbci	r27, 0xFB	; 251
    1ac8:	bc 87       	std	Y+12, r27	; 0x0c
    1aca:	ab 87       	std	Y+11, r26	; 0x0b
            mode_++;
            checksum_ = data;               /* first byte included in checksum */
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
    1acc:	ef 84       	ldd	r14, Y+15	; 0x0f
    1ace:	f8 88       	ldd	r15, Y+16	; 0x10
    1ad0:	b6 e8       	ldi	r27, 0x86	; 134
    1ad2:	eb 1a       	sub	r14, r27
    1ad4:	bb ef       	ldi	r27, 0xFB	; 251
    1ad6:	fb 0a       	sbc	r15, r27
              if (configured_ == false)
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
            bytes_ = data;
            index_ = 0;
    1ad8:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ada:	f8 89       	ldd	r31, Y+16	; 0x10
    1adc:	e2 58       	subi	r30, 0x82	; 130
    1ade:	fb 4f       	sbci	r31, 0xFB	; 251
    1ae0:	fc 83       	std	Y+4, r31	; 0x04
    1ae2:	eb 83       	std	Y+3, r30	; 0x03
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_FIRST_FF ){
            if(data == 0xff){
              mode_++;
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    1ae4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ae6:	38 89       	ldd	r19, Y+16	; 0x10
    1ae8:	25 57       	subi	r18, 0x75	; 117
    1aea:	3b 4f       	sbci	r19, 0xFB	; 251
    1aec:	3e 87       	std	Y+14, r19	; 0x0e
    1aee:	2d 87       	std	Y+13, r18	; 0x0d
    1af0:	14 01       	movw	r2, r8
    1af2:	25 01       	movw	r4, r10
    1af4:	34 e1       	ldi	r19, 0x14	; 20
    1af6:	23 0e       	add	r2, r19
    1af8:	31 1c       	adc	r3, r1
    1afa:	41 1c       	adc	r4, r1
    1afc:	51 1c       	adc	r5, r1
    1afe:	af 85       	ldd	r26, Y+15	; 0x0f
    1b00:	b8 89       	ldd	r27, Y+16	; 0x10
    1b02:	12 96       	adiw	r26, 0x02	; 2
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	13 97       	sbiw	r26, 0x03	; 3
      delay(3000); 
#endif
      iostream->begin(baud_);
    }

    int read(){return iostream->read();};
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	02 84       	ldd	r0, Z+10	; 0x0a
    1b12:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b14:	e0 2d       	mov	r30, r0
    1b16:	19 95       	eicall
    1b18:	9c 01       	movw	r18, r24

        /* while available buffer, read data */
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
    1b1a:	97 fd       	sbrc	r25, 7
    1b1c:	1f c1       	rjmp	.+574    	; 0x1d5c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x380>
            break;
          checksum_ += data;
    1b1e:	f3 01       	movw	r30, r6
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
    1b2c:	d8 01       	movw	r26, r16
    1b2e:	4d 91       	ld	r20, X+
    1b30:	5c 91       	ld	r21, X
    1b32:	47 30       	cpi	r20, 0x07	; 7
    1b34:	51 05       	cpc	r21, r1
    1b36:	d1 f4       	brne	.+52     	; 0x1b6c <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x190>
            message_in[index_++] = data;
    1b38:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	ac 01       	movw	r20, r24
    1b42:	4f 5f       	subi	r20, 0xFF	; 255
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	51 83       	std	Z+1, r21	; 0x01
    1b48:	40 83       	st	Z, r20
    1b4a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b4c:	f8 89       	ldd	r31, Y+16	; 0x10
    1b4e:	e8 0f       	add	r30, r24
    1b50:	f9 1f       	adc	r31, r25
    1b52:	24 8b       	std	Z+20, r18	; 0x14
            bytes_--;
    1b54:	d7 01       	movw	r26, r14
    1b56:	8d 91       	ld	r24, X+
    1b58:	9c 91       	ld	r25, X
    1b5a:	11 97       	sbiw	r26, 0x01	; 1
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	8d 93       	st	X+, r24
    1b60:	9c 93       	st	X, r25
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
    1b62:	89 2b       	or	r24, r25
    1b64:	61 f6       	brne	.-104    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
              mode_ = MODE_MSG_CHECKSUM;
    1b66:	88 e0       	ldi	r24, 0x08	; 8
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	2f c0       	rjmp	.+94     	; 0x1bca <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1ee>
          }else if( mode_ == MODE_FIRST_FF ){
    1b6c:	41 15       	cp	r20, r1
    1b6e:	51 05       	cpc	r21, r1
    1b70:	21 f5       	brne	.+72     	; 0x1bba <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1de>
            if(data == 0xff){
    1b72:	2f 3f       	cpi	r18, 0xFF	; 255
    1b74:	31 05       	cpc	r19, r1
    1b76:	61 f4       	brne	.+24     	; 0x1b90 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1b4>
              mode_++;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	d8 01       	movw	r26, r16
    1b7e:	8d 93       	st	X+, r24
    1b80:	9c 93       	st	X, r25
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
    1b82:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b84:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b86:	20 82       	st	Z, r2
    1b88:	31 82       	std	Z+1, r3	; 0x01
    1b8a:	42 82       	std	Z+2, r4	; 0x02
    1b8c:	53 82       	std	Z+3, r5	; 0x03
    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++)
        iostream->write(data[i]);
    }

    unsigned long time(){return millis();}
    1b8e:	b7 cf       	rjmp	.-146    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
    1b90:	3b d5       	rcall	.+2678   	; 0x2608 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	88 19       	sub	r24, r8
    1b98:	99 09       	sbc	r25, r9
    1b9a:	aa 09       	sbc	r26, r10
    1b9c:	bb 09       	sbc	r27, r11
    1b9e:	06 97       	sbiw	r24, 0x06	; 6
    1ba0:	a1 05       	cpc	r26, r1
    1ba2:	b1 05       	cpc	r27, r1
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1cc>
    1ba6:	ab cf       	rjmp	.-170    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
    1ba8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1baa:	38 89       	ldd	r19, Y+16	; 0x10
    1bac:	2e 57       	subi	r18, 0x7E	; 126
    1bae:	3b 4f       	sbci	r19, 0xFB	; 251
    1bb0:	d9 01       	movw	r26, r18
    1bb2:	1c 92       	st	X, r1
              return -2;
    1bb4:	8e ef       	ldi	r24, 0xFE	; 254
    1bb6:	9f ef       	ldi	r25, 0xFF	; 255
    1bb8:	f9 c0       	rjmp	.+498    	; 0x1dac <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x3d0>
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
    1bba:	41 30       	cpi	r20, 0x01	; 1
    1bbc:	51 05       	cpc	r21, r1
    1bbe:	a9 f4       	brne	.+42     	; 0x1bea <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x20e>
            if(data == PROTOCOL_VER){
    1bc0:	2e 3f       	cpi	r18, 0xFE	; 254
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	31 f4       	brne	.+12     	; 0x1bd2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1f6>
              mode_++;
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	f8 01       	movw	r30, r16
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	96 cf       	rjmp	.-212    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
            }else{
              mode_ = MODE_FIRST_FF;
    1bd2:	d8 01       	movw	r26, r16
    1bd4:	1d 92       	st	X+, r1
    1bd6:	1c 92       	st	X, r1
              if (configured_ == false)
    1bd8:	ef 81       	ldd	r30, Y+7	; 0x07
    1bda:	f8 85       	ldd	r31, Y+8	; 0x08
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 11       	cpse	r24, r1
    1be0:	8e cf       	rjmp	.-228    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	98 89       	ldd	r25, Y+16	; 0x10
    1be6:	36 dc       	rcall	.-1940   	; 0x1454 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
    1be8:	8a cf       	rjmp	.-236    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
    1bea:	42 30       	cpi	r20, 0x02	; 2
    1bec:	51 05       	cpc	r21, r1
    1bee:	81 f4       	brne	.+32     	; 0x1c10 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x234>
            bytes_ = data;
    1bf0:	d7 01       	movw	r26, r14
    1bf2:	2d 93       	st	X+, r18
    1bf4:	3c 93       	st	X, r19
            index_ = 0;
    1bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfa:	11 82       	std	Z+1, r1	; 0x01
    1bfc:	10 82       	st	Z, r1
            mode_++;
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	d8 01       	movw	r26, r16
    1c04:	8d 93       	st	X+, r24
    1c06:	9c 93       	st	X, r25
            checksum_ = data;               /* first byte for calculating size checksum */
    1c08:	f3 01       	movw	r30, r6
    1c0a:	31 83       	std	Z+1, r19	; 0x01
    1c0c:	20 83       	st	Z, r18
    1c0e:	77 cf       	rjmp	.-274    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
    1c10:	43 30       	cpi	r20, 0x03	; 3
    1c12:	51 05       	cpc	r21, r1
    1c14:	69 f4       	brne	.+26     	; 0x1c30 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x254>
            bytes_ += data<<8;
    1c16:	32 2f       	mov	r19, r18
    1c18:	22 27       	eor	r18, r18
    1c1a:	d7 01       	movw	r26, r14
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9c 91       	ld	r25, X
    1c20:	11 97       	sbiw	r26, 0x01	; 1
    1c22:	28 0f       	add	r18, r24
    1c24:	39 1f       	adc	r19, r25
    1c26:	2d 93       	st	X+, r18
    1c28:	3c 93       	st	X, r19
	    mode_++;
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	cd cf       	rjmp	.-102    	; 0x1bca <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x1ee>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
    1c30:	44 30       	cpi	r20, 0x04	; 4
    1c32:	51 05       	cpc	r21, r1
            if( (checksum_%256) == 255)
    1c34:	81 f4       	brne	.+32     	; 0x1c56 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x27a>
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	01 d5       	rcall	.+2562   	; 0x263e <__divmodhi4>
    1c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3e:	91 05       	cpc	r25, r1
    1c40:	31 f4       	brne	.+12     	; 0x1c4e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x272>
	      mode_++;
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	d8 01       	movw	r26, r16
    1c48:	8d 93       	st	X+, r24
    1c4a:	9c 93       	st	X, r25
    1c4c:	58 cf       	rjmp	.-336    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    1c4e:	f8 01       	movw	r30, r16
    1c50:	11 82       	std	Z+1, r1	; 0x01
    1c52:	10 82       	st	Z, r1
    1c54:	54 cf       	rjmp	.-344    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
    1c56:	45 30       	cpi	r20, 0x05	; 5
    1c58:	51 05       	cpc	r21, r1
    1c5a:	69 f4       	brne	.+26     	; 0x1c76 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x29a>
            topic_ = data;
    1c5c:	a9 81       	ldd	r26, Y+1	; 0x01
    1c5e:	ba 81       	ldd	r27, Y+2	; 0x02
    1c60:	2d 93       	st	X+, r18
    1c62:	3c 93       	st	X, r19
            mode_++;
    1c64:	46 e0       	ldi	r20, 0x06	; 6
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	f8 01       	movw	r30, r16
    1c6a:	51 83       	std	Z+1, r21	; 0x01
    1c6c:	40 83       	st	Z, r20
            checksum_ = data;               /* first byte included in checksum */
    1c6e:	d3 01       	movw	r26, r6
    1c70:	2d 93       	st	X+, r18
    1c72:	3c 93       	st	X, r19
    1c74:	44 cf       	rjmp	.-376    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
    1c76:	46 30       	cpi	r20, 0x06	; 6
    1c78:	51 05       	cpc	r21, r1
    1c7a:	99 f4       	brne	.+38     	; 0x1ca2 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x2c6>
            topic_ += data<<8;
    1c7c:	32 2f       	mov	r19, r18
    1c7e:	22 27       	eor	r18, r18
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	28 0f       	add	r18, r24
    1c8a:	39 1f       	adc	r19, r25
    1c8c:	31 83       	std	Z+1, r19	; 0x01
    1c8e:	20 83       	st	Z, r18
            mode_ = MODE_MESSAGE;
    1c90:	e7 e0       	ldi	r30, 0x07	; 7
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	d8 01       	movw	r26, r16
    1c96:	ed 93       	st	X+, r30
    1c98:	fc 93       	st	X, r31
            if(bytes_ == 0)
    1c9a:	d7 01       	movw	r26, r14
    1c9c:	8d 91       	ld	r24, X+
    1c9e:	9c 91       	ld	r25, X
    1ca0:	60 cf       	rjmp	.-320    	; 0x1b62 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x186>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
    1ca2:	48 30       	cpi	r20, 0x08	; 8
    1ca4:	51 05       	cpc	r21, r1
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x2ce>
    1ca8:	2a cf       	rjmp	.-428    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
            mode_ = MODE_FIRST_FF;
    1caa:	f8 01       	movw	r30, r16
    1cac:	11 82       	std	Z+1, r1	; 0x01
            if( (checksum_%256) == 255){
    1cae:	10 82       	st	Z, r1
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	71 e0       	ldi	r23, 0x01	; 1
    1cb4:	c4 d4       	rcall	.+2440   	; 0x263e <__divmodhi4>
    1cb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb8:	91 05       	cpc	r25, r1
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x2e2>
    1cbc:	20 cf       	rjmp	.-448    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
              if(topic_ == TopicInfo::ID_PUBLISHER){
    1cbe:	a9 81       	ldd	r26, Y+1	; 0x01
    1cc0:	ba 81       	ldd	r27, Y+2	; 0x02
    1cc2:	8d 91       	ld	r24, X+
    1cc4:	9c 91       	ld	r25, X
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
                requestSyncTime();
    1cc8:	b9 f4       	brne	.+46     	; 0x1cf8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x31c>
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
                negotiateTopics();
    1cce:	c2 db       	rcall	.-2172   	; 0x1454 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	55 dd       	rcall	.-1366   	; 0x1780 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15negotiateTopicsEv>
                last_sync_time = c_time;
    1cd6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cd8:	f8 89       	ldd	r31, Y+16	; 0x10
    1cda:	ed 57       	subi	r30, 0x7D	; 125
    1cdc:	fb 4f       	sbci	r31, 0xFB	; 251
    1cde:	80 82       	st	Z, r8
    1ce0:	91 82       	std	Z+1, r9	; 0x01
    1ce2:	a2 82       	std	Z+2, r10	; 0x02
    1ce4:	b3 82       	std	Z+3, r11	; 0x03
                last_sync_receive_time = c_time;
    1ce6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cea:	80 82       	st	Z, r8
    1cec:	91 82       	std	Z+1, r9	; 0x01
    1cee:	a2 82       	std	Z+2, r10	; 0x02
    1cf0:	b3 82       	std	Z+3, r11	; 0x03
                return -1;
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
              }else if(topic_ == TopicInfo::ID_TIME){
    1cf6:	5a c0       	rjmp	.+180    	; 0x1dac <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x3d0>
    1cf8:	8a 30       	cpi	r24, 0x0A	; 10
    1cfa:	91 05       	cpc	r25, r1
                syncTime(message_in);
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x32c>
    1cfe:	b6 01       	movw	r22, r12
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	98 89       	ldd	r25, Y+16	; 0x10
    1d04:	df db       	rcall	.-2114   	; 0x14c4 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8syncTimeEPh>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
    1d06:	fb ce       	rjmp	.-522    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
    1d08:	86 30       	cpi	r24, 0x06	; 6
    1d0a:	91 05       	cpc	r25, r1
                  req_param_resp.deserialize(message_in);
    1d0c:	49 f4       	brne	.+18     	; 0x1d20 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x344>
    1d0e:	b6 01       	movw	r22, r12
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	fa d8       	rcall	.-3596   	; 0xf0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                  param_recieved= true;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d1c:	8c 93       	st	X, r24
    1d1e:	ef ce       	rjmp	.-546    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
    1d20:	8b 30       	cpi	r24, 0x0B	; 11
    1d22:	91 05       	cpc	r25, r1
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x352>
                  configured_ = false;
    1d26:	ef 81       	ldd	r30, Y+7	; 0x07
    1d28:	f8 85       	ldd	r31, Y+8	; 0x08
    1d2a:	10 82       	st	Z, r1
    1d2c:	e8 ce       	rjmp	.-560    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
              }else{
                if(subscribers[topic_-100])
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e1 54       	subi	r30, 0x41	; 65
    1d32:	fe 4f       	sbci	r31, 0xFE	; 254
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d3a:	38 89       	ldd	r19, Y+16	; 0x10
    1d3c:	e2 0f       	add	r30, r18
    1d3e:	f3 1f       	adc	r31, r19
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x36e>
    1d48:	da ce       	rjmp	.-588    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
                  subscribers[topic_-100]->callback( message_in );
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	01 90       	ld	r0, Z+
    1d52:	f0 81       	ld	r31, Z
    1d54:	e0 2d       	mov	r30, r0
    1d56:	b6 01       	movw	r22, r12
    1d58:	19 95       	eicall
    1d5a:	d1 ce       	rjmp	.-606    	; 0x1afe <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x122>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
    1d5c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d5e:	f8 89       	ldd	r31, Y+16	; 0x10
    1d60:	ee 57       	subi	r30, 0x7E	; 126
    1d62:	fb 4f       	sbci	r31, 0xFB	; 251
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	f9 f0       	breq	.+62     	; 0x1da8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x3cc>
    1d6a:	0f 85       	ldd	r16, Y+15	; 0x0f
    1d6c:	18 89       	ldd	r17, Y+16	; 0x10
    1d6e:	0d 57       	subi	r16, 0x7D	; 125
    1d70:	1b 4f       	sbci	r17, 0xFB	; 251
    1d72:	f8 01       	movw	r30, r16
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	a2 81       	ldd	r26, Z+2	; 0x02
    1d7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d7c:	a5 01       	movw	r20, r10
    1d7e:	94 01       	movw	r18, r8
    1d80:	28 1b       	sub	r18, r24
    1d82:	39 0b       	sbc	r19, r25
    1d84:	4a 0b       	sbc	r20, r26
    1d86:	5b 0b       	sbc	r21, r27
    1d88:	da 01       	movw	r26, r20
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	85 3c       	cpi	r24, 0xC5	; 197
    1d8e:	99 40       	sbci	r25, 0x09	; 9
    1d90:	a1 05       	cpc	r26, r1
    1d92:	b1 05       	cpc	r27, r1
          requestSyncTime();
    1d94:	48 f0       	brcs	.+18     	; 0x1da8 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv+0x3cc>
    1d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d98:	98 89       	ldd	r25, Y+16	; 0x10
    1d9a:	5c db       	rcall	.-2376   	; 0x1454 <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE15requestSyncTimeEv>
          last_sync_time = c_time;
    1d9c:	d8 01       	movw	r26, r16
    1d9e:	8d 92       	st	X+, r8
    1da0:	9d 92       	st	X+, r9
    1da2:	ad 92       	st	X+, r10
    1da4:	bc 92       	st	X, r11
    1da6:	13 97       	sbiw	r26, 0x03	; 3
        }

        return 0;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
      }
    1dac:	60 96       	adiw	r28, 0x10	; 16
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	9f 90       	pop	r9
    1dce:	8f 90       	pop	r8
    1dd0:	7f 90       	pop	r7
    1dd2:	6f 90       	pop	r6
    1dd4:	5f 90       	pop	r5
    1dd6:	4f 90       	pop	r4
    1dd8:	3f 90       	pop	r3
    1dda:	2f 90       	pop	r2
    1ddc:	08 95       	ret

00001dde <main>:
//End of Auto generated function prototypes by Atmel Studio



int main()
{
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	cd 5c       	subi	r28, 0xCD	; 205
    1de8:	d4 40       	sbci	r29, 0x04	; 4
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
    1df4:	81 ec       	ldi	r24, 0xC1	; 193
    1df6:	92 e0       	ldi	r25, 0x02	; 2
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
      /* Leonardo support */
      iostream = &Serial1;
#elif defined(USE_TEENSY_HW_SERIAL) or defined(USE_STM32_HW_SERIAL)
      iostream = &Serial1;
#else
      iostream = &Serial;
    1dfc:	8b e2       	ldi	r24, 0x2B	; 43
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
#endif
      baud_ = 57600;
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	91 ee       	ldi	r25, 0xE1	; 225
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	af 83       	std	Y+7, r26	; 0x07
    1e12:	b8 87       	std	Y+8, r27	; 0x08
    1e14:	cd 57       	subi	r28, 0x7D	; 125
    1e16:	db 4f       	sbci	r29, 0xFB	; 251
    1e18:	18 82       	st	Y, r1
    1e1a:	c3 58       	subi	r28, 0x83	; 131
    1e1c:	d4 40       	sbci	r29, 0x04	; 4
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    1e1e:	8d e9       	ldi	r24, 0x9D	; 157
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	cf 56       	subi	r28, 0x6F	; 111
    1e24:	db 4f       	sbci	r29, 0xFB	; 251
    1e26:	99 83       	std	Y+1, r25	; 0x01
    1e28:	88 83       	st	Y, r24
    1e2a:	c1 59       	subi	r28, 0x91	; 145
    1e2c:	d4 40       	sbci	r29, 0x04	; 4
    1e2e:	cd 56       	subi	r28, 0x6D	; 109
    1e30:	db 4f       	sbci	r29, 0xFB	; 251
    1e32:	18 82       	st	Y, r1
    1e34:	19 82       	std	Y+1, r1	; 0x01
    1e36:	1a 82       	std	Y+2, r1	; 0x02
    1e38:	1b 82       	std	Y+3, r1	; 0x03
    1e3a:	c3 59       	subi	r28, 0x93	; 147
    1e3c:	d4 40       	sbci	r29, 0x04	; 4
    1e3e:	c5 56       	subi	r28, 0x65	; 101
    1e40:	db 4f       	sbci	r29, 0xFB	; 251
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	18 82       	st	Y, r1
    1e46:	cb 59       	subi	r28, 0x9B	; 155
    1e48:	d4 40       	sbci	r29, 0x04	; 4
    1e4a:	c3 56       	subi	r28, 0x63	; 99
    1e4c:	db 4f       	sbci	r29, 0xFB	; 251
    1e4e:	18 82       	st	Y, r1
    1e50:	19 82       	std	Y+1, r1	; 0x01
    1e52:	1a 82       	std	Y+2, r1	; 0x02
    1e54:	1b 82       	std	Y+3, r1	; 0x03
    1e56:	cd 59       	subi	r28, 0x9D	; 157
    1e58:	d4 40       	sbci	r29, 0x04	; 4
    1e5a:	cb 55       	subi	r28, 0x5B	; 91
    1e5c:	db 4f       	sbci	r29, 0xFB	; 251
    1e5e:	19 82       	std	Y+1, r1	; 0x01
    1e60:	18 82       	st	Y, r1
    1e62:	c5 5a       	subi	r28, 0xA5	; 165
    1e64:	d4 40       	sbci	r29, 0x04	; 4
    1e66:	c9 55       	subi	r28, 0x59	; 89
    1e68:	db 4f       	sbci	r29, 0xFB	; 251
    1e6a:	18 82       	st	Y, r1
    1e6c:	19 82       	std	Y+1, r1	; 0x01
    1e6e:	1a 82       	std	Y+2, r1	; 0x02
    1e70:	1b 82       	std	Y+3, r1	; 0x03
    1e72:	c7 5a       	subi	r28, 0xA7	; 167
    1e74:	d4 40       	sbci	r29, 0x04	; 4
    1e76:	c3 55       	subi	r28, 0x53	; 83
    1e78:	db 4f       	sbci	r29, 0xFB	; 251
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	18 82       	st	Y, r1
    1e7e:	cd 5a       	subi	r28, 0xAD	; 173
    1e80:	d4 40       	sbci	r29, 0x04	; 4
    1e82:	8e 01       	movw	r16, r28
    1e84:	0b 5e       	subi	r16, 0xEB	; 235
    1e86:	1b 4f       	sbci	r17, 0xFB	; 251
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 5b       	subi	r30, 0xB9	; 185
    1e8c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e8e:	d8 01       	movw	r26, r16

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
    1e90:	1d 92       	st	X+, r1
    1e92:	1d 92       	st	X+, r1
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
    1e94:	ea 17       	cp	r30, r26
    1e96:	fb 07       	cpc	r31, r27
    1e98:	d9 f7       	brne	.-10     	; 0x1e90 <main+0xb2>
    1e9a:	7e 01       	movw	r14, r28
    1e9c:	87 e8       	ldi	r24, 0x87	; 135
    1e9e:	e8 1a       	sub	r14, r24
    1ea0:	8b ef       	ldi	r24, 0xFB	; 251
    1ea2:	f8 0a       	sbc	r15, r24
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
    1ea4:	11 92       	st	Z+, r1
    1ea6:	11 92       	st	Z+, r1
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
    1ea8:	ee 16       	cp	r14, r30
    1eaa:	ff 06       	cpc	r15, r31
    1eac:	d9 f7       	brne	.-10     	; 0x1ea4 <main+0xc6>
    1eae:	de 01       	movw	r26, r28
    1eb0:	55 96       	adiw	r26, 0x15	; 21
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	eb 5e       	subi	r30, 0xEB	; 235
    1eb6:	fd 4f       	sbci	r31, 0xFD	; 253
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
    1eb8:	1d 92       	st	X+, r1
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
    1eba:	ea 17       	cp	r30, r26
    1ebc:	fb 07       	cpc	r31, r27
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <main+0xda>
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
    1ec0:	11 92       	st	Z+, r1
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
    1ec2:	e0 17       	cp	r30, r16
    1ec4:	f1 07       	cpc	r31, r17
    1ec6:	e1 f7       	brne	.-8      	; 0x1ec0 <main+0xe2>
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
      data(0)
    1ec8:	5e 01       	movw	r10, r28
    1eca:	a8 e3       	ldi	r26, 0x38	; 56
    1ecc:	aa 1a       	sub	r10, r26
    1ece:	ab ef       	ldi	r26, 0xFB	; 251
    1ed0:	ba 0a       	sbc	r11, r26
    1ed2:	85 eb       	ldi	r24, 0xB5	; 181
    1ed4:	92 e0       	ldi	r25, 0x02	; 2
    1ed6:	f5 01       	movw	r30, r10
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	12 82       	std	Z+2, r1	; 0x02
    1ede:	13 82       	std	Z+3, r1	; 0x03
    1ee0:	14 82       	std	Z+4, r1	; 0x04
    1ee2:	15 82       	std	Z+5, r1	; 0x05
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        has_flash_topic_( false ),
        msg_(msg),
        endpoint_(endpoint) 
    1ee4:	6e 01       	movw	r12, r28
    1ee6:	b3 e4       	ldi	r27, 0x43	; 67
    1ee8:	cb 1a       	sub	r12, r27
    1eea:	bb ef       	ldi	r27, 0xFB	; 251
    1eec:	db 0a       	sbc	r13, r27
    1eee:	87 e6       	ldi	r24, 0x67	; 103
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	12 82       	std	Z+2, r1	; 0x02
    1efa:	b4 82       	std	Z+4, r11	; 0x04
    1efc:	a3 82       	std	Z+3, r10	; 0x03
    1efe:	12 86       	std	Z+10, r1	; 0x0a
    1f00:	11 86       	std	Z+9, r1	; 0x09
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1f02:	26 e0       	ldi	r18, 0x06	; 6
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	51 ee       	ldi	r21, 0xE1	; 225
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	8b e2       	ldi	r24, 0x2B	; 43
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	8a d1       	rcall	.+788    	; 0x2226 <_ZN14HardwareSerial5beginEmh>
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
    1f12:	d7 01       	movw	r26, r14
    1f14:	1d 92       	st	X+, r1
    1f16:	1c 92       	st	X, r1
        bytes_ = 0;
    1f18:	c5 58       	subi	r28, 0x85	; 133
    1f1a:	db 4f       	sbci	r29, 0xFB	; 251
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	18 82       	st	Y, r1
    1f20:	cb 57       	subi	r28, 0x7B	; 123
    1f22:	d4 40       	sbci	r29, 0x04	; 4
        index_ = 0;
    1f24:	c1 58       	subi	r28, 0x81	; 129
    1f26:	db 4f       	sbci	r29, 0xFB	; 251
    1f28:	19 82       	std	Y+1, r1	; 0x01
    1f2a:	18 82       	st	Y, r1
    1f2c:	cf 57       	subi	r28, 0x7F	; 127
    1f2e:	d4 40       	sbci	r29, 0x04	; 4
        topic_ = 0;
    1f30:	c3 58       	subi	r28, 0x83	; 131
    1f32:	db 4f       	sbci	r29, 0xFB	; 251
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	18 82       	st	Y, r1
    1f38:	cd 57       	subi	r28, 0x7D	; 125
    1f3a:	d4 40       	sbci	r29, 0x04	; 4
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
          if(publishers[i] == 0){ // empty slot
    1f40:	f8 01       	movw	r30, r16
    1f42:	21 91       	ld	r18, Z+
    1f44:	31 91       	ld	r19, Z+
    1f46:	8f 01       	movw	r16, r30
    1f48:	23 2b       	or	r18, r19
    1f4a:	c1 f4       	brne	.+48     	; 0x1f7c <main+0x19e>
            publishers[i] = &p;
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e6 5f       	subi	r30, 0xF6	; 246
    1f50:	fd 4f       	sbci	r31, 0xFD	; 253
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	9e 01       	movw	r18, r28
    1f58:	2f 5f       	subi	r18, 0xFF	; 255
    1f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5c:	e2 0f       	add	r30, r18
    1f5e:	f3 1f       	adc	r31, r19
    1f60:	d1 82       	std	Z+1, r13	; 0x01
    1f62:	c0 82       	st	Z, r12
            p.id_ = i+100+MAX_SUBSCRIBERS;
    1f64:	83 58       	subi	r24, 0x83	; 131
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	d6 01       	movw	r26, r12
    1f6a:	16 96       	adiw	r26, 0x06	; 6
    1f6c:	9c 93       	st	X, r25
    1f6e:	8e 93       	st	-X, r24
    1f70:	15 97       	sbiw	r26, 0x05	; 5
            p.nh_ = this;
    1f72:	18 96       	adiw	r26, 0x08	; 8
    1f74:	3c 93       	st	X, r19
    1f76:	2e 93       	st	-X, r18
    1f78:	17 97       	sbiw	r26, 0x07	; 7
    1f7a:	04 c0       	rjmp	.+8      	; 0x1f84 <main+0x1a6>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	89 31       	cpi	r24, 0x19	; 25
    1f80:	91 05       	cpc	r25, r1
    1f82:	f1 f6       	brne	.-68     	; 0x1f40 <main+0x162>
  ros::Publisher chatter("chatter", &str_msg);

  nh.initNode();
  nh.advertise(chatter);
  
  uint8_t elapsedTimerId = declareTimer(20, 1, Elapsed);
    1f84:	e1 2c       	mov	r14, r1
    1f86:	f1 2c       	mov	r15, r1
    1f88:	00 e0       	ldi	r16, 0x00	; 0
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	84 e1       	ldi	r24, 0x14	; 20
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 9c 04 	call	0x938	; 0x938 <_Z12declareTimerjh9timerModePFvvEjPVj>
    1f9c:	08 2f       	mov	r16, r24
  startTimer(elapsedTimerId);
    1f9e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_Z10startTimerh>
 
 //Serial3.begin(57900);
 
 //Serial3.write("Hallo");
  
DC_Motor_Driver motor = DC_Motor_Driver(PWM_0);
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	81 55       	subi	r24, 0x51	; 81
    1fa8:	9b 4f       	sbci	r25, 0xFB	; 251
    1faa:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN15DC_Motor_DriverC1Eh>
  motor.setDirection(CLOCKWISE);
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	81 55       	subi	r24, 0x51	; 81
    1fb4:	9b 4f       	sbci	r25, 0xFB	; 251
    1fb6:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN15DC_Motor_Driver12setDirectionE17RotationDirection>
  motor.setRpm(200);
    1fba:	68 ec       	ldi	r22, 0xC8	; 200
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	81 55       	subi	r24, 0x51	; 81
    1fc0:	9b 4f       	sbci	r25, 0xFB	; 251
    1fc2:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN15DC_Motor_Driver6setRpmEh>
  motor.startMotor();
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	81 55       	subi	r24, 0x51	; 81
    1fca:	9b 4f       	sbci	r25, 0xFB	; 251
    1fcc:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN15DC_Motor_Driver10startMotorEv>
	timers[timerId].isActive = 0;
}

uint8_t timerElapsed(uint8_t timerId)
{
	return timers[timerId].elapsed;
    1fd0:	bd e0       	ldi	r27, 0x0D	; 13
    1fd2:	0b 9f       	mul	r16, r27
    1fd4:	80 01       	movw	r16, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	04 51       	subi	r16, 0x14	; 20
    1fda:	1d 4f       	sbci	r17, 0xFD	; 253
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 81       	ld	r24, Z
  while(1)
  {
	  if (timerElapsed(elapsedTimerId))
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <main+0x208>
    1fe4:	ff cf       	rjmp	.-2      	; 0x1fe4 <main+0x206>
}

void clearTimerElapsed(uint8_t timerId)
{
	timers[timerId].elapsed	= 0;
    1fe6:	10 82       	st	Z, r1
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    1fe8:	45 e0       	ldi	r20, 0x05	; 5
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	6f e6       	ldi	r22, 0x6F	; 111
    1fee:	72 e0       	ldi	r23, 0x02	; 2
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	95 d2       	rcall	.+1322   	; 0x2520 <_ZN5Print5writeEPKhj>
	  {
		  clearTimerElapsed(elapsedTimerId);
		  Serial3.write("Hallo");
		  str_msg.data = motor.getEncoderTicks();
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	81 55       	subi	r24, 0x51	; 81
    1ffa:	9b 4f       	sbci	r25, 0xFB	; 251
    1ffc:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN15DC_Motor_Driver15getEncoderTicksEv>
    2000:	f5 01       	movw	r30, r10
    2002:	62 83       	std	Z+2, r22	; 0x02
    2004:	73 83       	std	Z+3, r23	; 0x03
    2006:	84 83       	std	Z+4, r24	; 0x04
    2008:	95 83       	std	Z+5, r25	; 0x05
        has_flash_topic_( true ),
        msg_(msg),
        endpoint_(endpoint)
      {};
      
      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
    200a:	d6 01       	movw	r26, r12
    200c:	17 96       	adiw	r26, 0x07	; 7
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	18 97       	sbiw	r26, 0x08	; 8
    2014:	15 96       	adiw	r26, 0x05	; 5
    2016:	6d 91       	ld	r22, X+
    2018:	7c 91       	ld	r23, X
    201a:	16 97       	sbiw	r26, 0x06	; 6
    201c:	dc 01       	movw	r26, r24
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	01 90       	ld	r0, Z+
    2024:	f0 81       	ld	r31, Z
    2026:	e0 2d       	mov	r30, r0
    2028:	a5 01       	movw	r20, r10
    202a:	19 95       	eicall
		  chatter.publish( &str_msg );
		  nh.spinOnce();
    202c:	ce 01       	movw	r24, r28
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	d5 dc       	rcall	.-1622   	; 0x19dc <_ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi512ELi512ENS_19FlashReadOutBuffer_EE8spinOnceEv>
    2032:	d4 cf       	rjmp	.-88     	; 0x1fdc <main+0x1fe>

00002034 <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
    2034:	cf 92       	push	r12
    2036:	df 92       	push	r13
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	8c 01       	movw	r16, r24
    2046:	eb 01       	movw	r28, r22
    uint32_t nsec_part= nsec % 1000000000UL;
    2048:	68 81       	ld	r22, Y
    204a:	79 81       	ldd	r23, Y+1	; 0x01
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3a ec       	ldi	r19, 0xCA	; 202
    2054:	4a e9       	ldi	r20, 0x9A	; 154
    2056:	5b e3       	ldi	r21, 0x3B	; 59
    2058:	05 d3       	rcall	.+1546   	; 0x2664 <__udivmodsi4>
    205a:	f8 01       	movw	r30, r16
    205c:	c0 80       	ld	r12, Z
    205e:	d1 80       	ldd	r13, Z+1	; 0x01
    2060:	e2 80       	ldd	r14, Z+2	; 0x02
    2062:	f3 80       	ldd	r15, Z+3	; 0x03
    2064:	c2 0e       	add	r12, r18
    2066:	d3 1e       	adc	r13, r19
    2068:	e4 1e       	adc	r14, r20
    206a:	f5 1e       	adc	r15, r21
    206c:	c0 82       	st	Z, r12
    206e:	d1 82       	std	Z+1, r13	; 0x01
    2070:	e2 82       	std	Z+2, r14	; 0x02
    2072:	f3 82       	std	Z+3, r15	; 0x03
    nsec = nsec_part;
    2074:	68 83       	st	Y, r22
    2076:	79 83       	std	Y+1, r23	; 0x01
    2078:	8a 83       	std	Y+2, r24	; 0x02
    207a:	9b 83       	std	Y+3, r25	; 0x03
  }
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	08 95       	ret

0000208e <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    208e:	fc 01       	movw	r30, r24
    2090:	91 8d       	ldd	r25, Z+25	; 0x19
    2092:	22 8d       	ldd	r18, Z+26	; 0x1a
    2094:	89 2f       	mov	r24, r25
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	80 5c       	subi	r24, 0xC0	; 192
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	82 1b       	sub	r24, r18
    209e:	91 09       	sbc	r25, r1
    20a0:	8f 73       	andi	r24, 0x3F	; 63
    20a2:	99 27       	eor	r25, r25
    20a4:	08 95       	ret

000020a6 <_ZN14HardwareSerial4peekEv>:
    20a6:	fc 01       	movw	r30, r24
    20a8:	91 8d       	ldd	r25, Z+25	; 0x19
    20aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    20ac:	98 17       	cp	r25, r24
    20ae:	31 f0       	breq	.+12     	; 0x20bc <_ZN14HardwareSerial4peekEv+0x16>
    20b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    20b2:	e8 0f       	add	r30, r24
    20b4:	f1 1d       	adc	r31, r1
    20b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	08 95       	ret
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	9f ef       	ldi	r25, 0xFF	; 255
    20c0:	08 95       	ret

000020c2 <_ZN14HardwareSerial4readEv>:
    20c2:	fc 01       	movw	r30, r24
    20c4:	91 8d       	ldd	r25, Z+25	; 0x19
    20c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    20c8:	98 17       	cp	r25, r24
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <_ZN14HardwareSerial4readEv+0x22>
    20cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    20ce:	df 01       	movw	r26, r30
    20d0:	a8 0f       	add	r26, r24
    20d2:	b1 1d       	adc	r27, r1
    20d4:	5d 96       	adiw	r26, 0x1d	; 29
    20d6:	8c 91       	ld	r24, X
    20d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    20da:	9f 5f       	subi	r25, 0xFF	; 255
    20dc:	9f 73       	andi	r25, 0x3F	; 63
    20de:	92 8f       	std	Z+26, r25	; 0x1a
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	08 95       	ret
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	9f ef       	ldi	r25, 0xFF	; 255
    20e8:	08 95       	ret

000020ea <_ZN14HardwareSerial17availableForWriteEv>:
    20ea:	fc 01       	movw	r30, r24
    20ec:	53 8d       	ldd	r21, Z+27	; 0x1b
    20ee:	44 8d       	ldd	r20, Z+28	; 0x1c
    20f0:	25 2f       	mov	r18, r21
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	84 2f       	mov	r24, r20
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	82 1b       	sub	r24, r18
    20fa:	93 0b       	sbc	r25, r19
    20fc:	54 17       	cp	r21, r20
    20fe:	10 f0       	brcs	.+4      	; 0x2104 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2100:	cf 96       	adiw	r24, 0x3f	; 63
    2102:	08 95       	ret
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	08 95       	ret

00002108 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2108:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    210a:	84 8d       	ldd	r24, Z+28	; 0x1c
    210c:	df 01       	movw	r26, r30
    210e:	a8 0f       	add	r26, r24
    2110:	b1 1d       	adc	r27, r1
    2112:	a3 5a       	subi	r26, 0xA3	; 163
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2118:	84 8d       	ldd	r24, Z+28	; 0x1c
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	8f 73       	andi	r24, 0x3F	; 63
    2120:	99 27       	eor	r25, r25
    2122:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2124:	a6 89       	ldd	r26, Z+22	; 0x16
    2126:	b7 89       	ldd	r27, Z+23	; 0x17
    2128:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    212a:	a0 89       	ldd	r26, Z+16	; 0x10
    212c:	b1 89       	ldd	r27, Z+17	; 0x11
    212e:	8c 91       	ld	r24, X
    2130:	83 70       	andi	r24, 0x03	; 3
    2132:	80 64       	ori	r24, 0x40	; 64
    2134:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2136:	93 8d       	ldd	r25, Z+27	; 0x1b
    2138:	84 8d       	ldd	r24, Z+28	; 0x1c
    213a:	98 13       	cpse	r25, r24
    213c:	06 c0       	rjmp	.+12     	; 0x214a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    213e:	02 88       	ldd	r0, Z+18	; 0x12
    2140:	f3 89       	ldd	r31, Z+19	; 0x13
    2142:	e0 2d       	mov	r30, r0
    2144:	80 81       	ld	r24, Z
    2146:	8f 7d       	andi	r24, 0xDF	; 223
    2148:	80 83       	st	Z, r24
    214a:	08 95       	ret

0000214c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
  _written = true;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    215e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2160:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2162:	98 13       	cpse	r25, r24
    2164:	05 c0       	rjmp	.+10     	; 0x2170 <_ZN14HardwareSerial5writeEh+0x24>
    2166:	e8 89       	ldd	r30, Y+16	; 0x10
    2168:	f9 89       	ldd	r31, Y+17	; 0x11
    216a:	80 81       	ld	r24, Z
    216c:	85 fd       	sbrc	r24, 5
    216e:	25 c0       	rjmp	.+74     	; 0x21ba <_ZN14HardwareSerial5writeEh+0x6e>
    2170:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2172:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	0f 5f       	subi	r16, 0xFF	; 255
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	0f 73       	andi	r16, 0x3F	; 63
    217c:	11 27       	eor	r17, r17
    217e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2180:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2182:	e8 12       	cpse	r14, r24
    2184:	0b c0       	rjmp	.+22     	; 0x219c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	07 fc       	sbrc	r0, 7
    218a:	fa cf       	rjmp	.-12     	; 0x2180 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    218c:	e8 89       	ldd	r30, Y+16	; 0x10
    218e:	f9 89       	ldd	r31, Y+17	; 0x11
    2190:	80 81       	ld	r24, Z
    2192:	85 ff       	sbrs	r24, 5
    2194:	f5 cf       	rjmp	.-22     	; 0x2180 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2196:	ce 01       	movw	r24, r28
    2198:	b7 df       	rcall	.-146    	; 0x2108 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    219a:	f2 cf       	rjmp	.-28     	; 0x2180 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	fe 01       	movw	r30, r28
    21a0:	e8 0f       	add	r30, r24
    21a2:	f1 1d       	adc	r31, r1
    21a4:	e3 5a       	subi	r30, 0xA3	; 163
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    21aa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21ac:	f8 94       	cli
    _tx_buffer_head = i;
    21ae:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    21b0:	ea 89       	ldd	r30, Y+18	; 0x12
    21b2:	fb 89       	ldd	r31, Y+19	; 0x13
    21b4:	80 81       	ld	r24, Z
    21b6:	80 62       	ori	r24, 0x20	; 32
    21b8:	0a c0       	rjmp	.+20     	; 0x21ce <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    21ba:	9f b7       	in	r25, 0x3f	; 63
    21bc:	f8 94       	cli
      *_udr = c;
    21be:	ee 89       	ldd	r30, Y+22	; 0x16
    21c0:	ff 89       	ldd	r31, Y+23	; 0x17
    21c2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    21c4:	e8 89       	ldd	r30, Y+16	; 0x10
    21c6:	f9 89       	ldd	r31, Y+17	; 0x11
    21c8:	80 81       	ld	r24, Z
    21ca:	83 70       	andi	r24, 0x03	; 3
    21cc:	80 64       	ori	r24, 0x40	; 64
    21ce:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21d0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    21ea:	88 8d       	ldd	r24, Y+24	; 0x18
    21ec:	88 23       	and	r24, r24
    21ee:	c1 f0       	breq	.+48     	; 0x2220 <__stack+0x21>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    21f0:	ea 89       	ldd	r30, Y+18	; 0x12
    21f2:	fb 89       	ldd	r31, Y+19	; 0x13
    21f4:	80 81       	ld	r24, Z
    21f6:	85 fd       	sbrc	r24, 5
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__stack+0x5>
    21fa:	a8 89       	ldd	r26, Y+16	; 0x10
    21fc:	b9 89       	ldd	r27, Y+17	; 0x11
    21fe:	8c 91       	ld	r24, X
    2200:	86 fd       	sbrc	r24, 6
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <__stack+0x21>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	07 fc       	sbrc	r0, 7
    2208:	f5 cf       	rjmp	.-22     	; 0x21f4 <_ZN14HardwareSerial5flushEv+0x10>
    220a:	80 81       	ld	r24, Z
    220c:	85 ff       	sbrs	r24, 5
    220e:	f2 cf       	rjmp	.-28     	; 0x21f4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2210:	a8 89       	ldd	r26, Y+16	; 0x10
    2212:	b9 89       	ldd	r27, Y+17	; 0x11
    2214:	8c 91       	ld	r24, X
    2216:	85 ff       	sbrs	r24, 5
    2218:	ed cf       	rjmp	.-38     	; 0x21f4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    221a:	ce 01       	movw	r24, r28
    221c:	75 df       	rcall	.-278    	; 0x2108 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    221e:	e8 cf       	rjmp	.-48     	; 0x21f0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ec 01       	movw	r28, r24
    2236:	6a 01       	movw	r12, r20
    2238:	7b 01       	movw	r14, r22
    223a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    223c:	e8 89       	ldd	r30, Y+16	; 0x10
    223e:	f9 89       	ldd	r31, Y+17	; 0x11
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2244:	41 15       	cp	r20, r1
    2246:	51 4e       	sbci	r21, 0xE1	; 225
    2248:	61 05       	cpc	r22, r1
    224a:	71 05       	cpc	r23, r1
    224c:	a9 f0       	breq	.+42     	; 0x2278 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	79 e0       	ldi	r23, 0x09	; 9
    2252:	8d e3       	ldi	r24, 0x3D	; 61
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a7 01       	movw	r20, r14
    2258:	96 01       	movw	r18, r12
    225a:	04 d2       	rcall	.+1032   	; 0x2664 <__udivmodsi4>
    225c:	da 01       	movw	r26, r20
    225e:	c9 01       	movw	r24, r18
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	a1 09       	sbc	r26, r1
    2264:	b1 09       	sbc	r27, r1
    2266:	b6 95       	lsr	r27
    2268:	a7 95       	ror	r26
    226a:	97 95       	ror	r25
    226c:	87 95       	ror	r24
    226e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2270:	21 15       	cp	r18, r1
    2272:	80 e1       	ldi	r24, 0x10	; 16
    2274:	38 07       	cpc	r19, r24
    2276:	a0 f0       	brcs	.+40     	; 0x22a0 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    2278:	e8 89       	ldd	r30, Y+16	; 0x10
    227a:	f9 89       	ldd	r31, Y+17	; 0x11
    227c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    227e:	60 e8       	ldi	r22, 0x80	; 128
    2280:	74 e8       	ldi	r23, 0x84	; 132
    2282:	8e e1       	ldi	r24, 0x1E	; 30
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a7 01       	movw	r20, r14
    2288:	96 01       	movw	r18, r12
    228a:	ec d1       	rcall	.+984    	; 0x2664 <__udivmodsi4>
    228c:	da 01       	movw	r26, r20
    228e:	c9 01       	movw	r24, r18
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	a1 09       	sbc	r26, r1
    2294:	b1 09       	sbc	r27, r1
    2296:	b6 95       	lsr	r27
    2298:	a7 95       	ror	r26
    229a:	97 95       	ror	r25
    229c:	87 95       	ror	r24
    229e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    22a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    22a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    22a4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    22a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    22a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    22aa:	20 83       	st	Z, r18

  _written = false;
    22ac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    22ae:	ec 89       	ldd	r30, Y+20	; 0x14
    22b0:	fd 89       	ldd	r31, Y+21	; 0x15
    22b2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    22b4:	ea 89       	ldd	r30, Y+18	; 0x12
    22b6:	fb 89       	ldd	r31, Y+19	; 0x13
    22b8:	80 81       	ld	r24, Z
    22ba:	80 61       	ori	r24, 0x10	; 16
    22bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    22be:	ea 89       	ldd	r30, Y+18	; 0x12
    22c0:	fb 89       	ldd	r31, Y+19	; 0x13
    22c2:	80 81       	ld	r24, Z
    22c4:	88 60       	ori	r24, 0x08	; 8
    22c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    22c8:	ea 89       	ldd	r30, Y+18	; 0x12
    22ca:	fb 89       	ldd	r31, Y+19	; 0x13
    22cc:	80 81       	ld	r24, Z
    22ce:	80 68       	ori	r24, 0x80	; 128
    22d0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    22d2:	ea 89       	ldd	r30, Y+18	; 0x12
    22d4:	fb 89       	ldd	r31, Y+19	; 0x13
    22d6:	80 81       	ld	r24, Z
    22d8:	8f 7d       	andi	r24, 0xDF	; 223
    22da:	80 83       	st	Z, r24
}
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	08 95       	ret

000022ec <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	0b b6       	in	r0, 0x3b	; 59
    22f8:	0f 92       	push	r0
    22fa:	2f 93       	push	r18
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	ef 93       	push	r30
    2302:	ff 93       	push	r31
    2304:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <Serial+0x10>
    2308:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <Serial+0x11>
    230c:	80 81       	ld	r24, Z
    230e:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <Serial+0x16>
    2312:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <Serial+0x17>
    2316:	82 fd       	sbrc	r24, 2
    2318:	12 c0       	rjmp	.+36     	; 0x233e <__vector_25+0x52>
    231a:	90 81       	ld	r25, Z
    231c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <Serial+0x19>
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	8f 73       	andi	r24, 0x3F	; 63
    2324:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <Serial+0x1a>
    2328:	82 17       	cp	r24, r18
    232a:	51 f0       	breq	.+20     	; 0x2340 <__vector_25+0x54>
    232c:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <Serial+0x19>
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	e5 5d       	subi	r30, 0xD5	; 213
    2334:	fc 4f       	sbci	r31, 0xFC	; 252
    2336:	95 8f       	std	Z+29, r25	; 0x1d
    2338:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <Serial+0x19>
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <__vector_25+0x54>
    233e:	80 81       	ld	r24, Z
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	9f 91       	pop	r25
    2346:	8f 91       	pop	r24
    2348:	2f 91       	pop	r18
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_26>:
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	0b b6       	in	r0, 0x3b	; 59
    2364:	0f 92       	push	r0
    2366:	2f 93       	push	r18
    2368:	3f 93       	push	r19
    236a:	4f 93       	push	r20
    236c:	5f 93       	push	r21
    236e:	6f 93       	push	r22
    2370:	7f 93       	push	r23
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	ef 93       	push	r30
    237c:	ff 93       	push	r31
    237e:	8b e2       	ldi	r24, 0x2B	; 43
    2380:	93 e0       	ldi	r25, 0x03	; 3
    2382:	c2 de       	rcall	.-636    	; 0x2108 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2384:	ff 91       	pop	r31
    2386:	ef 91       	pop	r30
    2388:	bf 91       	pop	r27
    238a:	af 91       	pop	r26
    238c:	9f 91       	pop	r25
    238e:	8f 91       	pop	r24
    2390:	7f 91       	pop	r23
    2392:	6f 91       	pop	r22
    2394:	5f 91       	pop	r21
    2396:	4f 91       	pop	r20
    2398:	3f 91       	pop	r19
    239a:	2f 91       	pop	r18
    239c:	0f 90       	pop	r0
    239e:	0b be       	out	0x3b, r0	; 59
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	0f 90       	pop	r0
    23a6:	1f 90       	pop	r1
    23a8:	18 95       	reti

000023aa <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    23aa:	eb e2       	ldi	r30, 0x2B	; 43
    23ac:	f3 e0       	ldi	r31, 0x03	; 3
    23ae:	13 82       	std	Z+3, r1	; 0x03
    23b0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    23b2:	88 ee       	ldi	r24, 0xE8	; 232
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	a0 e0       	ldi	r26, 0x00	; 0
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	84 83       	std	Z+4, r24	; 0x04
    23bc:	95 83       	std	Z+5, r25	; 0x05
    23be:	a6 83       	std	Z+6, r26	; 0x06
    23c0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    23c2:	8b ec       	ldi	r24, 0xCB	; 203
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    23ca:	85 ec       	ldi	r24, 0xC5	; 197
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	95 87       	std	Z+13, r25	; 0x0d
    23d0:	84 87       	std	Z+12, r24	; 0x0c
    23d2:	84 ec       	ldi	r24, 0xC4	; 196
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	97 87       	std	Z+15, r25	; 0x0f
    23d8:	86 87       	std	Z+14, r24	; 0x0e
    23da:	80 ec       	ldi	r24, 0xC0	; 192
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	91 8b       	std	Z+17, r25	; 0x11
    23e0:	80 8b       	std	Z+16, r24	; 0x10
    23e2:	81 ec       	ldi	r24, 0xC1	; 193
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	93 8b       	std	Z+19, r25	; 0x13
    23e8:	82 8b       	std	Z+18, r24	; 0x12
    23ea:	82 ec       	ldi	r24, 0xC2	; 194
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	95 8b       	std	Z+21, r25	; 0x15
    23f0:	84 8b       	std	Z+20, r24	; 0x14
    23f2:	86 ec       	ldi	r24, 0xC6	; 198
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	97 8b       	std	Z+23, r25	; 0x17
    23f8:	86 8b       	std	Z+22, r24	; 0x16
    23fa:	11 8e       	std	Z+25, r1	; 0x19
    23fc:	12 8e       	std	Z+26, r1	; 0x1a
    23fe:	13 8e       	std	Z+27, r1	; 0x1b
    2400:	14 8e       	std	Z+28, r1	; 0x1c
    2402:	08 95       	ret

00002404 <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	0b b6       	in	r0, 0x3b	; 59
    2410:	0f 92       	push	r0
    2412:	2f 93       	push	r18
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	ef 93       	push	r30
    241a:	ff 93       	push	r31
    241c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <Serial3+0x10>
    2420:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <Serial3+0x11>
    2424:	80 81       	ld	r24, Z
    2426:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <Serial3+0x16>
    242a:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <Serial3+0x17>
    242e:	82 fd       	sbrc	r24, 2
    2430:	12 c0       	rjmp	.+36     	; 0x2456 <__vector_54+0x52>
    2432:	90 81       	ld	r25, Z
    2434:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <Serial3+0x19>
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	8f 73       	andi	r24, 0x3F	; 63
    243c:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <Serial3+0x1a>
    2440:	82 17       	cp	r24, r18
    2442:	51 f0       	breq	.+20     	; 0x2458 <__vector_54+0x54>
    2444:	e0 91 e1 03 	lds	r30, 0x03E1	; 0x8003e1 <Serial3+0x19>
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	e8 53       	subi	r30, 0x38	; 56
    244c:	fc 4f       	sbci	r31, 0xFC	; 252
    244e:	95 8f       	std	Z+29, r25	; 0x1d
    2450:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <Serial3+0x19>
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <__vector_54+0x54>
    2456:	80 81       	ld	r24, Z
    2458:	ff 91       	pop	r31
    245a:	ef 91       	pop	r30
    245c:	9f 91       	pop	r25
    245e:	8f 91       	pop	r24
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_55>:
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	0b b6       	in	r0, 0x3b	; 59
    247c:	0f 92       	push	r0
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	93 e0       	ldi	r25, 0x03	; 3
    249a:	36 de       	rcall	.-916    	; 0x2108 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	0b be       	out	0x3b, r0	; 59
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <_GLOBAL__sub_I___vector_54>:
    24c2:	e8 ec       	ldi	r30, 0xC8	; 200
    24c4:	f3 e0       	ldi	r31, 0x03	; 3
    24c6:	13 82       	std	Z+3, r1	; 0x03
    24c8:	12 82       	std	Z+2, r1	; 0x02
    24ca:	88 ee       	ldi	r24, 0xE8	; 232
    24cc:	93 e0       	ldi	r25, 0x03	; 3
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	84 83       	std	Z+4, r24	; 0x04
    24d4:	95 83       	std	Z+5, r25	; 0x05
    24d6:	a6 83       	std	Z+6, r26	; 0x06
    24d8:	b7 83       	std	Z+7, r27	; 0x07
    24da:	8b ec       	ldi	r24, 0xCB	; 203
    24dc:	92 e0       	ldi	r25, 0x02	; 2
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
    24e2:	85 e3       	ldi	r24, 0x35	; 53
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	95 87       	std	Z+13, r25	; 0x0d
    24e8:	84 87       	std	Z+12, r24	; 0x0c
    24ea:	84 e3       	ldi	r24, 0x34	; 52
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	97 87       	std	Z+15, r25	; 0x0f
    24f0:	86 87       	std	Z+14, r24	; 0x0e
    24f2:	80 e3       	ldi	r24, 0x30	; 48
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	91 8b       	std	Z+17, r25	; 0x11
    24f8:	80 8b       	std	Z+16, r24	; 0x10
    24fa:	81 e3       	ldi	r24, 0x31	; 49
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	93 8b       	std	Z+19, r25	; 0x13
    2500:	82 8b       	std	Z+18, r24	; 0x12
    2502:	82 e3       	ldi	r24, 0x32	; 50
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	95 8b       	std	Z+21, r25	; 0x15
    2508:	84 8b       	std	Z+20, r24	; 0x14
    250a:	86 e3       	ldi	r24, 0x36	; 54
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	97 8b       	std	Z+23, r25	; 0x17
    2510:	86 8b       	std	Z+22, r24	; 0x16
    2512:	11 8e       	std	Z+25, r1	; 0x19
    2514:	12 8e       	std	Z+26, r1	; 0x1a
    2516:	13 8e       	std	Z+27, r1	; 0x1b
    2518:	14 8e       	std	Z+28, r1	; 0x1c
    251a:	08 95       	ret

0000251c <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    251c:	fa c0       	rjmp	.+500    	; 0x2712 <malloc>

0000251e <_ZdlPv>:
    251e:	91 c1       	rjmp	.+802    	; 0x2842 <free>

00002520 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2520:	cf 92       	push	r12
    2522:	df 92       	push	r13
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	6c 01       	movw	r12, r24
    2532:	7a 01       	movw	r14, r20
    2534:	8b 01       	movw	r16, r22
  size_t n = 0;
    2536:	c0 e0       	ldi	r28, 0x00	; 0
    2538:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    253a:	ce 15       	cp	r28, r14
    253c:	df 05       	cpc	r29, r15
    253e:	81 f0       	breq	.+32     	; 0x2560 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    2540:	d8 01       	movw	r26, r16
    2542:	6d 91       	ld	r22, X+
    2544:	8d 01       	movw	r16, r26
    2546:	d6 01       	movw	r26, r12
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	01 90       	ld	r0, Z+
    254e:	f0 81       	ld	r31, Z
    2550:	e0 2d       	mov	r30, r0
    2552:	c6 01       	movw	r24, r12
    2554:	19 95       	eicall
    2556:	89 2b       	or	r24, r25
    2558:	11 f0       	breq	.+4      	; 0x255e <_ZN5Print5writeEPKhj+0x3e>
    255a:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    255c:	ee cf       	rjmp	.-36     	; 0x253a <_ZN5Print5writeEPKhj+0x1a>
    255e:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    2560:	c7 01       	movw	r24, r14
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	df 90       	pop	r13
    2570:	cf 90       	pop	r12
    2572:	08 95       	ret

00002574 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2574:	1f 92       	push	r1
    2576:	0f 92       	push	r0
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	0f 92       	push	r0
    257c:	11 24       	eor	r1, r1
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    258a:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <timer0_millis>
    258e:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <timer0_millis+0x1>
    2592:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <timer0_millis+0x2>
    2596:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    259a:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    259e:	23 e0       	ldi	r18, 0x03	; 3
    25a0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    25a2:	2d 37       	cpi	r18, 0x7D	; 125
    25a4:	20 f4       	brcc	.+8      	; 0x25ae <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	a1 1d       	adc	r26, r1
    25aa:	b1 1d       	adc	r27, r1
    25ac:	05 c0       	rjmp	.+10     	; 0x25b8 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    25ae:	26 e8       	ldi	r18, 0x86	; 134
    25b0:	23 0f       	add	r18, r19
		m += 1;
    25b2:	02 96       	adiw	r24, 0x02	; 2
    25b4:	a1 1d       	adc	r26, r1
    25b6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    25b8:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <timer0_fract>
	timer0_millis = m;
    25bc:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <timer0_millis>
    25c0:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <timer0_millis+0x1>
    25c4:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <timer0_millis+0x2>
    25c8:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <timer0_millis+0x3>
	timer0_overflow_count++;
    25cc:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <timer0_overflow_count>
    25d0:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <timer0_overflow_count+0x1>
    25d4:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <timer0_overflow_count+0x2>
    25d8:	b0 91 6d 04 	lds	r27, 0x046D	; 0x80046d <timer0_overflow_count+0x3>
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	a1 1d       	adc	r26, r1
    25e0:	b1 1d       	adc	r27, r1
    25e2:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <timer0_overflow_count>
    25e6:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <timer0_overflow_count+0x1>
    25ea:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <timer0_overflow_count+0x2>
    25ee:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <timer0_overflow_count+0x3>
}
    25f2:	bf 91       	pop	r27
    25f4:	af 91       	pop	r26
    25f6:	9f 91       	pop	r25
    25f8:	8f 91       	pop	r24
    25fa:	3f 91       	pop	r19
    25fc:	2f 91       	pop	r18
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2608:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    260a:	f8 94       	cli
	m = timer0_millis;
    260c:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <timer0_millis>
    2610:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <timer0_millis+0x1>
    2614:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <timer0_millis+0x2>
    2618:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <timer0_millis+0x3>
	SREG = oldSREG;
    261c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    261e:	08 95       	ret

00002620 <__mulsi3>:
    2620:	db 01       	movw	r26, r22
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	40 d0       	rcall	.+128    	; 0x26a8 <__muluhisi3>
    2628:	bf 91       	pop	r27
    262a:	af 91       	pop	r26
    262c:	a2 9f       	mul	r26, r18
    262e:	80 0d       	add	r24, r0
    2630:	91 1d       	adc	r25, r1
    2632:	a3 9f       	mul	r26, r19
    2634:	90 0d       	add	r25, r0
    2636:	b2 9f       	mul	r27, r18
    2638:	90 0d       	add	r25, r0
    263a:	11 24       	eor	r1, r1
    263c:	08 95       	ret

0000263e <__divmodhi4>:
    263e:	97 fb       	bst	r25, 7
    2640:	07 2e       	mov	r0, r23
    2642:	16 f4       	brtc	.+4      	; 0x2648 <__divmodhi4+0xa>
    2644:	00 94       	com	r0
    2646:	06 d0       	rcall	.+12     	; 0x2654 <__divmodhi4_neg1>
    2648:	77 fd       	sbrc	r23, 7
    264a:	08 d0       	rcall	.+16     	; 0x265c <__divmodhi4_neg2>
    264c:	37 d0       	rcall	.+110    	; 0x26bc <__udivmodhi4>
    264e:	07 fc       	sbrc	r0, 7
    2650:	05 d0       	rcall	.+10     	; 0x265c <__divmodhi4_neg2>
    2652:	3e f4       	brtc	.+14     	; 0x2662 <__divmodhi4_exit>

00002654 <__divmodhi4_neg1>:
    2654:	90 95       	com	r25
    2656:	81 95       	neg	r24
    2658:	9f 4f       	sbci	r25, 0xFF	; 255
    265a:	08 95       	ret

0000265c <__divmodhi4_neg2>:
    265c:	70 95       	com	r23
    265e:	61 95       	neg	r22
    2660:	7f 4f       	sbci	r23, 0xFF	; 255

00002662 <__divmodhi4_exit>:
    2662:	08 95       	ret

00002664 <__udivmodsi4>:
    2664:	a1 e2       	ldi	r26, 0x21	; 33
    2666:	1a 2e       	mov	r1, r26
    2668:	aa 1b       	sub	r26, r26
    266a:	bb 1b       	sub	r27, r27
    266c:	fd 01       	movw	r30, r26
    266e:	0d c0       	rjmp	.+26     	; 0x268a <__udivmodsi4_ep>

00002670 <__udivmodsi4_loop>:
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	ee 1f       	adc	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	a2 17       	cp	r26, r18
    267a:	b3 07       	cpc	r27, r19
    267c:	e4 07       	cpc	r30, r20
    267e:	f5 07       	cpc	r31, r21
    2680:	20 f0       	brcs	.+8      	; 0x268a <__udivmodsi4_ep>
    2682:	a2 1b       	sub	r26, r18
    2684:	b3 0b       	sbc	r27, r19
    2686:	e4 0b       	sbc	r30, r20
    2688:	f5 0b       	sbc	r31, r21

0000268a <__udivmodsi4_ep>:
    268a:	66 1f       	adc	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	1a 94       	dec	r1
    2694:	69 f7       	brne	.-38     	; 0x2670 <__udivmodsi4_loop>
    2696:	60 95       	com	r22
    2698:	70 95       	com	r23
    269a:	80 95       	com	r24
    269c:	90 95       	com	r25
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	bd 01       	movw	r22, r26
    26a4:	cf 01       	movw	r24, r30
    26a6:	08 95       	ret

000026a8 <__muluhisi3>:
    26a8:	25 d0       	rcall	.+74     	; 0x26f4 <__umulhisi3>
    26aa:	a5 9f       	mul	r26, r21
    26ac:	90 0d       	add	r25, r0
    26ae:	b4 9f       	mul	r27, r20
    26b0:	90 0d       	add	r25, r0
    26b2:	a4 9f       	mul	r26, r20
    26b4:	80 0d       	add	r24, r0
    26b6:	91 1d       	adc	r25, r1
    26b8:	11 24       	eor	r1, r1
    26ba:	08 95       	ret

000026bc <__udivmodhi4>:
    26bc:	aa 1b       	sub	r26, r26
    26be:	bb 1b       	sub	r27, r27
    26c0:	51 e1       	ldi	r21, 0x11	; 17
    26c2:	07 c0       	rjmp	.+14     	; 0x26d2 <__udivmodhi4_ep>

000026c4 <__udivmodhi4_loop>:
    26c4:	aa 1f       	adc	r26, r26
    26c6:	bb 1f       	adc	r27, r27
    26c8:	a6 17       	cp	r26, r22
    26ca:	b7 07       	cpc	r27, r23
    26cc:	10 f0       	brcs	.+4      	; 0x26d2 <__udivmodhi4_ep>
    26ce:	a6 1b       	sub	r26, r22
    26d0:	b7 0b       	sbc	r27, r23

000026d2 <__udivmodhi4_ep>:
    26d2:	88 1f       	adc	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	5a 95       	dec	r21
    26d8:	a9 f7       	brne	.-22     	; 0x26c4 <__udivmodhi4_loop>
    26da:	80 95       	com	r24
    26dc:	90 95       	com	r25
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	08 95       	ret

000026e4 <__tablejump2__>:
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	88 1f       	adc	r24, r24
    26ea:	8b bf       	out	0x3b, r24	; 59
    26ec:	07 90       	elpm	r0, Z+
    26ee:	f6 91       	elpm	r31, Z
    26f0:	e0 2d       	mov	r30, r0
    26f2:	19 94       	eijmp

000026f4 <__umulhisi3>:
    26f4:	a2 9f       	mul	r26, r18
    26f6:	b0 01       	movw	r22, r0
    26f8:	b3 9f       	mul	r27, r19
    26fa:	c0 01       	movw	r24, r0
    26fc:	a3 9f       	mul	r26, r19
    26fe:	70 0d       	add	r23, r0
    2700:	81 1d       	adc	r24, r1
    2702:	11 24       	eor	r1, r1
    2704:	91 1d       	adc	r25, r1
    2706:	b2 9f       	mul	r27, r18
    2708:	70 0d       	add	r23, r0
    270a:	81 1d       	adc	r24, r1
    270c:	11 24       	eor	r1, r1
    270e:	91 1d       	adc	r25, r1
    2710:	08 95       	ret

00002712 <malloc>:
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	91 05       	cpc	r25, r1
    271e:	10 f4       	brcc	.+4      	; 0x2724 <malloc+0x12>
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <__flp>
    2728:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <__flp+0x1>
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	30 97       	sbiw	r30, 0x00	; 0
    2736:	19 f1       	breq	.+70     	; 0x277e <malloc+0x6c>
    2738:	40 81       	ld	r20, Z
    273a:	51 81       	ldd	r21, Z+1	; 0x01
    273c:	02 81       	ldd	r16, Z+2	; 0x02
    273e:	13 81       	ldd	r17, Z+3	; 0x03
    2740:	48 17       	cp	r20, r24
    2742:	59 07       	cpc	r21, r25
    2744:	c8 f0       	brcs	.+50     	; 0x2778 <malloc+0x66>
    2746:	84 17       	cp	r24, r20
    2748:	95 07       	cpc	r25, r21
    274a:	69 f4       	brne	.+26     	; 0x2766 <malloc+0x54>
    274c:	10 97       	sbiw	r26, 0x00	; 0
    274e:	31 f0       	breq	.+12     	; 0x275c <malloc+0x4a>
    2750:	12 96       	adiw	r26, 0x02	; 2
    2752:	0c 93       	st	X, r16
    2754:	12 97       	sbiw	r26, 0x02	; 2
    2756:	13 96       	adiw	r26, 0x03	; 3
    2758:	1c 93       	st	X, r17
    275a:	27 c0       	rjmp	.+78     	; 0x27aa <malloc+0x98>
    275c:	00 93 70 04 	sts	0x0470, r16	; 0x800470 <__flp>
    2760:	10 93 71 04 	sts	0x0471, r17	; 0x800471 <__flp+0x1>
    2764:	22 c0       	rjmp	.+68     	; 0x27aa <malloc+0x98>
    2766:	21 15       	cp	r18, r1
    2768:	31 05       	cpc	r19, r1
    276a:	19 f0       	breq	.+6      	; 0x2772 <malloc+0x60>
    276c:	42 17       	cp	r20, r18
    276e:	53 07       	cpc	r21, r19
    2770:	18 f4       	brcc	.+6      	; 0x2778 <malloc+0x66>
    2772:	9a 01       	movw	r18, r20
    2774:	bd 01       	movw	r22, r26
    2776:	ef 01       	movw	r28, r30
    2778:	df 01       	movw	r26, r30
    277a:	f8 01       	movw	r30, r16
    277c:	db cf       	rjmp	.-74     	; 0x2734 <malloc+0x22>
    277e:	21 15       	cp	r18, r1
    2780:	31 05       	cpc	r19, r1
    2782:	f9 f0       	breq	.+62     	; 0x27c2 <malloc+0xb0>
    2784:	28 1b       	sub	r18, r24
    2786:	39 0b       	sbc	r19, r25
    2788:	24 30       	cpi	r18, 0x04	; 4
    278a:	31 05       	cpc	r19, r1
    278c:	80 f4       	brcc	.+32     	; 0x27ae <malloc+0x9c>
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	61 15       	cp	r22, r1
    2794:	71 05       	cpc	r23, r1
    2796:	21 f0       	breq	.+8      	; 0x27a0 <malloc+0x8e>
    2798:	fb 01       	movw	r30, r22
    279a:	93 83       	std	Z+3, r25	; 0x03
    279c:	82 83       	std	Z+2, r24	; 0x02
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <malloc+0x96>
    27a0:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__flp+0x1>
    27a4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__flp>
    27a8:	fe 01       	movw	r30, r28
    27aa:	32 96       	adiw	r30, 0x02	; 2
    27ac:	44 c0       	rjmp	.+136    	; 0x2836 <malloc+0x124>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e2 0f       	add	r30, r18
    27b2:	f3 1f       	adc	r31, r19
    27b4:	81 93       	st	Z+, r24
    27b6:	91 93       	st	Z+, r25
    27b8:	22 50       	subi	r18, 0x02	; 2
    27ba:	31 09       	sbc	r19, r1
    27bc:	39 83       	std	Y+1, r19	; 0x01
    27be:	28 83       	st	Y, r18
    27c0:	3a c0       	rjmp	.+116    	; 0x2836 <malloc+0x124>
    27c2:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    27c6:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    27ca:	23 2b       	or	r18, r19
    27cc:	41 f4       	brne	.+16     	; 0x27de <malloc+0xcc>
    27ce:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    27d2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    27d6:	30 93 6f 04 	sts	0x046F, r19	; 0x80046f <__brkval+0x1>
    27da:	20 93 6e 04 	sts	0x046E, r18	; 0x80046e <__brkval>
    27de:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    27e2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    27e6:	21 15       	cp	r18, r1
    27e8:	31 05       	cpc	r19, r1
    27ea:	41 f4       	brne	.+16     	; 0x27fc <malloc+0xea>
    27ec:	2d b7       	in	r18, 0x3d	; 61
    27ee:	3e b7       	in	r19, 0x3e	; 62
    27f0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    27f4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    27f8:	24 1b       	sub	r18, r20
    27fa:	35 0b       	sbc	r19, r21
    27fc:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <__brkval>
    2800:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <__brkval+0x1>
    2804:	e2 17       	cp	r30, r18
    2806:	f3 07       	cpc	r31, r19
    2808:	a0 f4       	brcc	.+40     	; 0x2832 <malloc+0x120>
    280a:	2e 1b       	sub	r18, r30
    280c:	3f 0b       	sbc	r19, r31
    280e:	28 17       	cp	r18, r24
    2810:	39 07       	cpc	r19, r25
    2812:	78 f0       	brcs	.+30     	; 0x2832 <malloc+0x120>
    2814:	ac 01       	movw	r20, r24
    2816:	4e 5f       	subi	r20, 0xFE	; 254
    2818:	5f 4f       	sbci	r21, 0xFF	; 255
    281a:	24 17       	cp	r18, r20
    281c:	35 07       	cpc	r19, r21
    281e:	48 f0       	brcs	.+18     	; 0x2832 <malloc+0x120>
    2820:	4e 0f       	add	r20, r30
    2822:	5f 1f       	adc	r21, r31
    2824:	50 93 6f 04 	sts	0x046F, r21	; 0x80046f <__brkval+0x1>
    2828:	40 93 6e 04 	sts	0x046E, r20	; 0x80046e <__brkval>
    282c:	81 93       	st	Z+, r24
    282e:	91 93       	st	Z+, r25
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <malloc+0x124>
    2832:	e0 e0       	ldi	r30, 0x00	; 0
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	cf 01       	movw	r24, r30
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <free>:
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	09 f4       	brne	.+2      	; 0x284c <free+0xa>
    284a:	81 c0       	rjmp	.+258    	; 0x294e <free+0x10c>
    284c:	fc 01       	movw	r30, r24
    284e:	32 97       	sbiw	r30, 0x02	; 2
    2850:	13 82       	std	Z+3, r1	; 0x03
    2852:	12 82       	std	Z+2, r1	; 0x02
    2854:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <__flp>
    2858:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <__flp+0x1>
    285c:	10 97       	sbiw	r26, 0x00	; 0
    285e:	81 f4       	brne	.+32     	; 0x2880 <free+0x3e>
    2860:	20 81       	ld	r18, Z
    2862:	31 81       	ldd	r19, Z+1	; 0x01
    2864:	82 0f       	add	r24, r18
    2866:	93 1f       	adc	r25, r19
    2868:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    286c:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    2870:	28 17       	cp	r18, r24
    2872:	39 07       	cpc	r19, r25
    2874:	51 f5       	brne	.+84     	; 0x28ca <free+0x88>
    2876:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    287a:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    287e:	67 c0       	rjmp	.+206    	; 0x294e <free+0x10c>
    2880:	ed 01       	movw	r28, r26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	ce 17       	cp	r28, r30
    2888:	df 07       	cpc	r29, r31
    288a:	40 f4       	brcc	.+16     	; 0x289c <free+0x5a>
    288c:	4a 81       	ldd	r20, Y+2	; 0x02
    288e:	5b 81       	ldd	r21, Y+3	; 0x03
    2890:	9e 01       	movw	r18, r28
    2892:	41 15       	cp	r20, r1
    2894:	51 05       	cpc	r21, r1
    2896:	f1 f0       	breq	.+60     	; 0x28d4 <free+0x92>
    2898:	ea 01       	movw	r28, r20
    289a:	f5 cf       	rjmp	.-22     	; 0x2886 <free+0x44>
    289c:	d3 83       	std	Z+3, r29	; 0x03
    289e:	c2 83       	std	Z+2, r28	; 0x02
    28a0:	40 81       	ld	r20, Z
    28a2:	51 81       	ldd	r21, Z+1	; 0x01
    28a4:	84 0f       	add	r24, r20
    28a6:	95 1f       	adc	r25, r21
    28a8:	c8 17       	cp	r28, r24
    28aa:	d9 07       	cpc	r29, r25
    28ac:	59 f4       	brne	.+22     	; 0x28c4 <free+0x82>
    28ae:	88 81       	ld	r24, Y
    28b0:	99 81       	ldd	r25, Y+1	; 0x01
    28b2:	84 0f       	add	r24, r20
    28b4:	95 1f       	adc	r25, r21
    28b6:	02 96       	adiw	r24, 0x02	; 2
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	80 83       	st	Z, r24
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	93 83       	std	Z+3, r25	; 0x03
    28c2:	82 83       	std	Z+2, r24	; 0x02
    28c4:	21 15       	cp	r18, r1
    28c6:	31 05       	cpc	r19, r1
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <free+0x92>
    28ca:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    28ce:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    28d2:	3d c0       	rjmp	.+122    	; 0x294e <free+0x10c>
    28d4:	e9 01       	movw	r28, r18
    28d6:	fb 83       	std	Y+3, r31	; 0x03
    28d8:	ea 83       	std	Y+2, r30	; 0x02
    28da:	49 91       	ld	r20, Y+
    28dc:	59 91       	ld	r21, Y+
    28de:	c4 0f       	add	r28, r20
    28e0:	d5 1f       	adc	r29, r21
    28e2:	ec 17       	cp	r30, r28
    28e4:	fd 07       	cpc	r31, r29
    28e6:	61 f4       	brne	.+24     	; 0x2900 <free+0xbe>
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	84 0f       	add	r24, r20
    28ee:	95 1f       	adc	r25, r21
    28f0:	02 96       	adiw	r24, 0x02	; 2
    28f2:	e9 01       	movw	r28, r18
    28f4:	99 83       	std	Y+1, r25	; 0x01
    28f6:	88 83       	st	Y, r24
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	8a 83       	std	Y+2, r24	; 0x02
    2900:	e0 e0       	ldi	r30, 0x00	; 0
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	12 96       	adiw	r26, 0x02	; 2
    2906:	8d 91       	ld	r24, X+
    2908:	9c 91       	ld	r25, X
    290a:	13 97       	sbiw	r26, 0x03	; 3
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	19 f0       	breq	.+6      	; 0x2916 <free+0xd4>
    2910:	fd 01       	movw	r30, r26
    2912:	dc 01       	movw	r26, r24
    2914:	f7 cf       	rjmp	.-18     	; 0x2904 <free+0xc2>
    2916:	8d 91       	ld	r24, X+
    2918:	9c 91       	ld	r25, X
    291a:	11 97       	sbiw	r26, 0x01	; 1
    291c:	9d 01       	movw	r18, r26
    291e:	2e 5f       	subi	r18, 0xFE	; 254
    2920:	3f 4f       	sbci	r19, 0xFF	; 255
    2922:	82 0f       	add	r24, r18
    2924:	93 1f       	adc	r25, r19
    2926:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    292a:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    292e:	28 17       	cp	r18, r24
    2930:	39 07       	cpc	r19, r25
    2932:	69 f4       	brne	.+26     	; 0x294e <free+0x10c>
    2934:	30 97       	sbiw	r30, 0x00	; 0
    2936:	29 f4       	brne	.+10     	; 0x2942 <free+0x100>
    2938:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__flp+0x1>
    293c:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__flp>
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <free+0x104>
    2942:	13 82       	std	Z+3, r1	; 0x03
    2944:	12 82       	std	Z+2, r1	; 0x02
    2946:	b0 93 6f 04 	sts	0x046F, r27	; 0x80046f <__brkval+0x1>
    294a:	a0 93 6e 04 	sts	0x046E, r26	; 0x80046e <__brkval>
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <realloc>:
    2954:	6f 92       	push	r6
    2956:	7f 92       	push	r7
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	81 f4       	brne	.+32     	; 0x2994 <realloc+0x40>
    2974:	cb 01       	movw	r24, r22
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	7f 90       	pop	r7
    2990:	6f 90       	pop	r6
    2992:	bf ce       	rjmp	.-642    	; 0x2712 <malloc>
    2994:	fc 01       	movw	r30, r24
    2996:	e6 0f       	add	r30, r22
    2998:	f7 1f       	adc	r31, r23
    299a:	9c 01       	movw	r18, r24
    299c:	22 50       	subi	r18, 0x02	; 2
    299e:	31 09       	sbc	r19, r1
    29a0:	e2 17       	cp	r30, r18
    29a2:	f3 07       	cpc	r31, r19
    29a4:	08 f4       	brcc	.+2      	; 0x29a8 <realloc+0x54>
    29a6:	a5 c0       	rjmp	.+330    	; 0x2af2 <realloc+0x19e>
    29a8:	ec 01       	movw	r28, r24
    29aa:	d9 01       	movw	r26, r18
    29ac:	0d 91       	ld	r16, X+
    29ae:	1c 91       	ld	r17, X
    29b0:	11 97       	sbiw	r26, 0x01	; 1
    29b2:	06 17       	cp	r16, r22
    29b4:	17 07       	cpc	r17, r23
    29b6:	a8 f0       	brcs	.+42     	; 0x29e2 <realloc+0x8e>
    29b8:	05 30       	cpi	r16, 0x05	; 5
    29ba:	11 05       	cpc	r17, r1
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <realloc+0x6c>
    29be:	97 c0       	rjmp	.+302    	; 0x2aee <realloc+0x19a>
    29c0:	c8 01       	movw	r24, r16
    29c2:	04 97       	sbiw	r24, 0x04	; 4
    29c4:	86 17       	cp	r24, r22
    29c6:	97 07       	cpc	r25, r23
    29c8:	08 f4       	brcc	.+2      	; 0x29cc <realloc+0x78>
    29ca:	91 c0       	rjmp	.+290    	; 0x2aee <realloc+0x19a>
    29cc:	02 50       	subi	r16, 0x02	; 2
    29ce:	11 09       	sbc	r17, r1
    29d0:	06 1b       	sub	r16, r22
    29d2:	17 0b       	sbc	r17, r23
    29d4:	01 93       	st	Z+, r16
    29d6:	11 93       	st	Z+, r17
    29d8:	6d 93       	st	X+, r22
    29da:	7c 93       	st	X, r23
    29dc:	cf 01       	movw	r24, r30
    29de:	31 df       	rcall	.-414    	; 0x2842 <free>
    29e0:	86 c0       	rjmp	.+268    	; 0x2aee <realloc+0x19a>
    29e2:	5b 01       	movw	r10, r22
    29e4:	a0 1a       	sub	r10, r16
    29e6:	b1 0a       	sbc	r11, r17
    29e8:	4c 01       	movw	r8, r24
    29ea:	80 0e       	add	r8, r16
    29ec:	91 1e       	adc	r9, r17
    29ee:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <__flp>
    29f2:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <__flp+0x1>
    29f6:	61 2c       	mov	r6, r1
    29f8:	71 2c       	mov	r7, r1
    29fa:	e1 2c       	mov	r14, r1
    29fc:	f1 2c       	mov	r15, r1
    29fe:	10 97       	sbiw	r26, 0x00	; 0
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <realloc+0xb0>
    2a02:	46 c0       	rjmp	.+140    	; 0x2a90 <realloc+0x13c>
    2a04:	8d 91       	ld	r24, X+
    2a06:	9c 91       	ld	r25, X
    2a08:	11 97       	sbiw	r26, 0x01	; 1
    2a0a:	a8 15       	cp	r26, r8
    2a0c:	b9 05       	cpc	r27, r9
    2a0e:	b1 f5       	brne	.+108    	; 0x2a7c <realloc+0x128>
    2a10:	6c 01       	movw	r12, r24
    2a12:	42 e0       	ldi	r20, 0x02	; 2
    2a14:	c4 0e       	add	r12, r20
    2a16:	d1 1c       	adc	r13, r1
    2a18:	ca 14       	cp	r12, r10
    2a1a:	db 04       	cpc	r13, r11
    2a1c:	78 f1       	brcs	.+94     	; 0x2a7c <realloc+0x128>
    2a1e:	4c 01       	movw	r8, r24
    2a20:	8a 18       	sub	r8, r10
    2a22:	9b 08       	sbc	r9, r11
    2a24:	64 01       	movw	r12, r8
    2a26:	42 e0       	ldi	r20, 0x02	; 2
    2a28:	c4 0e       	add	r12, r20
    2a2a:	d1 1c       	adc	r13, r1
    2a2c:	12 96       	adiw	r26, 0x02	; 2
    2a2e:	bc 90       	ld	r11, X
    2a30:	12 97       	sbiw	r26, 0x02	; 2
    2a32:	13 96       	adiw	r26, 0x03	; 3
    2a34:	ac 91       	ld	r26, X
    2a36:	b5 e0       	ldi	r27, 0x05	; 5
    2a38:	cb 16       	cp	r12, r27
    2a3a:	d1 04       	cpc	r13, r1
    2a3c:	40 f0       	brcs	.+16     	; 0x2a4e <realloc+0xfa>
    2a3e:	b2 82       	std	Z+2, r11	; 0x02
    2a40:	a3 83       	std	Z+3, r26	; 0x03
    2a42:	91 82       	std	Z+1, r9	; 0x01
    2a44:	80 82       	st	Z, r8
    2a46:	d9 01       	movw	r26, r18
    2a48:	6d 93       	st	X+, r22
    2a4a:	7c 93       	st	X, r23
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <realloc+0x10c>
    2a4e:	0e 5f       	subi	r16, 0xFE	; 254
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	80 0f       	add	r24, r16
    2a54:	91 1f       	adc	r25, r17
    2a56:	f9 01       	movw	r30, r18
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	eb 2d       	mov	r30, r11
    2a5e:	fa 2f       	mov	r31, r26
    2a60:	e1 14       	cp	r14, r1
    2a62:	f1 04       	cpc	r15, r1
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <realloc+0x11e>
    2a66:	d7 01       	movw	r26, r14
    2a68:	13 96       	adiw	r26, 0x03	; 3
    2a6a:	fc 93       	st	X, r31
    2a6c:	ee 93       	st	-X, r30
    2a6e:	12 97       	sbiw	r26, 0x02	; 2
    2a70:	3e c0       	rjmp	.+124    	; 0x2aee <realloc+0x19a>
    2a72:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    2a76:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    2a7a:	39 c0       	rjmp	.+114    	; 0x2aee <realloc+0x19a>
    2a7c:	68 16       	cp	r6, r24
    2a7e:	79 06       	cpc	r7, r25
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <realloc+0x130>
    2a82:	3c 01       	movw	r6, r24
    2a84:	7d 01       	movw	r14, r26
    2a86:	12 96       	adiw	r26, 0x02	; 2
    2a88:	0d 90       	ld	r0, X+
    2a8a:	bc 91       	ld	r27, X
    2a8c:	a0 2d       	mov	r26, r0
    2a8e:	b7 cf       	rjmp	.-146    	; 0x29fe <realloc+0xaa>
    2a90:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <__brkval>
    2a94:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <__brkval+0x1>
    2a98:	88 16       	cp	r8, r24
    2a9a:	99 06       	cpc	r9, r25
    2a9c:	e1 f4       	brne	.+56     	; 0x2ad6 <realloc+0x182>
    2a9e:	66 16       	cp	r6, r22
    2aa0:	77 06       	cpc	r7, r23
    2aa2:	c8 f4       	brcc	.+50     	; 0x2ad6 <realloc+0x182>
    2aa4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2aa8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	41 f4       	brne	.+16     	; 0x2ac0 <realloc+0x16c>
    2ab0:	8d b7       	in	r24, 0x3d	; 61
    2ab2:	9e b7       	in	r25, 0x3e	; 62
    2ab4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2ab8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2abc:	84 1b       	sub	r24, r20
    2abe:	95 0b       	sbc	r25, r21
    2ac0:	e8 17       	cp	r30, r24
    2ac2:	f9 07       	cpc	r31, r25
    2ac4:	b0 f4       	brcc	.+44     	; 0x2af2 <realloc+0x19e>
    2ac6:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    2aca:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    2ace:	f9 01       	movw	r30, r18
    2ad0:	71 83       	std	Z+1, r23	; 0x01
    2ad2:	60 83       	st	Z, r22
    2ad4:	0c c0       	rjmp	.+24     	; 0x2aee <realloc+0x19a>
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	1c de       	rcall	.-968    	; 0x2712 <malloc>
    2ada:	7c 01       	movw	r14, r24
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	49 f0       	breq	.+18     	; 0x2af2 <realloc+0x19e>
    2ae0:	a8 01       	movw	r20, r16
    2ae2:	be 01       	movw	r22, r28
    2ae4:	17 d0       	rcall	.+46     	; 0x2b14 <memcpy>
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	ac de       	rcall	.-680    	; 0x2842 <free>
    2aea:	c7 01       	movw	r24, r14
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <realloc+0x1a2>
    2aee:	ce 01       	movw	r24, r28
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <realloc+0x1a2>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	bf 90       	pop	r11
    2b08:	af 90       	pop	r10
    2b0a:	9f 90       	pop	r9
    2b0c:	8f 90       	pop	r8
    2b0e:	7f 90       	pop	r7
    2b10:	6f 90       	pop	r6
    2b12:	08 95       	ret

00002b14 <memcpy>:
    2b14:	fb 01       	movw	r30, r22
    2b16:	dc 01       	movw	r26, r24
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <memcpy+0xa>
    2b1a:	01 90       	ld	r0, Z+
    2b1c:	0d 92       	st	X+, r0
    2b1e:	41 50       	subi	r20, 0x01	; 1
    2b20:	50 40       	sbci	r21, 0x00	; 0
    2b22:	d8 f7       	brcc	.-10     	; 0x2b1a <memcpy+0x6>
    2b24:	08 95       	ret

00002b26 <_exit>:
    2b26:	f8 94       	cli

00002b28 <__stop_program>:
    2b28:	ff cf       	rjmp	.-2      	; 0x2b28 <__stop_program>
